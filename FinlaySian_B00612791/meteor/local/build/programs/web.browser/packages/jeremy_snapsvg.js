(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;

/* Package-scope variables */
var res;

(function(){

///////////////////////////////////////////////////////////////////////
//                                                                   //
// packages/jeremy_snapsvg/packages/jeremy_snapsvg.js                //
//                                                                   //
///////////////////////////////////////////////////////////////////////
                                                                     //
(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/jeremy:snapsvg/lib/dist/snap.svg.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Snap.svg 0.4.1                                                                                                      // 1
//                                                                                                                     // 2
// Copyright (c) 2013 – 2015 Adobe Systems Incorporated. All rights reserved.                                          // 3
//                                                                                                                     // 4
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 5
// you may not use this file except in compliance with the License.                                                    // 6
// You may obtain a copy of the License at                                                                             // 7
//                                                                                                                     // 8
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 9
//                                                                                                                     // 10
// Unless required by applicable law or agreed to in writing, software                                                 // 11
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 12
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13
// See the License for the specific language governing permissions and                                                 // 14
// limitations under the License.                                                                                      // 15
//                                                                                                                     // 16
// build: 2015-04-13                                                                                                   // 17
                                                                                                                       // 18
// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 19
//                                                                                                                     // 20
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 21
// you may not use this file except in compliance with the License.                                                    // 22
// You may obtain a copy of the License at                                                                             // 23
//                                                                                                                     // 24
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 25
//                                                                                                                     // 26
// Unless required by applicable law or agreed to in writing, software                                                 // 27
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 28
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 29
// See the License for the specific language governing permissions and                                                 // 30
// limitations under the License.                                                                                      // 31
// ┌────────────────────────────────────────────────────────────┐ \\
// │ Eve 0.4.2 - JavaScript Events Library                      │ \\
// ├────────────────────────────────────────────────────────────┤ \\
// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\
// └────────────────────────────────────────────────────────────┘ \\
                                                                                                                       // 37
(function (glob) {                                                                                                     // 38
    var version = "0.4.2",                                                                                             // 39
        has = "hasOwnProperty",                                                                                        // 40
        separator = /[\.\/]/,                                                                                          // 41
        comaseparator = /\s*,\s*/,                                                                                     // 42
        wildcard = "*",                                                                                                // 43
        fun = function () {},                                                                                          // 44
        numsort = function (a, b) {                                                                                    // 45
            return a - b;                                                                                              // 46
        },                                                                                                             // 47
        current_event,                                                                                                 // 48
        stop,                                                                                                          // 49
        events = {n: {}},                                                                                              // 50
        firstDefined = function () {                                                                                   // 51
            for (var i = 0, ii = this.length; i < ii; i++) {                                                           // 52
                if (typeof this[i] != "undefined") {                                                                   // 53
                    return this[i];                                                                                    // 54
                }                                                                                                      // 55
            }                                                                                                          // 56
        },                                                                                                             // 57
        lastDefined = function () {                                                                                    // 58
            var i = this.length;                                                                                       // 59
            while (--i) {                                                                                              // 60
                if (typeof this[i] != "undefined") {                                                                   // 61
                    return this[i];                                                                                    // 62
                }                                                                                                      // 63
            }                                                                                                          // 64
        },                                                                                                             // 65
    /*\
     * eve                                                                                                             // 67
     [ method ]                                                                                                        // 68
                                                                                                                       // 69
     * Fires event with given `name`, given scope and other parameters.                                                // 70
                                                                                                                       // 71
     > Arguments                                                                                                       // 72
                                                                                                                       // 73
     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated                                           // 74
     - scope (object) context for the event handlers                                                                   // 75
     - varargs (...) the rest of arguments will be sent to event handlers                                              // 76
                                                                                                                       // 77
     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.
    \*/                                                                                                                // 79
        eve = function (name, scope) {                                                                                 // 80
            name = String(name);                                                                                       // 81
            var e = events,                                                                                            // 82
                oldstop = stop,                                                                                        // 83
                args = Array.prototype.slice.call(arguments, 2),                                                       // 84
                listeners = eve.listeners(name),                                                                       // 85
                z = 0,                                                                                                 // 86
                f = false,                                                                                             // 87
                l,                                                                                                     // 88
                indexed = [],                                                                                          // 89
                queue = {},                                                                                            // 90
                out = [],                                                                                              // 91
                ce = current_event,                                                                                    // 92
                errors = [];                                                                                           // 93
            out.firstDefined = firstDefined;                                                                           // 94
            out.lastDefined = lastDefined;                                                                             // 95
            current_event = name;                                                                                      // 96
            stop = 0;                                                                                                  // 97
            for (var i = 0, ii = listeners.length; i < ii; i++) if ("zIndex" in listeners[i]) {                        // 98
                indexed.push(listeners[i].zIndex);                                                                     // 99
                if (listeners[i].zIndex < 0) {                                                                         // 100
                    queue[listeners[i].zIndex] = listeners[i];                                                         // 101
                }                                                                                                      // 102
            }                                                                                                          // 103
            indexed.sort(numsort);                                                                                     // 104
            while (indexed[z] < 0) {                                                                                   // 105
                l = queue[indexed[z++]];                                                                               // 106
                out.push(l.apply(scope, args));                                                                        // 107
                if (stop) {                                                                                            // 108
                    stop = oldstop;                                                                                    // 109
                    return out;                                                                                        // 110
                }                                                                                                      // 111
            }                                                                                                          // 112
            for (i = 0; i < ii; i++) {                                                                                 // 113
                l = listeners[i];                                                                                      // 114
                if ("zIndex" in l) {                                                                                   // 115
                    if (l.zIndex == indexed[z]) {                                                                      // 116
                        out.push(l.apply(scope, args));                                                                // 117
                        if (stop) {                                                                                    // 118
                            break;                                                                                     // 119
                        }                                                                                              // 120
                        do {                                                                                           // 121
                            z++;                                                                                       // 122
                            l = queue[indexed[z]];                                                                     // 123
                            l && out.push(l.apply(scope, args));                                                       // 124
                            if (stop) {                                                                                // 125
                                break;                                                                                 // 126
                            }                                                                                          // 127
                        } while (l)                                                                                    // 128
                    } else {                                                                                           // 129
                        queue[l.zIndex] = l;                                                                           // 130
                    }                                                                                                  // 131
                } else {                                                                                               // 132
                    out.push(l.apply(scope, args));                                                                    // 133
                    if (stop) {                                                                                        // 134
                        break;                                                                                         // 135
                    }                                                                                                  // 136
                }                                                                                                      // 137
            }                                                                                                          // 138
            stop = oldstop;                                                                                            // 139
            current_event = ce;                                                                                        // 140
            return out;                                                                                                // 141
        };                                                                                                             // 142
        // Undocumented. Debug only.                                                                                   // 143
        eve._events = events;                                                                                          // 144
    /*\
     * eve.listeners                                                                                                   // 146
     [ method ]                                                                                                        // 147
                                                                                                                       // 148
     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.         // 149
                                                                                                                       // 150
     > Arguments                                                                                                       // 151
                                                                                                                       // 152
     - name (string) name of the event, dot (`.`) or slash (`/`) separated                                             // 153
                                                                                                                       // 154
     = (array) array of event handlers                                                                                 // 155
    \*/                                                                                                                // 156
    eve.listeners = function (name) {                                                                                  // 157
        var names = name.split(separator),                                                                             // 158
            e = events,                                                                                                // 159
            item,                                                                                                      // 160
            items,                                                                                                     // 161
            k,                                                                                                         // 162
            i,                                                                                                         // 163
            ii,                                                                                                        // 164
            j,                                                                                                         // 165
            jj,                                                                                                        // 166
            nes,                                                                                                       // 167
            es = [e],                                                                                                  // 168
            out = [];                                                                                                  // 169
        for (i = 0, ii = names.length; i < ii; i++) {                                                                  // 170
            nes = [];                                                                                                  // 171
            for (j = 0, jj = es.length; j < jj; j++) {                                                                 // 172
                e = es[j].n;                                                                                           // 173
                items = [e[names[i]], e[wildcard]];                                                                    // 174
                k = 2;                                                                                                 // 175
                while (k--) {                                                                                          // 176
                    item = items[k];                                                                                   // 177
                    if (item) {                                                                                        // 178
                        nes.push(item);                                                                                // 179
                        out = out.concat(item.f || []);                                                                // 180
                    }                                                                                                  // 181
                }                                                                                                      // 182
            }                                                                                                          // 183
            es = nes;                                                                                                  // 184
        }                                                                                                              // 185
        return out;                                                                                                    // 186
    };                                                                                                                 // 187
                                                                                                                       // 188
    /*\
     * eve.on                                                                                                          // 190
     [ method ]                                                                                                        // 191
     **                                                                                                                // 192
     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:                         // 193
     | eve.on("*.under.*", f);                                                                                         // 194
     | eve("mouse.under.floor"); // triggers f                                                                         // 195
     * Use @eve to trigger the listener.                                                                               // 196
     **                                                                                                                // 197
     > Arguments                                                                                                       // 198
     **                                                                                                                // 199
     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards                    // 200
     - f (function) event handler function                                                                             // 201
     **                                                                                                                // 202
     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. 
     > Example:                                                                                                        // 204
     | eve.on("mouse", eatIt)(2);                                                                                      // 205
     | eve.on("mouse", scream);                                                                                        // 206
     | eve.on("mouse", catchIt)(1);                                                                                    // 207
     * This will ensure that `catchIt` function will be called before `eatIt`.                                         // 208
     *                                                                                                                 // 209
     * If you want to put your handler before non-indexed handlers, specify a negative value.                          // 210
     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.
    \*/                                                                                                                // 212
    eve.on = function (name, f) {                                                                                      // 213
        name = String(name);                                                                                           // 214
        if (typeof f != "function") {                                                                                  // 215
            return function () {};                                                                                     // 216
        }                                                                                                              // 217
        var names = name.split(comaseparator);                                                                         // 218
        for (var i = 0, ii = names.length; i < ii; i++) {                                                              // 219
            (function (name) {                                                                                         // 220
                var names = name.split(separator),                                                                     // 221
                    e = events,                                                                                        // 222
                    exist;                                                                                             // 223
                for (var i = 0, ii = names.length; i < ii; i++) {                                                      // 224
                    e = e.n;                                                                                           // 225
                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});                          // 226
                }                                                                                                      // 227
                e.f = e.f || [];                                                                                       // 228
                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {                                           // 229
                    exist = true;                                                                                      // 230
                    break;                                                                                             // 231
                }                                                                                                      // 232
                !exist && e.f.push(f);                                                                                 // 233
            }(names[i]));                                                                                              // 234
        }                                                                                                              // 235
        return function (zIndex) {                                                                                     // 236
            if (+zIndex == +zIndex) {                                                                                  // 237
                f.zIndex = +zIndex;                                                                                    // 238
            }                                                                                                          // 239
        };                                                                                                             // 240
    };                                                                                                                 // 241
    /*\
     * eve.f                                                                                                           // 243
     [ method ]                                                                                                        // 244
     **                                                                                                                // 245
     * Returns function that will fire given event with optional arguments.                                            // 246
     * Arguments that will be passed to the result function will be also                                               // 247
     * concated to the list of final arguments.                                                                        // 248
     | el.onclick = eve.f("click", 1, 2);                                                                              // 249
     | eve.on("click", function (a, b, c) {                                                                            // 250
     |     console.log(a, b, c); // 1, 2, [event object]                                                               // 251
     | });                                                                                                             // 252
     > Arguments                                                                                                       // 253
     - event (string) event name                                                                                       // 254
     - varargs (…) and any other arguments                                                                             // 255
     = (function) possible event handler function                                                                      // 256
    \*/                                                                                                                // 257
    eve.f = function (event) {                                                                                         // 258
        var attrs = [].slice.call(arguments, 1);                                                                       // 259
        return function () {                                                                                           // 260
            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));                          // 261
        };                                                                                                             // 262
    };                                                                                                                 // 263
    /*\
     * eve.stop                                                                                                        // 265
     [ method ]                                                                                                        // 266
     **                                                                                                                // 267
     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.             // 268
    \*/                                                                                                                // 269
    eve.stop = function () {                                                                                           // 270
        stop = 1;                                                                                                      // 271
    };                                                                                                                 // 272
    /*\
     * eve.nt                                                                                                          // 274
     [ method ]                                                                                                        // 275
     **                                                                                                                // 276
     * Could be used inside event handler to figure out actual name of the event.                                      // 277
     **                                                                                                                // 278
     > Arguments                                                                                                       // 279
     **                                                                                                                // 280
     - subname (string) #optional subname of the event                                                                 // 281
     **                                                                                                                // 282
     = (string) name of the event, if `subname` is not specified                                                       // 283
     * or                                                                                                              // 284
     = (boolean) `true`, if current event’s name contains `subname`                                                    // 285
    \*/                                                                                                                // 286
    eve.nt = function (subname) {                                                                                      // 287
        if (subname) {                                                                                                 // 288
            return new RegExp("(?:\\.|\\/|^)" + subname + "(?:\\.|\\/|$)").test(current_event);                        // 289
        }                                                                                                              // 290
        return current_event;                                                                                          // 291
    };                                                                                                                 // 292
    /*\
     * eve.nts                                                                                                         // 294
     [ method ]                                                                                                        // 295
     **                                                                                                                // 296
     * Could be used inside event handler to figure out actual name of the event.                                      // 297
     **                                                                                                                // 298
     **                                                                                                                // 299
     = (array) names of the event                                                                                      // 300
    \*/                                                                                                                // 301
    eve.nts = function () {                                                                                            // 302
        return current_event.split(separator);                                                                         // 303
    };                                                                                                                 // 304
    /*\
     * eve.off                                                                                                         // 306
     [ method ]                                                                                                        // 307
     **                                                                                                                // 308
     * Removes given function from the list of event listeners assigned to given name.                                 // 309
     * If no arguments specified all the events will be cleared.                                                       // 310
     **                                                                                                                // 311
     > Arguments                                                                                                       // 312
     **                                                                                                                // 313
     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards                    // 314
     - f (function) event handler function                                                                             // 315
    \*/                                                                                                                // 316
    /*\
     * eve.unbind                                                                                                      // 318
     [ method ]                                                                                                        // 319
     **                                                                                                                // 320
     * See @eve.off                                                                                                    // 321
    \*/                                                                                                                // 322
    eve.off = eve.unbind = function (name, f) {                                                                        // 323
        if (!name) {                                                                                                   // 324
            eve._events = events = {n: {}};                                                                            // 325
            return;                                                                                                    // 326
        }                                                                                                              // 327
        var names = name.split(comaseparator);                                                                         // 328
        if (names.length > 1) {                                                                                        // 329
            for (var i = 0, ii = names.length; i < ii; i++) {                                                          // 330
                eve.off(names[i], f);                                                                                  // 331
            }                                                                                                          // 332
            return;                                                                                                    // 333
        }                                                                                                              // 334
        names = name.split(separator);                                                                                 // 335
        var e,                                                                                                         // 336
            key,                                                                                                       // 337
            splice,                                                                                                    // 338
            i, ii, j, jj,                                                                                              // 339
            cur = [events];                                                                                            // 340
        for (i = 0, ii = names.length; i < ii; i++) {                                                                  // 341
            for (j = 0; j < cur.length; j += splice.length - 2) {                                                      // 342
                splice = [j, 1];                                                                                       // 343
                e = cur[j].n;                                                                                          // 344
                if (names[i] != wildcard) {                                                                            // 345
                    if (e[names[i]]) {                                                                                 // 346
                        splice.push(e[names[i]]);                                                                      // 347
                    }                                                                                                  // 348
                } else {                                                                                               // 349
                    for (key in e) if (e[has](key)) {                                                                  // 350
                        splice.push(e[key]);                                                                           // 351
                    }                                                                                                  // 352
                }                                                                                                      // 353
                cur.splice.apply(cur, splice);                                                                         // 354
            }                                                                                                          // 355
        }                                                                                                              // 356
        for (i = 0, ii = cur.length; i < ii; i++) {                                                                    // 357
            e = cur[i];                                                                                                // 358
            while (e.n) {                                                                                              // 359
                if (f) {                                                                                               // 360
                    if (e.f) {                                                                                         // 361
                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {                                   // 362
                            e.f.splice(j, 1);                                                                          // 363
                            break;                                                                                     // 364
                        }                                                                                              // 365
                        !e.f.length && delete e.f;                                                                     // 366
                    }                                                                                                  // 367
                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {                                                // 368
                        var funcs = e.n[key].f;                                                                        // 369
                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {                               // 370
                            funcs.splice(j, 1);                                                                        // 371
                            break;                                                                                     // 372
                        }                                                                                              // 373
                        !funcs.length && delete e.n[key].f;                                                            // 374
                    }                                                                                                  // 375
                } else {                                                                                               // 376
                    delete e.f;                                                                                        // 377
                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {                                                // 378
                        delete e.n[key].f;                                                                             // 379
                    }                                                                                                  // 380
                }                                                                                                      // 381
                e = e.n;                                                                                               // 382
            }                                                                                                          // 383
        }                                                                                                              // 384
    };                                                                                                                 // 385
    /*\
     * eve.once                                                                                                        // 387
     [ method ]                                                                                                        // 388
     **                                                                                                                // 389
     * Binds given event handler with a given name to only run once then unbind itself.                                // 390
     | eve.once("login", f);                                                                                           // 391
     | eve("login"); // triggers f                                                                                     // 392
     | eve("login"); // no listeners                                                                                   // 393
     * Use @eve to trigger the listener.                                                                               // 394
     **                                                                                                                // 395
     > Arguments                                                                                                       // 396
     **                                                                                                                // 397
     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards                    // 398
     - f (function) event handler function                                                                             // 399
     **                                                                                                                // 400
     = (function) same return function as @eve.on                                                                      // 401
    \*/                                                                                                                // 402
    eve.once = function (name, f) {                                                                                    // 403
        var f2 = function () {                                                                                         // 404
            eve.unbind(name, f2);                                                                                      // 405
            return f.apply(this, arguments);                                                                           // 406
        };                                                                                                             // 407
        return eve.on(name, f2);                                                                                       // 408
    };                                                                                                                 // 409
    /*\
     * eve.version                                                                                                     // 411
     [ property (string) ]                                                                                             // 412
     **                                                                                                                // 413
     * Current version of the library.                                                                                 // 414
    \*/                                                                                                                // 415
    eve.version = version;                                                                                             // 416
    eve.toString = function () {                                                                                       // 417
        return "You are running Eve " + version;                                                                       // 418
    };                                                                                                                 // 419
    (typeof module != "undefined" && module.exports) ? (module.exports = eve) : (typeof define === "function" && define.amd ? (define("eve", [], function() { return eve; })) : (glob.eve = eve));
})(this);                                                                                                              // 421
                                                                                                                       // 422
(function (glob, factory) {                                                                                            // 423
    // AMD support                                                                                                     // 424
    if (typeof define == "function" && define.amd) {                                                                   // 425
        // Define as an anonymous module                                                                               // 426
        define(["eve"], function (eve) {                                                                               // 427
            return factory(glob, eve);                                                                                 // 428
        });                                                                                                            // 429
    } else if (typeof exports != 'undefined') {                                                                        // 430
        // Next for Node.js or CommonJS                                                                                // 431
        var eve = require('eve');                                                                                      // 432
        module.exports = factory(glob, eve);                                                                           // 433
    } else {                                                                                                           // 434
        // Browser globals (glob is window)                                                                            // 435
        // Snap adds itself to window                                                                                  // 436
        factory(glob, glob.eve);                                                                                       // 437
    }                                                                                                                  // 438
}(window || this, function (window, eve) {                                                                             // 439
                                                                                                                       // 440
// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 441
//                                                                                                                     // 442
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 443
// you may not use this file except in compliance with the License.                                                    // 444
// You may obtain a copy of the License at                                                                             // 445
//                                                                                                                     // 446
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 447
//                                                                                                                     // 448
// Unless required by applicable law or agreed to in writing, software                                                 // 449
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 450
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 451
// See the License for the specific language governing permissions and                                                 // 452
// limitations under the License.                                                                                      // 453
var mina = (function (eve) {                                                                                           // 454
    var animations = {},                                                                                               // 455
    requestAnimFrame = window.requestAnimationFrame       ||                                                           // 456
                       window.webkitRequestAnimationFrame ||                                                           // 457
                       window.mozRequestAnimationFrame    ||                                                           // 458
                       window.oRequestAnimationFrame      ||                                                           // 459
                       window.msRequestAnimationFrame     ||                                                           // 460
                       function (callback) {                                                                           // 461
                           setTimeout(callback, 16);                                                                   // 462
                       },                                                                                              // 463
    isArray = Array.isArray || function (a) {                                                                          // 464
        return a instanceof Array ||                                                                                   // 465
            Object.prototype.toString.call(a) == "[object Array]";                                                     // 466
    },                                                                                                                 // 467
    idgen = 0,                                                                                                         // 468
    idprefix = "M" + (+new Date).toString(36),                                                                         // 469
    ID = function () {                                                                                                 // 470
        return idprefix + (idgen++).toString(36);                                                                      // 471
    },                                                                                                                 // 472
    diff = function (a, b, A, B) {                                                                                     // 473
        if (isArray(a)) {                                                                                              // 474
            res = [];                                                                                                  // 475
            for (var i = 0, ii = a.length; i < ii; i++) {                                                              // 476
                res[i] = diff(a[i], b, A[i], B);                                                                       // 477
            }                                                                                                          // 478
            return res;                                                                                                // 479
        }                                                                                                              // 480
        var dif = (A - a) / (B - b);                                                                                   // 481
        return function (bb) {                                                                                         // 482
            return a + dif * (bb - b);                                                                                 // 483
        };                                                                                                             // 484
    },                                                                                                                 // 485
    timer = Date.now || function () {                                                                                  // 486
        return +new Date;                                                                                              // 487
    },                                                                                                                 // 488
    sta = function (val) {                                                                                             // 489
        var a = this;                                                                                                  // 490
        if (val == null) {                                                                                             // 491
            return a.s;                                                                                                // 492
        }                                                                                                              // 493
        var ds = a.s - val;                                                                                            // 494
        a.b += a.dur * ds;                                                                                             // 495
        a.B += a.dur * ds;                                                                                             // 496
        a.s = val;                                                                                                     // 497
    },                                                                                                                 // 498
    speed = function (val) {                                                                                           // 499
        var a = this;                                                                                                  // 500
        if (val == null) {                                                                                             // 501
            return a.spd;                                                                                              // 502
        }                                                                                                              // 503
        a.spd = val;                                                                                                   // 504
    },                                                                                                                 // 505
    duration = function (val) {                                                                                        // 506
        var a = this;                                                                                                  // 507
        if (val == null) {                                                                                             // 508
            return a.dur;                                                                                              // 509
        }                                                                                                              // 510
        a.s = a.s * val / a.dur;                                                                                       // 511
        a.dur = val;                                                                                                   // 512
    },                                                                                                                 // 513
    stopit = function () {                                                                                             // 514
        var a = this;                                                                                                  // 515
        delete animations[a.id];                                                                                       // 516
        a.update();                                                                                                    // 517
        eve("mina.stop." + a.id, a);                                                                                   // 518
    },                                                                                                                 // 519
    pause = function () {                                                                                              // 520
        var a = this;                                                                                                  // 521
        if (a.pdif) {                                                                                                  // 522
            return;                                                                                                    // 523
        }                                                                                                              // 524
        delete animations[a.id];                                                                                       // 525
        a.update();                                                                                                    // 526
        a.pdif = a.get() - a.b;                                                                                        // 527
    },                                                                                                                 // 528
    resume = function () {                                                                                             // 529
        var a = this;                                                                                                  // 530
        if (!a.pdif) {                                                                                                 // 531
            return;                                                                                                    // 532
        }                                                                                                              // 533
        a.b = a.get() - a.pdif;                                                                                        // 534
        delete a.pdif;                                                                                                 // 535
        animations[a.id] = a;                                                                                          // 536
    },                                                                                                                 // 537
    update = function () {                                                                                             // 538
        var a = this,                                                                                                  // 539
            res;                                                                                                       // 540
        if (isArray(a.start)) {                                                                                        // 541
            res = [];                                                                                                  // 542
            for (var j = 0, jj = a.start.length; j < jj; j++) {                                                        // 543
                res[j] = +a.start[j] +                                                                                 // 544
                    (a.end[j] - a.start[j]) * a.easing(a.s);                                                           // 545
            }                                                                                                          // 546
        } else {                                                                                                       // 547
            res = +a.start + (a.end - a.start) * a.easing(a.s);                                                        // 548
        }                                                                                                              // 549
        a.set(res);                                                                                                    // 550
    },                                                                                                                 // 551
    frame = function () {                                                                                              // 552
        var len = 0;                                                                                                   // 553
        for (var i in animations) if (animations.hasOwnProperty(i)) {                                                  // 554
            var a = animations[i],                                                                                     // 555
                b = a.get(),                                                                                           // 556
                res;                                                                                                   // 557
            len++;                                                                                                     // 558
            a.s = (b - a.b) / (a.dur / a.spd);                                                                         // 559
            if (a.s >= 1) {                                                                                            // 560
                delete animations[i];                                                                                  // 561
                a.s = 1;                                                                                               // 562
                len--;                                                                                                 // 563
                (function (a) {                                                                                        // 564
                    setTimeout(function () {                                                                           // 565
                        eve("mina.finish." + a.id, a);                                                                 // 566
                    });                                                                                                // 567
                }(a));                                                                                                 // 568
            }                                                                                                          // 569
            a.update();                                                                                                // 570
        }                                                                                                              // 571
        len && requestAnimFrame(frame);                                                                                // 572
    },                                                                                                                 // 573
    /*\
     * mina                                                                                                            // 575
     [ method ]                                                                                                        // 576
     **                                                                                                                // 577
     * Generic animation of numbers                                                                                    // 578
     **                                                                                                                // 579
     - a (number) start _slave_ number                                                                                 // 580
     - A (number) end _slave_ number                                                                                   // 581
     - b (number) start _master_ number (start time in general case)                                                   // 582
     - B (number) end _master_ number (end time in gereal case)                                                        // 583
     - get (function) getter of _master_ number (see @mina.time)                                                       // 584
     - set (function) setter of _slave_ number                                                                         // 585
     - easing (function) #optional easing function, default is @mina.linear                                            // 586
     = (object) animation descriptor                                                                                   // 587
     o {                                                                                                               // 588
     o         id (string) animation id,                                                                               // 589
     o         start (number) start _slave_ number,                                                                    // 590
     o         end (number) end _slave_ number,                                                                        // 591
     o         b (number) start _master_ number,                                                                       // 592
     o         s (number) animation status (0..1),                                                                     // 593
     o         dur (number) animation duration,                                                                        // 594
     o         spd (number) animation speed,                                                                           // 595
     o         get (function) getter of _master_ number (see @mina.time),                                              // 596
     o         set (function) setter of _slave_ number,                                                                // 597
     o         easing (function) easing function, default is @mina.linear,                                             // 598
     o         status (function) status getter/setter,                                                                 // 599
     o         speed (function) speed getter/setter,                                                                   // 600
     o         duration (function) duration getter/setter,                                                             // 601
     o         stop (function) animation stopper                                                                       // 602
     o         pause (function) pauses the animation                                                                   // 603
     o         resume (function) resumes the animation                                                                 // 604
     o         update (function) calles setter with the right value of the animation                                   // 605
     o }                                                                                                               // 606
    \*/                                                                                                                // 607
    mina = function (a, A, b, B, get, set, easing) {                                                                   // 608
        var anim = {                                                                                                   // 609
            id: ID(),                                                                                                  // 610
            start: a,                                                                                                  // 611
            end: A,                                                                                                    // 612
            b: b,                                                                                                      // 613
            s: 0,                                                                                                      // 614
            dur: B - b,                                                                                                // 615
            spd: 1,                                                                                                    // 616
            get: get,                                                                                                  // 617
            set: set,                                                                                                  // 618
            easing: easing || mina.linear,                                                                             // 619
            status: sta,                                                                                               // 620
            speed: speed,                                                                                              // 621
            duration: duration,                                                                                        // 622
            stop: stopit,                                                                                              // 623
            pause: pause,                                                                                              // 624
            resume: resume,                                                                                            // 625
            update: update                                                                                             // 626
        };                                                                                                             // 627
        animations[anim.id] = anim;                                                                                    // 628
        var len = 0, i;                                                                                                // 629
        for (i in animations) if (animations.hasOwnProperty(i)) {                                                      // 630
            len++;                                                                                                     // 631
            if (len == 2) {                                                                                            // 632
                break;                                                                                                 // 633
            }                                                                                                          // 634
        }                                                                                                              // 635
        len == 1 && requestAnimFrame(frame);                                                                           // 636
        return anim;                                                                                                   // 637
    };                                                                                                                 // 638
    /*\
     * mina.time                                                                                                       // 640
     [ method ]                                                                                                        // 641
     **                                                                                                                // 642
     * Returns the current time. Equivalent to:                                                                        // 643
     | function () {                                                                                                   // 644
     |     return (new Date).getTime();                                                                                // 645
     | }                                                                                                               // 646
    \*/                                                                                                                // 647
    mina.time = timer;                                                                                                 // 648
    /*\
     * mina.getById                                                                                                    // 650
     [ method ]                                                                                                        // 651
     **                                                                                                                // 652
     * Returns an animation by its id                                                                                  // 653
     - id (string) animation's id                                                                                      // 654
     = (object) See @mina                                                                                              // 655
    \*/                                                                                                                // 656
    mina.getById = function (id) {                                                                                     // 657
        return animations[id] || null;                                                                                 // 658
    };                                                                                                                 // 659
                                                                                                                       // 660
    /*\
     * mina.linear                                                                                                     // 662
     [ method ]                                                                                                        // 663
     **                                                                                                                // 664
     * Default linear easing                                                                                           // 665
     - n (number) input 0..1                                                                                           // 666
     = (number) output 0..1                                                                                            // 667
    \*/                                                                                                                // 668
    mina.linear = function (n) {                                                                                       // 669
        return n;                                                                                                      // 670
    };                                                                                                                 // 671
    /*\
     * mina.easeout                                                                                                    // 673
     [ method ]                                                                                                        // 674
     **                                                                                                                // 675
     * Easeout easing                                                                                                  // 676
     - n (number) input 0..1                                                                                           // 677
     = (number) output 0..1                                                                                            // 678
    \*/                                                                                                                // 679
    mina.easeout = function (n) {                                                                                      // 680
        return Math.pow(n, 1.7);                                                                                       // 681
    };                                                                                                                 // 682
    /*\
     * mina.easein                                                                                                     // 684
     [ method ]                                                                                                        // 685
     **                                                                                                                // 686
     * Easein easing                                                                                                   // 687
     - n (number) input 0..1                                                                                           // 688
     = (number) output 0..1                                                                                            // 689
    \*/                                                                                                                // 690
    mina.easein = function (n) {                                                                                       // 691
        return Math.pow(n, .48);                                                                                       // 692
    };                                                                                                                 // 693
    /*\
     * mina.easeinout                                                                                                  // 695
     [ method ]                                                                                                        // 696
     **                                                                                                                // 697
     * Easeinout easing                                                                                                // 698
     - n (number) input 0..1                                                                                           // 699
     = (number) output 0..1                                                                                            // 700
    \*/                                                                                                                // 701
    mina.easeinout = function (n) {                                                                                    // 702
        if (n == 1) {                                                                                                  // 703
            return 1;                                                                                                  // 704
        }                                                                                                              // 705
        if (n == 0) {                                                                                                  // 706
            return 0;                                                                                                  // 707
        }                                                                                                              // 708
        var q = .48 - n / 1.04,                                                                                        // 709
            Q = Math.sqrt(.1734 + q * q),                                                                              // 710
            x = Q - q,                                                                                                 // 711
            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),                                                       // 712
            y = -Q - q,                                                                                                // 713
            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),                                                       // 714
            t = X + Y + .5;                                                                                            // 715
        return (1 - t) * 3 * t * t + t * t * t;                                                                        // 716
    };                                                                                                                 // 717
    /*\
     * mina.backin                                                                                                     // 719
     [ method ]                                                                                                        // 720
     **                                                                                                                // 721
     * Backin easing                                                                                                   // 722
     - n (number) input 0..1                                                                                           // 723
     = (number) output 0..1                                                                                            // 724
    \*/                                                                                                                // 725
    mina.backin = function (n) {                                                                                       // 726
        if (n == 1) {                                                                                                  // 727
            return 1;                                                                                                  // 728
        }                                                                                                              // 729
        var s = 1.70158;                                                                                               // 730
        return n * n * ((s + 1) * n - s);                                                                              // 731
    };                                                                                                                 // 732
    /*\
     * mina.backout                                                                                                    // 734
     [ method ]                                                                                                        // 735
     **                                                                                                                // 736
     * Backout easing                                                                                                  // 737
     - n (number) input 0..1                                                                                           // 738
     = (number) output 0..1                                                                                            // 739
    \*/                                                                                                                // 740
    mina.backout = function (n) {                                                                                      // 741
        if (n == 0) {                                                                                                  // 742
            return 0;                                                                                                  // 743
        }                                                                                                              // 744
        n = n - 1;                                                                                                     // 745
        var s = 1.70158;                                                                                               // 746
        return n * n * ((s + 1) * n + s) + 1;                                                                          // 747
    };                                                                                                                 // 748
    /*\
     * mina.elastic                                                                                                    // 750
     [ method ]                                                                                                        // 751
     **                                                                                                                // 752
     * Elastic easing                                                                                                  // 753
     - n (number) input 0..1                                                                                           // 754
     = (number) output 0..1                                                                                            // 755
    \*/                                                                                                                // 756
    mina.elastic = function (n) {                                                                                      // 757
        if (n == !!n) {                                                                                                // 758
            return n;                                                                                                  // 759
        }                                                                                                              // 760
        return Math.pow(2, -10 * n) * Math.sin((n - .075) *                                                            // 761
            (2 * Math.PI) / .3) + 1;                                                                                   // 762
    };                                                                                                                 // 763
    /*\
     * mina.bounce                                                                                                     // 765
     [ method ]                                                                                                        // 766
     **                                                                                                                // 767
     * Bounce easing                                                                                                   // 768
     - n (number) input 0..1                                                                                           // 769
     = (number) output 0..1                                                                                            // 770
    \*/                                                                                                                // 771
    mina.bounce = function (n) {                                                                                       // 772
        var s = 7.5625,                                                                                                // 773
            p = 2.75,                                                                                                  // 774
            l;                                                                                                         // 775
        if (n < (1 / p)) {                                                                                             // 776
            l = s * n * n;                                                                                             // 777
        } else {                                                                                                       // 778
            if (n < (2 / p)) {                                                                                         // 779
                n -= (1.5 / p);                                                                                        // 780
                l = s * n * n + .75;                                                                                   // 781
            } else {                                                                                                   // 782
                if (n < (2.5 / p)) {                                                                                   // 783
                    n -= (2.25 / p);                                                                                   // 784
                    l = s * n * n + .9375;                                                                             // 785
                } else {                                                                                               // 786
                    n -= (2.625 / p);                                                                                  // 787
                    l = s * n * n + .984375;                                                                           // 788
                }                                                                                                      // 789
            }                                                                                                          // 790
        }                                                                                                              // 791
        return l;                                                                                                      // 792
    };                                                                                                                 // 793
    window.mina = mina;                                                                                                // 794
    return mina;                                                                                                       // 795
})(typeof eve == "undefined" ? function () {} : eve);                                                                  // 796
// Copyright (c) 2013 - 2015 Adobe Systems Incorporated. All rights reserved.                                          // 797
//                                                                                                                     // 798
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 799
// you may not use this file except in compliance with the License.                                                    // 800
// You may obtain a copy of the License at                                                                             // 801
//                                                                                                                     // 802
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 803
//                                                                                                                     // 804
// Unless required by applicable law or agreed to in writing, software                                                 // 805
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 806
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 807
// See the License for the specific language governing permissions and                                                 // 808
// limitations under the License.                                                                                      // 809
                                                                                                                       // 810
var Snap = (function(root) {                                                                                           // 811
Snap.version = "0.4.0";                                                                                                // 812
/*\
 * Snap                                                                                                                // 814
 [ method ]                                                                                                            // 815
 **                                                                                                                    // 816
 * Creates a drawing surface or wraps existing SVG element.                                                            // 817
 **                                                                                                                    // 818
 - width (number|string) width of surface                                                                              // 819
 - height (number|string) height of surface                                                                            // 820
 * or                                                                                                                  // 821
 - DOM (SVGElement) element to be wrapped into Snap structure                                                          // 822
 * or                                                                                                                  // 823
 - array (array) array of elements (will return set of elements)                                                       // 824
 * or                                                                                                                  // 825
 - query (string) CSS query selector                                                                                   // 826
 = (object) @Element                                                                                                   // 827
\*/                                                                                                                    // 828
function Snap(w, h) {                                                                                                  // 829
    if (w) {                                                                                                           // 830
        if (w.nodeType) {                                                                                              // 831
            return wrap(w);                                                                                            // 832
        }                                                                                                              // 833
        if (is(w, "array") && Snap.set) {                                                                              // 834
            return Snap.set.apply(Snap, w);                                                                            // 835
        }                                                                                                              // 836
        if (w instanceof Element) {                                                                                    // 837
            return w;                                                                                                  // 838
        }                                                                                                              // 839
        if (h == null) {                                                                                               // 840
            w = glob.doc.querySelector(String(w));                                                                     // 841
            return wrap(w);                                                                                            // 842
        }                                                                                                              // 843
    }                                                                                                                  // 844
    w = w == null ? "100%" : w;                                                                                        // 845
    h = h == null ? "100%" : h;                                                                                        // 846
    return new Paper(w, h);                                                                                            // 847
}                                                                                                                      // 848
Snap.toString = function () {                                                                                          // 849
    return "Snap v" + this.version;                                                                                    // 850
};                                                                                                                     // 851
Snap._ = {};                                                                                                           // 852
var glob = {                                                                                                           // 853
    win: root.window,                                                                                                  // 854
    doc: root.window.document                                                                                          // 855
};                                                                                                                     // 856
Snap._.glob = glob;                                                                                                    // 857
var has = "hasOwnProperty",                                                                                            // 858
    Str = String,                                                                                                      // 859
    toFloat = parseFloat,                                                                                              // 860
    toInt = parseInt,                                                                                                  // 861
    math = Math,                                                                                                       // 862
    mmax = math.max,                                                                                                   // 863
    mmin = math.min,                                                                                                   // 864
    abs = math.abs,                                                                                                    // 865
    pow = math.pow,                                                                                                    // 866
    PI = math.PI,                                                                                                      // 867
    round = math.round,                                                                                                // 868
    E = "",                                                                                                            // 869
    S = " ",                                                                                                           // 870
    objectToString = Object.prototype.toString,                                                                        // 871
    ISURL = /^url\(['"]?([^\)]+?)['"]?\)$/i,                                                                           // 872
    colourRegExp = /^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\))\s*$/i,
    bezierrg = /^(?:cubic-)?bezier\(([^,]+),([^,]+),([^,]+),([^\)]+)\)/,                                               // 874
    reURLValue = /^url\(#?([^)]+)\)$/,                                                                                 // 875
    separator = Snap._.separator = /[,\s]+/,                                                                           // 876
    whitespace = /[\s]/g,                                                                                              // 877
    commaSpaces = /[\s]*,[\s]*/,                                                                                       // 878
    hsrg = {hs: 1, rg: 1},                                                                                             // 879
    pathCommand = /([a-z])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/ig,                                        // 880
    tCommand = /([rstm])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/ig,                                          // 881
    pathValues = /(-?\d*\.?\d*(?:e[\-+]?\\d+)?)[\s]*,?[\s]*/ig,                                                        // 882
    idgen = 0,                                                                                                         // 883
    idprefix = "S" + (+new Date).toString(36),                                                                         // 884
    ID = function (el) {                                                                                               // 885
        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);                                      // 886
    },                                                                                                                 // 887
    xlink = "http://www.w3.org/1999/xlink",                                                                            // 888
    xmlns = "http://www.w3.org/2000/svg",                                                                              // 889
    hub = {},                                                                                                          // 890
    URL = Snap.url = function (url) {                                                                                  // 891
        return "url('#" + url + "')";                                                                                  // 892
    };                                                                                                                 // 893
                                                                                                                       // 894
function $(el, attr) {                                                                                                 // 895
    if (attr) {                                                                                                        // 896
        if (el == "#text") {                                                                                           // 897
            el = glob.doc.createTextNode(attr.text || attr["#text"] || "");                                            // 898
        }                                                                                                              // 899
        if (el == "#comment") {                                                                                        // 900
            el = glob.doc.createComment(attr.text || attr["#text"] || "");                                             // 901
        }                                                                                                              // 902
        if (typeof el == "string") {                                                                                   // 903
            el = $(el);                                                                                                // 904
        }                                                                                                              // 905
        if (typeof attr == "string") {                                                                                 // 906
            if (el.nodeType == 1) {                                                                                    // 907
                if (attr.substring(0, 6) == "xlink:") {                                                                // 908
                    return el.getAttributeNS(xlink, attr.substring(6));                                                // 909
                }                                                                                                      // 910
                if (attr.substring(0, 4) == "xml:") {                                                                  // 911
                    return el.getAttributeNS(xmlns, attr.substring(4));                                                // 912
                }                                                                                                      // 913
                return el.getAttribute(attr);                                                                          // 914
            } else if (attr == "text") {                                                                               // 915
                return el.nodeValue;                                                                                   // 916
            } else {                                                                                                   // 917
                return null;                                                                                           // 918
            }                                                                                                          // 919
        }                                                                                                              // 920
        if (el.nodeType == 1) {                                                                                        // 921
            for (var key in attr) if (attr[has](key)) {                                                                // 922
                var val = Str(attr[key]);                                                                              // 923
                if (val) {                                                                                             // 924
                    if (key.substring(0, 6) == "xlink:") {                                                             // 925
                        el.setAttributeNS(xlink, key.substring(6), val);                                               // 926
                    } else if (key.substring(0, 4) == "xml:") {                                                        // 927
                        el.setAttributeNS(xmlns, key.substring(4), val);                                               // 928
                    } else {                                                                                           // 929
                        el.setAttribute(key, val);                                                                     // 930
                    }                                                                                                  // 931
                } else {                                                                                               // 932
                    el.removeAttribute(key);                                                                           // 933
                }                                                                                                      // 934
            }                                                                                                          // 935
        } else if ("text" in attr) {                                                                                   // 936
            el.nodeValue = attr.text;                                                                                  // 937
        }                                                                                                              // 938
    } else {                                                                                                           // 939
        el = glob.doc.createElementNS(xmlns, el);                                                                      // 940
    }                                                                                                                  // 941
    return el;                                                                                                         // 942
}                                                                                                                      // 943
Snap._.$ = $;                                                                                                          // 944
Snap._.id = ID;                                                                                                        // 945
function getAttrs(el) {                                                                                                // 946
    var attrs = el.attributes,                                                                                         // 947
        name,                                                                                                          // 948
        out = {};                                                                                                      // 949
    for (var i = 0; i < attrs.length; i++) {                                                                           // 950
        if (attrs[i].namespaceURI == xlink) {                                                                          // 951
            name = "xlink:";                                                                                           // 952
        } else {                                                                                                       // 953
            name = "";                                                                                                 // 954
        }                                                                                                              // 955
        name += attrs[i].name;                                                                                         // 956
        out[name] = attrs[i].textContent;                                                                              // 957
    }                                                                                                                  // 958
    return out;                                                                                                        // 959
}                                                                                                                      // 960
function is(o, type) {                                                                                                 // 961
    type = Str.prototype.toLowerCase.call(type);                                                                       // 962
    if (type == "finite") {                                                                                            // 963
        return isFinite(o);                                                                                            // 964
    }                                                                                                                  // 965
    if (type == "array" &&                                                                                             // 966
        (o instanceof Array || Array.isArray && Array.isArray(o))) {                                                   // 967
        return true;                                                                                                   // 968
    }                                                                                                                  // 969
    return  (type == "null" && o === null) ||                                                                          // 970
            (type == typeof o && o !== null) ||                                                                        // 971
            (type == "object" && o === Object(o)) ||                                                                   // 972
            objectToString.call(o).slice(8, -1).toLowerCase() == type;                                                 // 973
}                                                                                                                      // 974
/*\
 * Snap.format                                                                                                         // 976
 [ method ]                                                                                                            // 977
 **                                                                                                                    // 978
 * Replaces construction of type `{<name>}` to the corresponding argument                                              // 979
 **                                                                                                                    // 980
 - token (string) string to format                                                                                     // 981
 - json (object) object which properties are used as a replacement                                                     // 982
 = (string) formatted string                                                                                           // 983
 > Usage                                                                                                               // 984
 | // this draws a rectangular shape equivalent to "M10,20h40v50h-40z"                                                 // 985
 | paper.path(Snap.format("M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z", {                              // 986
 |     x: 10,                                                                                                          // 987
 |     y: 20,                                                                                                          // 988
 |     dim: {                                                                                                          // 989
 |         width: 40,                                                                                                  // 990
 |         height: 50,                                                                                                 // 991
 |         "negative width": -40                                                                                       // 992
 |     }                                                                                                               // 993
 | }));                                                                                                                // 994
\*/                                                                                                                    // 995
Snap.format = (function () {                                                                                           // 996
    var tokenRegex = /\{([^\}]+)\}/g,                                                                                  // 997
        objNotationRegex = /(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g, // matches .xxxxx or ["xxxxx"] to run over object properties
        replacer = function (all, key, obj) {                                                                          // 999
            var res = obj;                                                                                             // 1000
            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {                            // 1001
                name = name || quotedName;                                                                             // 1002
                if (res) {                                                                                             // 1003
                    if (name in res) {                                                                                 // 1004
                        res = res[name];                                                                               // 1005
                    }                                                                                                  // 1006
                    typeof res == "function" && isFunc && (res = res());                                               // 1007
                }                                                                                                      // 1008
            });                                                                                                        // 1009
            res = (res == null || res == obj ? all : res) + "";                                                        // 1010
            return res;                                                                                                // 1011
        };                                                                                                             // 1012
    return function (str, obj) {                                                                                       // 1013
        return Str(str).replace(tokenRegex, function (all, key) {                                                      // 1014
            return replacer(all, key, obj);                                                                            // 1015
        });                                                                                                            // 1016
    };                                                                                                                 // 1017
})();                                                                                                                  // 1018
function clone(obj) {                                                                                                  // 1019
    if (typeof obj == "function" || Object(obj) !== obj) {                                                             // 1020
        return obj;                                                                                                    // 1021
    }                                                                                                                  // 1022
    var res = new obj.constructor;                                                                                     // 1023
    for (var key in obj) if (obj[has](key)) {                                                                          // 1024
        res[key] = clone(obj[key]);                                                                                    // 1025
    }                                                                                                                  // 1026
    return res;                                                                                                        // 1027
}                                                                                                                      // 1028
Snap._.clone = clone;                                                                                                  // 1029
function repush(array, item) {                                                                                         // 1030
    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {                                           // 1031
        return array.push(array.splice(i, 1)[0]);                                                                      // 1032
    }                                                                                                                  // 1033
}                                                                                                                      // 1034
function cacher(f, scope, postprocessor) {                                                                             // 1035
    function newf() {                                                                                                  // 1036
        var arg = Array.prototype.slice.call(arguments, 0),                                                            // 1037
            args = arg.join("\u2400"),                                                                                 // 1038
            cache = newf.cache = newf.cache || {},                                                                     // 1039
            count = newf.count = newf.count || [];                                                                     // 1040
        if (cache[has](args)) {                                                                                        // 1041
            repush(count, args);                                                                                       // 1042
            return postprocessor ? postprocessor(cache[args]) : cache[args];                                           // 1043
        }                                                                                                              // 1044
        count.length >= 1e3 && delete cache[count.shift()];                                                            // 1045
        count.push(args);                                                                                              // 1046
        cache[args] = f.apply(scope, arg);                                                                             // 1047
        return postprocessor ? postprocessor(cache[args]) : cache[args];                                               // 1048
    }                                                                                                                  // 1049
    return newf;                                                                                                       // 1050
}                                                                                                                      // 1051
Snap._.cacher = cacher;                                                                                                // 1052
function angle(x1, y1, x2, y2, x3, y3) {                                                                               // 1053
    if (x3 == null) {                                                                                                  // 1054
        var x = x1 - x2,                                                                                               // 1055
            y = y1 - y2;                                                                                               // 1056
        if (!x && !y) {                                                                                                // 1057
            return 0;                                                                                                  // 1058
        }                                                                                                              // 1059
        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;                                                      // 1060
    } else {                                                                                                           // 1061
        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);                                                          // 1062
    }                                                                                                                  // 1063
}                                                                                                                      // 1064
function rad(deg) {                                                                                                    // 1065
    return deg % 360 * PI / 180;                                                                                       // 1066
}                                                                                                                      // 1067
function deg(rad) {                                                                                                    // 1068
    return rad * 180 / PI % 360;                                                                                       // 1069
}                                                                                                                      // 1070
function x_y() {                                                                                                       // 1071
    return this.x + S + this.y;                                                                                        // 1072
}                                                                                                                      // 1073
function x_y_w_h() {                                                                                                   // 1074
    return this.x + S + this.y + S + this.width + " \xd7 " + this.height;                                              // 1075
}                                                                                                                      // 1076
                                                                                                                       // 1077
/*\
 * Snap.rad                                                                                                            // 1079
 [ method ]                                                                                                            // 1080
 **                                                                                                                    // 1081
 * Transform angle to radians                                                                                          // 1082
 - deg (number) angle in degrees                                                                                       // 1083
 = (number) angle in radians                                                                                           // 1084
\*/                                                                                                                    // 1085
Snap.rad = rad;                                                                                                        // 1086
/*\
 * Snap.deg                                                                                                            // 1088
 [ method ]                                                                                                            // 1089
 **                                                                                                                    // 1090
 * Transform angle to degrees                                                                                          // 1091
 - rad (number) angle in radians                                                                                       // 1092
 = (number) angle in degrees                                                                                           // 1093
\*/                                                                                                                    // 1094
Snap.deg = deg;                                                                                                        // 1095
/*\
 * Snap.sin                                                                                                            // 1097
 [ method ]                                                                                                            // 1098
 **                                                                                                                    // 1099
 * Equivalent to `Math.sin()` only works with degrees, not radians.                                                    // 1100
 - angle (number) angle in degrees                                                                                     // 1101
 = (number) sin                                                                                                        // 1102
\*/                                                                                                                    // 1103
Snap.sin = function (angle) {                                                                                          // 1104
    return math.sin(Snap.rad(angle));                                                                                  // 1105
};                                                                                                                     // 1106
/*\
 * Snap.tan                                                                                                            // 1108
 [ method ]                                                                                                            // 1109
 **                                                                                                                    // 1110
 * Equivalent to `Math.tan()` only works with degrees, not radians.                                                    // 1111
 - angle (number) angle in degrees                                                                                     // 1112
 = (number) tan                                                                                                        // 1113
\*/                                                                                                                    // 1114
Snap.tan = function (angle) {                                                                                          // 1115
    return math.tan(Snap.rad(angle));                                                                                  // 1116
};                                                                                                                     // 1117
/*\
 * Snap.cos                                                                                                            // 1119
 [ method ]                                                                                                            // 1120
 **                                                                                                                    // 1121
 * Equivalent to `Math.cos()` only works with degrees, not radians.                                                    // 1122
 - angle (number) angle in degrees                                                                                     // 1123
 = (number) cos                                                                                                        // 1124
\*/                                                                                                                    // 1125
Snap.cos = function (angle) {                                                                                          // 1126
    return math.cos(Snap.rad(angle));                                                                                  // 1127
};                                                                                                                     // 1128
/*\
 * Snap.asin                                                                                                           // 1130
 [ method ]                                                                                                            // 1131
 **                                                                                                                    // 1132
 * Equivalent to `Math.asin()` only works with degrees, not radians.                                                   // 1133
 - num (number) value                                                                                                  // 1134
 = (number) asin in degrees                                                                                            // 1135
\*/                                                                                                                    // 1136
Snap.asin = function (num) {                                                                                           // 1137
    return Snap.deg(math.asin(num));                                                                                   // 1138
};                                                                                                                     // 1139
/*\
 * Snap.acos                                                                                                           // 1141
 [ method ]                                                                                                            // 1142
 **                                                                                                                    // 1143
 * Equivalent to `Math.acos()` only works with degrees, not radians.                                                   // 1144
 - num (number) value                                                                                                  // 1145
 = (number) acos in degrees                                                                                            // 1146
\*/                                                                                                                    // 1147
Snap.acos = function (num) {                                                                                           // 1148
    return Snap.deg(math.acos(num));                                                                                   // 1149
};                                                                                                                     // 1150
/*\
 * Snap.atan                                                                                                           // 1152
 [ method ]                                                                                                            // 1153
 **                                                                                                                    // 1154
 * Equivalent to `Math.atan()` only works with degrees, not radians.                                                   // 1155
 - num (number) value                                                                                                  // 1156
 = (number) atan in degrees                                                                                            // 1157
\*/                                                                                                                    // 1158
Snap.atan = function (num) {                                                                                           // 1159
    return Snap.deg(math.atan(num));                                                                                   // 1160
};                                                                                                                     // 1161
/*\
 * Snap.atan2                                                                                                          // 1163
 [ method ]                                                                                                            // 1164
 **                                                                                                                    // 1165
 * Equivalent to `Math.atan2()` only works with degrees, not radians.                                                  // 1166
 - num (number) value                                                                                                  // 1167
 = (number) atan2 in degrees                                                                                           // 1168
\*/                                                                                                                    // 1169
Snap.atan2 = function (num) {                                                                                          // 1170
    return Snap.deg(math.atan2(num));                                                                                  // 1171
};                                                                                                                     // 1172
/*\
 * Snap.angle                                                                                                          // 1174
 [ method ]                                                                                                            // 1175
 **                                                                                                                    // 1176
 * Returns an angle between two or three points                                                                        // 1177
 > Parameters                                                                                                          // 1178
 - x1 (number) x coord of first point                                                                                  // 1179
 - y1 (number) y coord of first point                                                                                  // 1180
 - x2 (number) x coord of second point                                                                                 // 1181
 - y2 (number) y coord of second point                                                                                 // 1182
 - x3 (number) #optional x coord of third point                                                                        // 1183
 - y3 (number) #optional y coord of third point                                                                        // 1184
 = (number) angle in degrees                                                                                           // 1185
\*/                                                                                                                    // 1186
Snap.angle = angle;                                                                                                    // 1187
/*\
 * Snap.len                                                                                                            // 1189
 [ method ]                                                                                                            // 1190
 **                                                                                                                    // 1191
 * Returns distance between two points                                                                                 // 1192
 > Parameters                                                                                                          // 1193
 - x1 (number) x coord of first point                                                                                  // 1194
 - y1 (number) y coord of first point                                                                                  // 1195
 - x2 (number) x coord of second point                                                                                 // 1196
 - y2 (number) y coord of second point                                                                                 // 1197
 = (number) distance                                                                                                   // 1198
\*/                                                                                                                    // 1199
Snap.len = function (x1, y1, x2, y2) {                                                                                 // 1200
    return Math.sqrt(Snap.len2(x1, y1, x2, y2));                                                                       // 1201
};                                                                                                                     // 1202
/*\
 * Snap.len2                                                                                                           // 1204
 [ method ]                                                                                                            // 1205
 **                                                                                                                    // 1206
 * Returns squared distance between two points                                                                         // 1207
 > Parameters                                                                                                          // 1208
 - x1 (number) x coord of first point                                                                                  // 1209
 - y1 (number) y coord of first point                                                                                  // 1210
 - x2 (number) x coord of second point                                                                                 // 1211
 - y2 (number) y coord of second point                                                                                 // 1212
 = (number) distance                                                                                                   // 1213
\*/                                                                                                                    // 1214
Snap.len2 = function (x1, y1, x2, y2) {                                                                                // 1215
    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);                                                              // 1216
};                                                                                                                     // 1217
/*\
 * Snap.closestPoint                                                                                                   // 1219
 [ method ]                                                                                                            // 1220
 **                                                                                                                    // 1221
 * Returns closest point to a given one on a given path.                                                               // 1222
 > Parameters                                                                                                          // 1223
 - path (Element) path element                                                                                         // 1224
 - x (number) x coord of a point                                                                                       // 1225
 - y (number) y coord of a point                                                                                       // 1226
 = (object) in format                                                                                                  // 1227
 {                                                                                                                     // 1228
    x (number) x coord of the point on the path                                                                        // 1229
    y (number) y coord of the point on the path                                                                        // 1230
    length (number) length of the path to the point                                                                    // 1231
    distance (number) distance from the given point to the path                                                        // 1232
 }                                                                                                                     // 1233
\*/                                                                                                                    // 1234
// Copied from http://bl.ocks.org/mbostock/8027637                                                                     // 1235
Snap.closestPoint = function (path, x, y) {                                                                            // 1236
    function distance2(p) {                                                                                            // 1237
        var dx = p.x - x,                                                                                              // 1238
            dy = p.y - y;                                                                                              // 1239
        return dx * dx + dy * dy;                                                                                      // 1240
    }                                                                                                                  // 1241
    var pathNode = path.node,                                                                                          // 1242
        pathLength = pathNode.getTotalLength(),                                                                        // 1243
        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,                                            // 1244
        best,                                                                                                          // 1245
        bestLength,                                                                                                    // 1246
        bestDistance = Infinity;                                                                                       // 1247
                                                                                                                       // 1248
    // linear scan for coarse approximation                                                                            // 1249
    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {                  // 1250
        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {                 // 1251
            best = scan, bestLength = scanLength, bestDistance = scanDistance;                                         // 1252
        }                                                                                                              // 1253
    }                                                                                                                  // 1254
                                                                                                                       // 1255
    // binary search for precise estimate                                                                              // 1256
    precision *= .5;                                                                                                   // 1257
    while (precision > .5) {                                                                                           // 1258
        var before,                                                                                                    // 1259
            after,                                                                                                     // 1260
            beforeLength,                                                                                              // 1261
            afterLength,                                                                                               // 1262
            beforeDistance,                                                                                            // 1263
            afterDistance;                                                                                             // 1264
        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {
            best = before, bestLength = beforeLength, bestDistance = beforeDistance;                                   // 1266
        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {
            best = after, bestLength = afterLength, bestDistance = afterDistance;                                      // 1268
        } else {                                                                                                       // 1269
            precision *= .5;                                                                                           // 1270
        }                                                                                                              // 1271
    }                                                                                                                  // 1272
                                                                                                                       // 1273
    best = {                                                                                                           // 1274
        x: best.x,                                                                                                     // 1275
        y: best.y,                                                                                                     // 1276
        length: bestLength,                                                                                            // 1277
        distance: Math.sqrt(bestDistance)                                                                              // 1278
    };                                                                                                                 // 1279
    return best;                                                                                                       // 1280
}                                                                                                                      // 1281
/*\
 * Snap.is                                                                                                             // 1283
 [ method ]                                                                                                            // 1284
 **                                                                                                                    // 1285
 * Handy replacement for the `typeof` operator                                                                         // 1286
 - o (…) any object or primitive                                                                                       // 1287
 - type (string) name of the type, e.g., `string`, `function`, `number`, etc.                                          // 1288
 = (boolean) `true` if given value is of given type                                                                    // 1289
\*/                                                                                                                    // 1290
Snap.is = is;                                                                                                          // 1291
/*\
 * Snap.snapTo                                                                                                         // 1293
 [ method ]                                                                                                            // 1294
 **                                                                                                                    // 1295
 * Snaps given value to given grid                                                                                     // 1296
 - values (array|number) given array of values or step of the grid                                                     // 1297
 - value (number) value to adjust                                                                                      // 1298
 - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.     // 1299
 = (number) adjusted value                                                                                             // 1300
\*/                                                                                                                    // 1301
Snap.snapTo = function (values, value, tolerance) {                                                                    // 1302
    tolerance = is(tolerance, "finite") ? tolerance : 10;                                                              // 1303
    if (is(values, "array")) {                                                                                         // 1304
        var i = values.length;                                                                                         // 1305
        while (i--) if (abs(values[i] - value) <= tolerance) {                                                         // 1306
            return values[i];                                                                                          // 1307
        }                                                                                                              // 1308
    } else {                                                                                                           // 1309
        values = +values;                                                                                              // 1310
        var rem = value % values;                                                                                      // 1311
        if (rem < tolerance) {                                                                                         // 1312
            return value - rem;                                                                                        // 1313
        }                                                                                                              // 1314
        if (rem > values - tolerance) {                                                                                // 1315
            return value - rem + values;                                                                               // 1316
        }                                                                                                              // 1317
    }                                                                                                                  // 1318
    return value;                                                                                                      // 1319
};                                                                                                                     // 1320
// Colour                                                                                                              // 1321
/*\
 * Snap.getRGB                                                                                                         // 1323
 [ method ]                                                                                                            // 1324
 **                                                                                                                    // 1325
 * Parses color string as RGB object                                                                                   // 1326
 - color (string) color string in one of the following formats:                                                        // 1327
 # <ul>                                                                                                                // 1328
 #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>                    // 1329
 #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>                              // 1330
 #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>                         // 1331
 #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>    // 1332
 #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>                                                           // 1333
 #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>          // 1334
 #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>                                                       // 1335
 #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li> // 1336
 #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>                                                           // 1337
 #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>                                                        // 1338
 #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>                                                       // 1339
 #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>
 #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>                                                           // 1341
 #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>                                                        // 1342
 #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>                                                       // 1343
 # </ul>                                                                                                               // 1344
 * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.                                                           // 1345
 = (object) RGB object in the following format:                                                                        // 1346
 o {                                                                                                                   // 1347
 o     r (number) red,                                                                                                 // 1348
 o     g (number) green,                                                                                               // 1349
 o     b (number) blue,                                                                                                // 1350
 o     hex (string) color in HTML/CSS format: #••••••,                                                                 // 1351
 o     error (boolean) true if string can't be parsed                                                                  // 1352
 o }                                                                                                                   // 1353
\*/                                                                                                                    // 1354
Snap.getRGB = cacher(function (colour) {                                                                               // 1355
    if (!colour || !!((colour = Str(colour)).indexOf("-") + 1)) {                                                      // 1356
        return {r: -1, g: -1, b: -1, hex: "none", error: 1, toString: rgbtoString};                                    // 1357
    }                                                                                                                  // 1358
    if (colour == "none") {                                                                                            // 1359
        return {r: -1, g: -1, b: -1, hex: "none", toString: rgbtoString};                                              // 1360
    }                                                                                                                  // 1361
    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == "#") && (colour = toHex(colour));          // 1362
    if (!colour) {                                                                                                     // 1363
        return {r: -1, g: -1, b: -1, hex: "none", error: 1, toString: rgbtoString};                                    // 1364
    }                                                                                                                  // 1365
    var res,                                                                                                           // 1366
        red,                                                                                                           // 1367
        green,                                                                                                         // 1368
        blue,                                                                                                          // 1369
        opacity,                                                                                                       // 1370
        t,                                                                                                             // 1371
        values,                                                                                                        // 1372
        rgb = colour.match(colourRegExp);                                                                              // 1373
    if (rgb) {                                                                                                         // 1374
        if (rgb[2]) {                                                                                                  // 1375
            blue = toInt(rgb[2].substring(5), 16);                                                                     // 1376
            green = toInt(rgb[2].substring(3, 5), 16);                                                                 // 1377
            red = toInt(rgb[2].substring(1, 3), 16);                                                                   // 1378
        }                                                                                                              // 1379
        if (rgb[3]) {                                                                                                  // 1380
            blue = toInt((t = rgb[3].charAt(3)) + t, 16);                                                              // 1381
            green = toInt((t = rgb[3].charAt(2)) + t, 16);                                                             // 1382
            red = toInt((t = rgb[3].charAt(1)) + t, 16);                                                               // 1383
        }                                                                                                              // 1384
        if (rgb[4]) {                                                                                                  // 1385
            values = rgb[4].split(commaSpaces);                                                                        // 1386
            red = toFloat(values[0]);                                                                                  // 1387
            values[0].slice(-1) == "%" && (red *= 2.55);                                                               // 1388
            green = toFloat(values[1]);                                                                                // 1389
            values[1].slice(-1) == "%" && (green *= 2.55);                                                             // 1390
            blue = toFloat(values[2]);                                                                                 // 1391
            values[2].slice(-1) == "%" && (blue *= 2.55);                                                              // 1392
            rgb[1].toLowerCase().slice(0, 4) == "rgba" && (opacity = toFloat(values[3]));                              // 1393
            values[3] && values[3].slice(-1) == "%" && (opacity /= 100);                                               // 1394
        }                                                                                                              // 1395
        if (rgb[5]) {                                                                                                  // 1396
            values = rgb[5].split(commaSpaces);                                                                        // 1397
            red = toFloat(values[0]);                                                                                  // 1398
            values[0].slice(-1) == "%" && (red /= 100);                                                                // 1399
            green = toFloat(values[1]);                                                                                // 1400
            values[1].slice(-1) == "%" && (green /= 100);                                                              // 1401
            blue = toFloat(values[2]);                                                                                 // 1402
            values[2].slice(-1) == "%" && (blue /= 100);                                                               // 1403
            (values[0].slice(-3) == "deg" || values[0].slice(-1) == "\xb0") && (red /= 360);                           // 1404
            rgb[1].toLowerCase().slice(0, 4) == "hsba" && (opacity = toFloat(values[3]));                              // 1405
            values[3] && values[3].slice(-1) == "%" && (opacity /= 100);                                               // 1406
            return Snap.hsb2rgb(red, green, blue, opacity);                                                            // 1407
        }                                                                                                              // 1408
        if (rgb[6]) {                                                                                                  // 1409
            values = rgb[6].split(commaSpaces);                                                                        // 1410
            red = toFloat(values[0]);                                                                                  // 1411
            values[0].slice(-1) == "%" && (red /= 100);                                                                // 1412
            green = toFloat(values[1]);                                                                                // 1413
            values[1].slice(-1) == "%" && (green /= 100);                                                              // 1414
            blue = toFloat(values[2]);                                                                                 // 1415
            values[2].slice(-1) == "%" && (blue /= 100);                                                               // 1416
            (values[0].slice(-3) == "deg" || values[0].slice(-1) == "\xb0") && (red /= 360);                           // 1417
            rgb[1].toLowerCase().slice(0, 4) == "hsla" && (opacity = toFloat(values[3]));                              // 1418
            values[3] && values[3].slice(-1) == "%" && (opacity /= 100);                                               // 1419
            return Snap.hsl2rgb(red, green, blue, opacity);                                                            // 1420
        }                                                                                                              // 1421
        red = mmin(math.round(red), 255);                                                                              // 1422
        green = mmin(math.round(green), 255);                                                                          // 1423
        blue = mmin(math.round(blue), 255);                                                                            // 1424
        opacity = mmin(mmax(opacity, 0), 1);                                                                           // 1425
        rgb = {r: red, g: green, b: blue, toString: rgbtoString};                                                      // 1426
        rgb.hex = "#" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);                          // 1427
        rgb.opacity = is(opacity, "finite") ? opacity : 1;                                                             // 1428
        return rgb;                                                                                                    // 1429
    }                                                                                                                  // 1430
    return {r: -1, g: -1, b: -1, hex: "none", error: 1, toString: rgbtoString};                                        // 1431
}, Snap);                                                                                                              // 1432
/*\
 * Snap.hsb                                                                                                            // 1434
 [ method ]                                                                                                            // 1435
 **                                                                                                                    // 1436
 * Converts HSB values to a hex representation of the color                                                            // 1437
 - h (number) hue                                                                                                      // 1438
 - s (number) saturation                                                                                               // 1439
 - b (number) value or brightness                                                                                      // 1440
 = (string) hex representation of the color                                                                            // 1441
\*/                                                                                                                    // 1442
Snap.hsb = cacher(function (h, s, b) {                                                                                 // 1443
    return Snap.hsb2rgb(h, s, b).hex;                                                                                  // 1444
});                                                                                                                    // 1445
/*\
 * Snap.hsl                                                                                                            // 1447
 [ method ]                                                                                                            // 1448
 **                                                                                                                    // 1449
 * Converts HSL values to a hex representation of the color                                                            // 1450
 - h (number) hue                                                                                                      // 1451
 - s (number) saturation                                                                                               // 1452
 - l (number) luminosity                                                                                               // 1453
 = (string) hex representation of the color                                                                            // 1454
\*/                                                                                                                    // 1455
Snap.hsl = cacher(function (h, s, l) {                                                                                 // 1456
    return Snap.hsl2rgb(h, s, l).hex;                                                                                  // 1457
});                                                                                                                    // 1458
/*\
 * Snap.rgb                                                                                                            // 1460
 [ method ]                                                                                                            // 1461
 **                                                                                                                    // 1462
 * Converts RGB values to a hex representation of the color                                                            // 1463
 - r (number) red                                                                                                      // 1464
 - g (number) green                                                                                                    // 1465
 - b (number) blue                                                                                                     // 1466
 = (string) hex representation of the color                                                                            // 1467
\*/                                                                                                                    // 1468
Snap.rgb = cacher(function (r, g, b, o) {                                                                              // 1469
    if (is(o, "finite")) {                                                                                             // 1470
        var round = math.round;                                                                                        // 1471
        return "rgba(" + [round(r), round(g), round(b), +o.toFixed(2)] + ")";                                          // 1472
    }                                                                                                                  // 1473
    return "#" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);                                          // 1474
});                                                                                                                    // 1475
var toHex = function (color) {                                                                                         // 1476
    var i = glob.doc.getElementsByTagName("head")[0] || glob.doc.getElementsByTagName("svg")[0],                       // 1477
        red = "rgb(255, 0, 0)";                                                                                        // 1478
    toHex = cacher(function (color) {                                                                                  // 1479
        if (color.toLowerCase() == "red") {                                                                            // 1480
            return red;                                                                                                // 1481
        }                                                                                                              // 1482
        i.style.color = red;                                                                                           // 1483
        i.style.color = color;                                                                                         // 1484
        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue("color");                               // 1485
        return out == red ? null : out;                                                                                // 1486
    });                                                                                                                // 1487
    return toHex(color);                                                                                               // 1488
},                                                                                                                     // 1489
hsbtoString = function () {                                                                                            // 1490
    return "hsb(" + [this.h, this.s, this.b] + ")";                                                                    // 1491
},                                                                                                                     // 1492
hsltoString = function () {                                                                                            // 1493
    return "hsl(" + [this.h, this.s, this.l] + ")";                                                                    // 1494
},                                                                                                                     // 1495
rgbtoString = function () {                                                                                            // 1496
    return this.opacity == 1 || this.opacity == null ?                                                                 // 1497
            this.hex :                                                                                                 // 1498
            "rgba(" + [this.r, this.g, this.b, this.opacity] + ")";                                                    // 1499
},                                                                                                                     // 1500
prepareRGB = function (r, g, b) {                                                                                      // 1501
    if (g == null && is(r, "object") && "r" in r && "g" in r && "b" in r) {                                            // 1502
        b = r.b;                                                                                                       // 1503
        g = r.g;                                                                                                       // 1504
        r = r.r;                                                                                                       // 1505
    }                                                                                                                  // 1506
    if (g == null && is(r, string)) {                                                                                  // 1507
        var clr = Snap.getRGB(r);                                                                                      // 1508
        r = clr.r;                                                                                                     // 1509
        g = clr.g;                                                                                                     // 1510
        b = clr.b;                                                                                                     // 1511
    }                                                                                                                  // 1512
    if (r > 1 || g > 1 || b > 1) {                                                                                     // 1513
        r /= 255;                                                                                                      // 1514
        g /= 255;                                                                                                      // 1515
        b /= 255;                                                                                                      // 1516
    }                                                                                                                  // 1517
                                                                                                                       // 1518
    return [r, g, b];                                                                                                  // 1519
},                                                                                                                     // 1520
packageRGB = function (r, g, b, o) {                                                                                   // 1521
    r = math.round(r * 255);                                                                                           // 1522
    g = math.round(g * 255);                                                                                           // 1523
    b = math.round(b * 255);                                                                                           // 1524
    var rgb = {                                                                                                        // 1525
        r: r,                                                                                                          // 1526
        g: g,                                                                                                          // 1527
        b: b,                                                                                                          // 1528
        opacity: is(o, "finite") ? o : 1,                                                                              // 1529
        hex: Snap.rgb(r, g, b),                                                                                        // 1530
        toString: rgbtoString                                                                                          // 1531
    };                                                                                                                 // 1532
    is(o, "finite") && (rgb.opacity = o);                                                                              // 1533
    return rgb;                                                                                                        // 1534
};                                                                                                                     // 1535
/*\
 * Snap.color                                                                                                          // 1537
 [ method ]                                                                                                            // 1538
 **                                                                                                                    // 1539
 * Parses the color string and returns an object featuring the color's component values                                // 1540
 - clr (string) color string in one of the supported formats (see @Snap.getRGB)                                        // 1541
 = (object) Combined RGB/HSB object in the following format:                                                           // 1542
 o {                                                                                                                   // 1543
 o     r (number) red,                                                                                                 // 1544
 o     g (number) green,                                                                                               // 1545
 o     b (number) blue,                                                                                                // 1546
 o     hex (string) color in HTML/CSS format: #••••••,                                                                 // 1547
 o     error (boolean) `true` if string can't be parsed,                                                               // 1548
 o     h (number) hue,                                                                                                 // 1549
 o     s (number) saturation,                                                                                          // 1550
 o     v (number) value (brightness),                                                                                  // 1551
 o     l (number) lightness                                                                                            // 1552
 o }                                                                                                                   // 1553
\*/                                                                                                                    // 1554
Snap.color = function (clr) {                                                                                          // 1555
    var rgb;                                                                                                           // 1556
    if (is(clr, "object") && "h" in clr && "s" in clr && "b" in clr) {                                                 // 1557
        rgb = Snap.hsb2rgb(clr);                                                                                       // 1558
        clr.r = rgb.r;                                                                                                 // 1559
        clr.g = rgb.g;                                                                                                 // 1560
        clr.b = rgb.b;                                                                                                 // 1561
        clr.opacity = 1;                                                                                               // 1562
        clr.hex = rgb.hex;                                                                                             // 1563
    } else if (is(clr, "object") && "h" in clr && "s" in clr && "l" in clr) {                                          // 1564
        rgb = Snap.hsl2rgb(clr);                                                                                       // 1565
        clr.r = rgb.r;                                                                                                 // 1566
        clr.g = rgb.g;                                                                                                 // 1567
        clr.b = rgb.b;                                                                                                 // 1568
        clr.opacity = 1;                                                                                               // 1569
        clr.hex = rgb.hex;                                                                                             // 1570
    } else {                                                                                                           // 1571
        if (is(clr, "string")) {                                                                                       // 1572
            clr = Snap.getRGB(clr);                                                                                    // 1573
        }                                                                                                              // 1574
        if (is(clr, "object") && "r" in clr && "g" in clr && "b" in clr && !("error" in clr)) {                        // 1575
            rgb = Snap.rgb2hsl(clr);                                                                                   // 1576
            clr.h = rgb.h;                                                                                             // 1577
            clr.s = rgb.s;                                                                                             // 1578
            clr.l = rgb.l;                                                                                             // 1579
            rgb = Snap.rgb2hsb(clr);                                                                                   // 1580
            clr.v = rgb.b;                                                                                             // 1581
        } else {                                                                                                       // 1582
            clr = {hex: "none"};                                                                                       // 1583
            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;                                                // 1584
            clr.error = 1;                                                                                             // 1585
        }                                                                                                              // 1586
    }                                                                                                                  // 1587
    clr.toString = rgbtoString;                                                                                        // 1588
    return clr;                                                                                                        // 1589
};                                                                                                                     // 1590
/*\
 * Snap.hsb2rgb                                                                                                        // 1592
 [ method ]                                                                                                            // 1593
 **                                                                                                                    // 1594
 * Converts HSB values to an RGB object                                                                                // 1595
 - h (number) hue                                                                                                      // 1596
 - s (number) saturation                                                                                               // 1597
 - v (number) value or brightness                                                                                      // 1598
 = (object) RGB object in the following format:                                                                        // 1599
 o {                                                                                                                   // 1600
 o     r (number) red,                                                                                                 // 1601
 o     g (number) green,                                                                                               // 1602
 o     b (number) blue,                                                                                                // 1603
 o     hex (string) color in HTML/CSS format: #••••••                                                                  // 1604
 o }                                                                                                                   // 1605
\*/                                                                                                                    // 1606
Snap.hsb2rgb = function (h, s, v, o) {                                                                                 // 1607
    if (is(h, "object") && "h" in h && "s" in h && "b" in h) {                                                         // 1608
        v = h.b;                                                                                                       // 1609
        s = h.s;                                                                                                       // 1610
        o = h.o;                                                                                                       // 1611
        h = h.h;                                                                                                       // 1612
    }                                                                                                                  // 1613
    h *= 360;                                                                                                          // 1614
    var R, G, B, X, C;                                                                                                 // 1615
    h = (h % 360) / 60;                                                                                                // 1616
    C = v * s;                                                                                                         // 1617
    X = C * (1 - abs(h % 2 - 1));                                                                                      // 1618
    R = G = B = v - C;                                                                                                 // 1619
                                                                                                                       // 1620
    h = ~~h;                                                                                                           // 1621
    R += [C, X, 0, 0, X, C][h];                                                                                        // 1622
    G += [X, C, C, X, 0, 0][h];                                                                                        // 1623
    B += [0, 0, X, C, C, X][h];                                                                                        // 1624
    return packageRGB(R, G, B, o);                                                                                     // 1625
};                                                                                                                     // 1626
/*\
 * Snap.hsl2rgb                                                                                                        // 1628
 [ method ]                                                                                                            // 1629
 **                                                                                                                    // 1630
 * Converts HSL values to an RGB object                                                                                // 1631
 - h (number) hue                                                                                                      // 1632
 - s (number) saturation                                                                                               // 1633
 - l (number) luminosity                                                                                               // 1634
 = (object) RGB object in the following format:                                                                        // 1635
 o {                                                                                                                   // 1636
 o     r (number) red,                                                                                                 // 1637
 o     g (number) green,                                                                                               // 1638
 o     b (number) blue,                                                                                                // 1639
 o     hex (string) color in HTML/CSS format: #••••••                                                                  // 1640
 o }                                                                                                                   // 1641
\*/                                                                                                                    // 1642
Snap.hsl2rgb = function (h, s, l, o) {                                                                                 // 1643
    if (is(h, "object") && "h" in h && "s" in h && "l" in h) {                                                         // 1644
        l = h.l;                                                                                                       // 1645
        s = h.s;                                                                                                       // 1646
        h = h.h;                                                                                                       // 1647
    }                                                                                                                  // 1648
    if (h > 1 || s > 1 || l > 1) {                                                                                     // 1649
        h /= 360;                                                                                                      // 1650
        s /= 100;                                                                                                      // 1651
        l /= 100;                                                                                                      // 1652
    }                                                                                                                  // 1653
    h *= 360;                                                                                                          // 1654
    var R, G, B, X, C;                                                                                                 // 1655
    h = (h % 360) / 60;                                                                                                // 1656
    C = 2 * s * (l < .5 ? l : 1 - l);                                                                                  // 1657
    X = C * (1 - abs(h % 2 - 1));                                                                                      // 1658
    R = G = B = l - C / 2;                                                                                             // 1659
                                                                                                                       // 1660
    h = ~~h;                                                                                                           // 1661
    R += [C, X, 0, 0, X, C][h];                                                                                        // 1662
    G += [X, C, C, X, 0, 0][h];                                                                                        // 1663
    B += [0, 0, X, C, C, X][h];                                                                                        // 1664
    return packageRGB(R, G, B, o);                                                                                     // 1665
};                                                                                                                     // 1666
/*\
 * Snap.rgb2hsb                                                                                                        // 1668
 [ method ]                                                                                                            // 1669
 **                                                                                                                    // 1670
 * Converts RGB values to an HSB object                                                                                // 1671
 - r (number) red                                                                                                      // 1672
 - g (number) green                                                                                                    // 1673
 - b (number) blue                                                                                                     // 1674
 = (object) HSB object in the following format:                                                                        // 1675
 o {                                                                                                                   // 1676
 o     h (number) hue,                                                                                                 // 1677
 o     s (number) saturation,                                                                                          // 1678
 o     b (number) brightness                                                                                           // 1679
 o }                                                                                                                   // 1680
\*/                                                                                                                    // 1681
Snap.rgb2hsb = function (r, g, b) {                                                                                    // 1682
    b = prepareRGB(r, g, b);                                                                                           // 1683
    r = b[0];                                                                                                          // 1684
    g = b[1];                                                                                                          // 1685
    b = b[2];                                                                                                          // 1686
                                                                                                                       // 1687
    var H, S, V, C;                                                                                                    // 1688
    V = mmax(r, g, b);                                                                                                 // 1689
    C = V - mmin(r, g, b);                                                                                             // 1690
    H = (C == 0 ? null :                                                                                               // 1691
         V == r ? (g - b) / C :                                                                                        // 1692
         V == g ? (b - r) / C + 2 :                                                                                    // 1693
                  (r - g) / C + 4                                                                                      // 1694
        );                                                                                                             // 1695
    H = ((H + 360) % 6) * 60 / 360;                                                                                    // 1696
    S = C == 0 ? 0 : C / V;                                                                                            // 1697
    return {h: H, s: S, b: V, toString: hsbtoString};                                                                  // 1698
};                                                                                                                     // 1699
/*\
 * Snap.rgb2hsl                                                                                                        // 1701
 [ method ]                                                                                                            // 1702
 **                                                                                                                    // 1703
 * Converts RGB values to an HSL object                                                                                // 1704
 - r (number) red                                                                                                      // 1705
 - g (number) green                                                                                                    // 1706
 - b (number) blue                                                                                                     // 1707
 = (object) HSL object in the following format:                                                                        // 1708
 o {                                                                                                                   // 1709
 o     h (number) hue,                                                                                                 // 1710
 o     s (number) saturation,                                                                                          // 1711
 o     l (number) luminosity                                                                                           // 1712
 o }                                                                                                                   // 1713
\*/                                                                                                                    // 1714
Snap.rgb2hsl = function (r, g, b) {                                                                                    // 1715
    b = prepareRGB(r, g, b);                                                                                           // 1716
    r = b[0];                                                                                                          // 1717
    g = b[1];                                                                                                          // 1718
    b = b[2];                                                                                                          // 1719
                                                                                                                       // 1720
    var H, S, L, M, m, C;                                                                                              // 1721
    M = mmax(r, g, b);                                                                                                 // 1722
    m = mmin(r, g, b);                                                                                                 // 1723
    C = M - m;                                                                                                         // 1724
    H = (C == 0 ? null :                                                                                               // 1725
         M == r ? (g - b) / C :                                                                                        // 1726
         M == g ? (b - r) / C + 2 :                                                                                    // 1727
                  (r - g) / C + 4);                                                                                    // 1728
    H = ((H + 360) % 6) * 60 / 360;                                                                                    // 1729
    L = (M + m) / 2;                                                                                                   // 1730
    S = (C == 0 ? 0 :                                                                                                  // 1731
         L < .5 ? C / (2 * L) :                                                                                        // 1732
                  C / (2 - 2 * L));                                                                                    // 1733
    return {h: H, s: S, l: L, toString: hsltoString};                                                                  // 1734
};                                                                                                                     // 1735
                                                                                                                       // 1736
// Transformations                                                                                                     // 1737
/*\
 * Snap.parsePathString                                                                                                // 1739
 [ method ]                                                                                                            // 1740
 **                                                                                                                    // 1741
 * Utility method                                                                                                      // 1742
 **                                                                                                                    // 1743
 * Parses given path string into an array of arrays of path segments                                                   // 1744
 - pathString (string|array) path string or array of segments (in the last case it is returned straight away)          // 1745
 = (array) array of segments                                                                                           // 1746
\*/                                                                                                                    // 1747
Snap.parsePathString = function (pathString) {                                                                         // 1748
    if (!pathString) {                                                                                                 // 1749
        return null;                                                                                                   // 1750
    }                                                                                                                  // 1751
    var pth = Snap.path(pathString);                                                                                   // 1752
    if (pth.arr) {                                                                                                     // 1753
        return Snap.path.clone(pth.arr);                                                                               // 1754
    }                                                                                                                  // 1755
                                                                                                                       // 1756
    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},                  // 1757
        data = [];                                                                                                     // 1758
    if (is(pathString, "array") && is(pathString[0], "array")) { // rough assumption                                   // 1759
        data = Snap.path.clone(pathString);                                                                            // 1760
    }                                                                                                                  // 1761
    if (!data.length) {                                                                                                // 1762
        Str(pathString).replace(pathCommand, function (a, b, c) {                                                      // 1763
            var params = [],                                                                                           // 1764
                name = b.toLowerCase();                                                                                // 1765
            c.replace(pathValues, function (a, b) {                                                                    // 1766
                b && params.push(+b);                                                                                  // 1767
            });                                                                                                        // 1768
            if (name == "m" && params.length > 2) {                                                                    // 1769
                data.push([b].concat(params.splice(0, 2)));                                                            // 1770
                name = "l";                                                                                            // 1771
                b = b == "m" ? "l" : "L";                                                                              // 1772
            }                                                                                                          // 1773
            if (name == "o" && params.length == 1) {                                                                   // 1774
                data.push([b, params[0]]);                                                                             // 1775
            }                                                                                                          // 1776
            if (name == "r") {                                                                                         // 1777
                data.push([b].concat(params));                                                                         // 1778
            } else while (params.length >= paramCounts[name]) {                                                        // 1779
                data.push([b].concat(params.splice(0, paramCounts[name])));                                            // 1780
                if (!paramCounts[name]) {                                                                              // 1781
                    break;                                                                                             // 1782
                }                                                                                                      // 1783
            }                                                                                                          // 1784
        });                                                                                                            // 1785
    }                                                                                                                  // 1786
    data.toString = Snap.path.toString;                                                                                // 1787
    pth.arr = Snap.path.clone(data);                                                                                   // 1788
    return data;                                                                                                       // 1789
};                                                                                                                     // 1790
/*\
 * Snap.parseTransformString                                                                                           // 1792
 [ method ]                                                                                                            // 1793
 **                                                                                                                    // 1794
 * Utility method                                                                                                      // 1795
 **                                                                                                                    // 1796
 * Parses given transform string into an array of transformations                                                      // 1797
 - TString (string|array) transform string or array of transformations (in the last case it is returned straight away) // 1798
 = (array) array of transformations                                                                                    // 1799
\*/                                                                                                                    // 1800
var parseTransformString = Snap.parseTransformString = function (TString) {                                            // 1801
    if (!TString) {                                                                                                    // 1802
        return null;                                                                                                   // 1803
    }                                                                                                                  // 1804
    var paramCounts = {r: 3, s: 4, t: 2, m: 6},                                                                        // 1805
        data = [];                                                                                                     // 1806
    if (is(TString, "array") && is(TString[0], "array")) { // rough assumption                                         // 1807
        data = Snap.path.clone(TString);                                                                               // 1808
    }                                                                                                                  // 1809
    if (!data.length) {                                                                                                // 1810
        Str(TString).replace(tCommand, function (a, b, c) {                                                            // 1811
            var params = [],                                                                                           // 1812
                name = b.toLowerCase();                                                                                // 1813
            c.replace(pathValues, function (a, b) {                                                                    // 1814
                b && params.push(+b);                                                                                  // 1815
            });                                                                                                        // 1816
            data.push([b].concat(params));                                                                             // 1817
        });                                                                                                            // 1818
    }                                                                                                                  // 1819
    data.toString = Snap.path.toString;                                                                                // 1820
    return data;                                                                                                       // 1821
};                                                                                                                     // 1822
function svgTransform2string(tstr) {                                                                                   // 1823
    var res = [];                                                                                                      // 1824
    tstr = tstr.replace(/(?:^|\s)(\w+)\(([^)]+)\)/g, function (all, name, params) {                                    // 1825
        params = params.split(/\s*,\s*|\s+/);                                                                          // 1826
        if (name == "rotate" && params.length == 1) {                                                                  // 1827
            params.push(0, 0);                                                                                         // 1828
        }                                                                                                              // 1829
        if (name == "scale") {                                                                                         // 1830
            if (params.length > 2) {                                                                                   // 1831
                params = params.slice(0, 2);                                                                           // 1832
            } else if (params.length == 2) {                                                                           // 1833
                params.push(0, 0);                                                                                     // 1834
            }                                                                                                          // 1835
            if (params.length == 1) {                                                                                  // 1836
                params.push(params[0], 0, 0);                                                                          // 1837
            }                                                                                                          // 1838
        }                                                                                                              // 1839
        if (name == "skewX") {                                                                                         // 1840
            res.push(["m", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);                                                  // 1841
        } else if (name == "skewY") {                                                                                  // 1842
            res.push(["m", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);                                                  // 1843
        } else {                                                                                                       // 1844
            res.push([name.charAt(0)].concat(params));                                                                 // 1845
        }                                                                                                              // 1846
        return all;                                                                                                    // 1847
    });                                                                                                                // 1848
    return res;                                                                                                        // 1849
}                                                                                                                      // 1850
Snap._.svgTransform2string = svgTransform2string;                                                                      // 1851
Snap._.rgTransform = /^[a-z][\s]*-?\.?\d/i;                                                                            // 1852
function transform2matrix(tstr, bbox) {                                                                                // 1853
    var tdata = parseTransformString(tstr),                                                                            // 1854
        m = new Snap.Matrix;                                                                                           // 1855
    if (tdata) {                                                                                                       // 1856
        for (var i = 0, ii = tdata.length; i < ii; i++) {                                                              // 1857
            var t = tdata[i],                                                                                          // 1858
                tlen = t.length,                                                                                       // 1859
                command = Str(t[0]).toLowerCase(),                                                                     // 1860
                absolute = t[0] != command,                                                                            // 1861
                inver = absolute ? m.invert() : 0,                                                                     // 1862
                x1,                                                                                                    // 1863
                y1,                                                                                                    // 1864
                x2,                                                                                                    // 1865
                y2,                                                                                                    // 1866
                bb;                                                                                                    // 1867
            if (command == "t" && tlen == 2){                                                                          // 1868
                m.translate(t[1], 0);                                                                                  // 1869
            } else if (command == "t" && tlen == 3) {                                                                  // 1870
                if (absolute) {                                                                                        // 1871
                    x1 = inver.x(0, 0);                                                                                // 1872
                    y1 = inver.y(0, 0);                                                                                // 1873
                    x2 = inver.x(t[1], t[2]);                                                                          // 1874
                    y2 = inver.y(t[1], t[2]);                                                                          // 1875
                    m.translate(x2 - x1, y2 - y1);                                                                     // 1876
                } else {                                                                                               // 1877
                    m.translate(t[1], t[2]);                                                                           // 1878
                }                                                                                                      // 1879
            } else if (command == "r") {                                                                               // 1880
                if (tlen == 2) {                                                                                       // 1881
                    bb = bb || bbox;                                                                                   // 1882
                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);                                         // 1883
                } else if (tlen == 4) {                                                                                // 1884
                    if (absolute) {                                                                                    // 1885
                        x2 = inver.x(t[2], t[3]);                                                                      // 1886
                        y2 = inver.y(t[2], t[3]);                                                                      // 1887
                        m.rotate(t[1], x2, y2);                                                                        // 1888
                    } else {                                                                                           // 1889
                        m.rotate(t[1], t[2], t[3]);                                                                    // 1890
                    }                                                                                                  // 1891
                }                                                                                                      // 1892
            } else if (command == "s") {                                                                               // 1893
                if (tlen == 2 || tlen == 3) {                                                                          // 1894
                    bb = bb || bbox;                                                                                   // 1895
                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);                             // 1896
                } else if (tlen == 4) {                                                                                // 1897
                    if (absolute) {                                                                                    // 1898
                        x2 = inver.x(t[2], t[3]);                                                                      // 1899
                        y2 = inver.y(t[2], t[3]);                                                                      // 1900
                        m.scale(t[1], t[1], x2, y2);                                                                   // 1901
                    } else {                                                                                           // 1902
                        m.scale(t[1], t[1], t[2], t[3]);                                                               // 1903
                    }                                                                                                  // 1904
                } else if (tlen == 5) {                                                                                // 1905
                    if (absolute) {                                                                                    // 1906
                        x2 = inver.x(t[3], t[4]);                                                                      // 1907
                        y2 = inver.y(t[3], t[4]);                                                                      // 1908
                        m.scale(t[1], t[2], x2, y2);                                                                   // 1909
                    } else {                                                                                           // 1910
                        m.scale(t[1], t[2], t[3], t[4]);                                                               // 1911
                    }                                                                                                  // 1912
                }                                                                                                      // 1913
            } else if (command == "m" && tlen == 7) {                                                                  // 1914
                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);                                                             // 1915
            }                                                                                                          // 1916
        }                                                                                                              // 1917
    }                                                                                                                  // 1918
    return m;                                                                                                          // 1919
}                                                                                                                      // 1920
Snap._.transform2matrix = transform2matrix;                                                                            // 1921
Snap._unit2px = unit2px;                                                                                               // 1922
var contains = glob.doc.contains || glob.doc.compareDocumentPosition ?                                                 // 1923
    function (a, b) {                                                                                                  // 1924
        var adown = a.nodeType == 9 ? a.documentElement : a,                                                           // 1925
            bup = b && b.parentNode;                                                                                   // 1926
            return a == bup || !!(bup && bup.nodeType == 1 && (                                                        // 1927
                adown.contains ?                                                                                       // 1928
                    adown.contains(bup) :                                                                              // 1929
                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16                                   // 1930
            ));                                                                                                        // 1931
    } :                                                                                                                // 1932
    function (a, b) {                                                                                                  // 1933
        if (b) {                                                                                                       // 1934
            while (b) {                                                                                                // 1935
                b = b.parentNode;                                                                                      // 1936
                if (b == a) {                                                                                          // 1937
                    return true;                                                                                       // 1938
                }                                                                                                      // 1939
            }                                                                                                          // 1940
        }                                                                                                              // 1941
        return false;                                                                                                  // 1942
    };                                                                                                                 // 1943
function getSomeDefs(el) {                                                                                             // 1944
    var p = (el.node.ownerSVGElement && wrap(el.node.ownerSVGElement)) ||                                              // 1945
            (el.node.parentNode && wrap(el.node.parentNode)) ||                                                        // 1946
            Snap.select("svg") ||                                                                                      // 1947
            Snap(0, 0),                                                                                                // 1948
        pdefs = p.select("defs"),                                                                                      // 1949
        defs  = pdefs == null ? false : pdefs.node;                                                                    // 1950
    if (!defs) {                                                                                                       // 1951
        defs = make("defs", p.node).node;                                                                              // 1952
    }                                                                                                                  // 1953
    return defs;                                                                                                       // 1954
}                                                                                                                      // 1955
function getSomeSVG(el) {                                                                                              // 1956
    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select("svg");                             // 1957
}                                                                                                                      // 1958
Snap._.getSomeDefs = getSomeDefs;                                                                                      // 1959
Snap._.getSomeSVG = getSomeSVG;                                                                                        // 1960
function unit2px(el, name, value) {                                                                                    // 1961
    var svg = getSomeSVG(el).node,                                                                                     // 1962
        out = {},                                                                                                      // 1963
        mgr = svg.querySelector(".svg---mgr");                                                                         // 1964
    if (!mgr) {                                                                                                        // 1965
        mgr = $("rect");                                                                                               // 1966
        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, "class": "svg---mgr", fill: "none"});                         // 1967
        svg.appendChild(mgr);                                                                                          // 1968
    }                                                                                                                  // 1969
    function getW(val) {                                                                                               // 1970
        if (val == null) {                                                                                             // 1971
            return E;                                                                                                  // 1972
        }                                                                                                              // 1973
        if (val == +val) {                                                                                             // 1974
            return val;                                                                                                // 1975
        }                                                                                                              // 1976
        $(mgr, {width: val});                                                                                          // 1977
        try {                                                                                                          // 1978
            return mgr.getBBox().width;                                                                                // 1979
        } catch (e) {                                                                                                  // 1980
            return 0;                                                                                                  // 1981
        }                                                                                                              // 1982
    }                                                                                                                  // 1983
    function getH(val) {                                                                                               // 1984
        if (val == null) {                                                                                             // 1985
            return E;                                                                                                  // 1986
        }                                                                                                              // 1987
        if (val == +val) {                                                                                             // 1988
            return val;                                                                                                // 1989
        }                                                                                                              // 1990
        $(mgr, {height: val});                                                                                         // 1991
        try {                                                                                                          // 1992
            return mgr.getBBox().height;                                                                               // 1993
        } catch (e) {                                                                                                  // 1994
            return 0;                                                                                                  // 1995
        }                                                                                                              // 1996
    }                                                                                                                  // 1997
    function set(nam, f) {                                                                                             // 1998
        if (name == null) {                                                                                            // 1999
            out[nam] = f(el.attr(nam) || 0);                                                                           // 2000
        } else if (nam == name) {                                                                                      // 2001
            out = f(value == null ? el.attr(nam) || 0 : value);                                                        // 2002
        }                                                                                                              // 2003
    }                                                                                                                  // 2004
    switch (el.type) {                                                                                                 // 2005
        case "rect":                                                                                                   // 2006
            set("rx", getW);                                                                                           // 2007
            set("ry", getH);                                                                                           // 2008
        case "image":                                                                                                  // 2009
            set("width", getW);                                                                                        // 2010
            set("height", getH);                                                                                       // 2011
        case "text":                                                                                                   // 2012
            set("x", getW);                                                                                            // 2013
            set("y", getH);                                                                                            // 2014
        break;                                                                                                         // 2015
        case "circle":                                                                                                 // 2016
            set("cx", getW);                                                                                           // 2017
            set("cy", getH);                                                                                           // 2018
            set("r", getW);                                                                                            // 2019
        break;                                                                                                         // 2020
        case "ellipse":                                                                                                // 2021
            set("cx", getW);                                                                                           // 2022
            set("cy", getH);                                                                                           // 2023
            set("rx", getW);                                                                                           // 2024
            set("ry", getH);                                                                                           // 2025
        break;                                                                                                         // 2026
        case "line":                                                                                                   // 2027
            set("x1", getW);                                                                                           // 2028
            set("x2", getW);                                                                                           // 2029
            set("y1", getH);                                                                                           // 2030
            set("y2", getH);                                                                                           // 2031
        break;                                                                                                         // 2032
        case "marker":                                                                                                 // 2033
            set("refX", getW);                                                                                         // 2034
            set("markerWidth", getW);                                                                                  // 2035
            set("refY", getH);                                                                                         // 2036
            set("markerHeight", getH);                                                                                 // 2037
        break;                                                                                                         // 2038
        case "radialGradient":                                                                                         // 2039
            set("fx", getW);                                                                                           // 2040
            set("fy", getH);                                                                                           // 2041
        break;                                                                                                         // 2042
        case "tspan":                                                                                                  // 2043
            set("dx", getW);                                                                                           // 2044
            set("dy", getH);                                                                                           // 2045
        break;                                                                                                         // 2046
        default:                                                                                                       // 2047
            set(name, getW);                                                                                           // 2048
    }                                                                                                                  // 2049
    svg.removeChild(mgr);                                                                                              // 2050
    return out;                                                                                                        // 2051
}                                                                                                                      // 2052
/*\
 * Snap.select                                                                                                         // 2054
 [ method ]                                                                                                            // 2055
 **                                                                                                                    // 2056
 * Wraps a DOM element specified by CSS selector as @Element                                                           // 2057
 - query (string) CSS selector of the element                                                                          // 2058
 = (Element) the current element                                                                                       // 2059
\*/                                                                                                                    // 2060
Snap.select = function (query) {                                                                                       // 2061
    query = Str(query).replace(/([^\\]):/g, "$1\\:");                                                                  // 2062
    return wrap(glob.doc.querySelector(query));                                                                        // 2063
};                                                                                                                     // 2064
/*\
 * Snap.selectAll                                                                                                      // 2066
 [ method ]                                                                                                            // 2067
 **                                                                                                                    // 2068
 * Wraps DOM elements specified by CSS selector as set or array of @Element                                            // 2069
 - query (string) CSS selector of the element                                                                          // 2070
 = (Element) the current element                                                                                       // 2071
\*/                                                                                                                    // 2072
Snap.selectAll = function (query) {                                                                                    // 2073
    var nodelist = glob.doc.querySelectorAll(query),                                                                   // 2074
        set = (Snap.set || Array)();                                                                                   // 2075
    for (var i = 0; i < nodelist.length; i++) {                                                                        // 2076
        set.push(wrap(nodelist[i]));                                                                                   // 2077
    }                                                                                                                  // 2078
    return set;                                                                                                        // 2079
};                                                                                                                     // 2080
                                                                                                                       // 2081
function add2group(list) {                                                                                             // 2082
    if (!is(list, "array")) {                                                                                          // 2083
        list = Array.prototype.slice.call(arguments, 0);                                                               // 2084
    }                                                                                                                  // 2085
    var i = 0,                                                                                                         // 2086
        j = 0,                                                                                                         // 2087
        node = this.node;                                                                                              // 2088
    while (this[i]) delete this[i++];                                                                                  // 2089
    for (i = 0; i < list.length; i++) {                                                                                // 2090
        if (list[i].type == "set") {                                                                                   // 2091
            list[i].forEach(function (el) {                                                                            // 2092
                node.appendChild(el.node);                                                                             // 2093
            });                                                                                                        // 2094
        } else {                                                                                                       // 2095
            node.appendChild(list[i].node);                                                                            // 2096
        }                                                                                                              // 2097
    }                                                                                                                  // 2098
    var children = node.childNodes;                                                                                    // 2099
    for (i = 0; i < children.length; i++) {                                                                            // 2100
        this[j++] = wrap(children[i]);                                                                                 // 2101
    }                                                                                                                  // 2102
    return this;                                                                                                       // 2103
}                                                                                                                      // 2104
// Hub garbage collector every 10s                                                                                     // 2105
setInterval(function () {                                                                                              // 2106
    for (var key in hub) if (hub[has](key)) {                                                                          // 2107
        var el = hub[key],                                                                                             // 2108
            node = el.node;                                                                                            // 2109
        if (el.type != "svg" && !node.ownerSVGElement || el.type == "svg" && (!node.parentNode || "ownerSVGElement" in node.parentNode && !node.ownerSVGElement)) {
            delete hub[key];                                                                                           // 2111
        }                                                                                                              // 2112
    }                                                                                                                  // 2113
}, 1e4);                                                                                                               // 2114
function Element(el) {                                                                                                 // 2115
    if (el.snap in hub) {                                                                                              // 2116
        return hub[el.snap];                                                                                           // 2117
    }                                                                                                                  // 2118
    var svg;                                                                                                           // 2119
    try {                                                                                                              // 2120
        svg = el.ownerSVGElement;                                                                                      // 2121
    } catch(e) {}                                                                                                      // 2122
    /*\
     * Element.node                                                                                                    // 2124
     [ property (object) ]                                                                                             // 2125
     **                                                                                                                // 2126
     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.                  // 2127
     > Usage                                                                                                           // 2128
     | // draw a circle at coordinate 10,10 with radius of 10                                                          // 2129
     | var c = paper.circle(10, 10, 10);                                                                               // 2130
     | c.node.onclick = function () {                                                                                  // 2131
     |     c.attr("fill", "red");                                                                                      // 2132
     | };                                                                                                              // 2133
    \*/                                                                                                                // 2134
    this.node = el;                                                                                                    // 2135
    if (svg) {                                                                                                         // 2136
        this.paper = new Paper(svg);                                                                                   // 2137
    }                                                                                                                  // 2138
    /*\
     * Element.type                                                                                                    // 2140
     [ property (string) ]                                                                                             // 2141
     **                                                                                                                // 2142
     * SVG tag name of the given element.                                                                              // 2143
    \*/                                                                                                                // 2144
    this.type = el.tagName || el.nodeName;                                                                             // 2145
    var id = this.id = ID(this);                                                                                       // 2146
    this.anims = {};                                                                                                   // 2147
    this._ = {                                                                                                         // 2148
        transform: []                                                                                                  // 2149
    };                                                                                                                 // 2150
    el.snap = id;                                                                                                      // 2151
    hub[id] = this;                                                                                                    // 2152
    if (this.type == "g") {                                                                                            // 2153
        this.add = add2group;                                                                                          // 2154
    }                                                                                                                  // 2155
    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {                                                         // 2156
        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {                                        // 2157
            this[method] = Paper.prototype[method];                                                                    // 2158
        }                                                                                                              // 2159
    }                                                                                                                  // 2160
}                                                                                                                      // 2161
   /*\
     * Element.attr                                                                                                    // 2163
     [ method ]                                                                                                        // 2164
     **                                                                                                                // 2165
     * Gets or sets given attributes of the element.                                                                   // 2166
     **                                                                                                                // 2167
     - params (object) contains key-value pairs of attributes you want to set                                          // 2168
     * or                                                                                                              // 2169
     - param (string) name of the attribute                                                                            // 2170
     = (Element) the current element                                                                                   // 2171
     * or                                                                                                              // 2172
     = (string) value of attribute                                                                                     // 2173
     > Usage                                                                                                           // 2174
     | el.attr({                                                                                                       // 2175
     |     fill: "#fc0",                                                                                               // 2176
     |     stroke: "#000",                                                                                             // 2177
     |     strokeWidth: 2, // CamelCase...                                                                             // 2178
     |     "fill-opacity": 0.5, // or dash-separated names                                                             // 2179
     |     width: "*=2" // prefixed values                                                                             // 2180
     | });                                                                                                             // 2181
     | console.log(el.attr("fill")); // #fc0                                                                           // 2182
     * Prefixed values in format `"+=10"` supported. All four operations                                               // 2183
     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`                                     // 2184
     * and `-`: `"+=2em"`.                                                                                             // 2185
    \*/                                                                                                                // 2186
    Element.prototype.attr = function (params, value) {                                                                // 2187
        var el = this,                                                                                                 // 2188
            node = el.node;                                                                                            // 2189
        if (!params) {                                                                                                 // 2190
            if (node.nodeType != 1) {                                                                                  // 2191
                return {                                                                                               // 2192
                    text: node.nodeValue                                                                               // 2193
                };                                                                                                     // 2194
            }                                                                                                          // 2195
            var attr = node.attributes,                                                                                // 2196
                out = {};                                                                                              // 2197
            for (var i = 0, ii = attr.length; i < ii; i++) {                                                           // 2198
                out[attr[i].nodeName] = attr[i].nodeValue;                                                             // 2199
            }                                                                                                          // 2200
            return out;                                                                                                // 2201
        }                                                                                                              // 2202
        if (is(params, "string")) {                                                                                    // 2203
            if (arguments.length > 1) {                                                                                // 2204
                var json = {};                                                                                         // 2205
                json[params] = value;                                                                                  // 2206
                params = json;                                                                                         // 2207
            } else {                                                                                                   // 2208
                return eve("snap.util.getattr." + params, el).firstDefined();                                          // 2209
            }                                                                                                          // 2210
        }                                                                                                              // 2211
        for (var att in params) {                                                                                      // 2212
            if (params[has](att)) {                                                                                    // 2213
                eve("snap.util.attr." + att, el, params[att]);                                                         // 2214
            }                                                                                                          // 2215
        }                                                                                                              // 2216
        return el;                                                                                                     // 2217
    };                                                                                                                 // 2218
/*\
 * Snap.parse                                                                                                          // 2220
 [ method ]                                                                                                            // 2221
 **                                                                                                                    // 2222
 * Parses SVG fragment and converts it into a @Fragment                                                                // 2223
 **                                                                                                                    // 2224
 - svg (string) SVG string                                                                                             // 2225
 = (Fragment) the @Fragment                                                                                            // 2226
\*/                                                                                                                    // 2227
Snap.parse = function (svg) {                                                                                          // 2228
    var f = glob.doc.createDocumentFragment(),                                                                         // 2229
        full = true,                                                                                                   // 2230
        div = glob.doc.createElement("div");                                                                           // 2231
    svg = Str(svg);                                                                                                    // 2232
    if (!svg.match(/^\s*<\s*svg(?:\s|>)/)) {                                                                           // 2233
        svg = "<svg>" + svg + "</svg>";                                                                                // 2234
        full = false;                                                                                                  // 2235
    }                                                                                                                  // 2236
    div.innerHTML = svg;                                                                                               // 2237
    svg = div.getElementsByTagName("svg")[0];                                                                          // 2238
    if (svg) {                                                                                                         // 2239
        if (full) {                                                                                                    // 2240
            f = svg;                                                                                                   // 2241
        } else {                                                                                                       // 2242
            while (svg.firstChild) {                                                                                   // 2243
                f.appendChild(svg.firstChild);                                                                         // 2244
            }                                                                                                          // 2245
        }                                                                                                              // 2246
    }                                                                                                                  // 2247
    return new Fragment(f);                                                                                            // 2248
};                                                                                                                     // 2249
function Fragment(frag) {                                                                                              // 2250
    this.node = frag;                                                                                                  // 2251
}                                                                                                                      // 2252
/*\
 * Snap.fragment                                                                                                       // 2254
 [ method ]                                                                                                            // 2255
 **                                                                                                                    // 2256
 * Creates a DOM fragment from a given list of elements or strings                                                     // 2257
 **                                                                                                                    // 2258
 - varargs (…) SVG string                                                                                              // 2259
 = (Fragment) the @Fragment                                                                                            // 2260
\*/                                                                                                                    // 2261
Snap.fragment = function () {                                                                                          // 2262
    var args = Array.prototype.slice.call(arguments, 0),                                                               // 2263
        f = glob.doc.createDocumentFragment();                                                                         // 2264
    for (var i = 0, ii = args.length; i < ii; i++) {                                                                   // 2265
        var item = args[i];                                                                                            // 2266
        if (item.node && item.node.nodeType) {                                                                         // 2267
            f.appendChild(item.node);                                                                                  // 2268
        }                                                                                                              // 2269
        if (item.nodeType) {                                                                                           // 2270
            f.appendChild(item);                                                                                       // 2271
        }                                                                                                              // 2272
        if (typeof item == "string") {                                                                                 // 2273
            f.appendChild(Snap.parse(item).node);                                                                      // 2274
        }                                                                                                              // 2275
    }                                                                                                                  // 2276
    return new Fragment(f);                                                                                            // 2277
};                                                                                                                     // 2278
                                                                                                                       // 2279
function make(name, parent) {                                                                                          // 2280
    var res = $(name);                                                                                                 // 2281
    parent.appendChild(res);                                                                                           // 2282
    var el = wrap(res);                                                                                                // 2283
    return el;                                                                                                         // 2284
}                                                                                                                      // 2285
function Paper(w, h) {                                                                                                 // 2286
    var res,                                                                                                           // 2287
        desc,                                                                                                          // 2288
        defs,                                                                                                          // 2289
        proto = Paper.prototype;                                                                                       // 2290
    if (w && w.tagName == "svg") {                                                                                     // 2291
        if (w.snap in hub) {                                                                                           // 2292
            return hub[w.snap];                                                                                        // 2293
        }                                                                                                              // 2294
        var doc = w.ownerDocument;                                                                                     // 2295
        res = new Element(w);                                                                                          // 2296
        desc = w.getElementsByTagName("desc")[0];                                                                      // 2297
        defs = w.getElementsByTagName("defs")[0];                                                                      // 2298
        if (!desc) {                                                                                                   // 2299
            desc = $("desc");                                                                                          // 2300
            desc.appendChild(doc.createTextNode("Created with Snap"));                                                 // 2301
            res.node.appendChild(desc);                                                                                // 2302
        }                                                                                                              // 2303
        if (!defs) {                                                                                                   // 2304
            defs = $("defs");                                                                                          // 2305
            res.node.appendChild(defs);                                                                                // 2306
        }                                                                                                              // 2307
        res.defs = defs;                                                                                               // 2308
        for (var key in proto) if (proto[has](key)) {                                                                  // 2309
            res[key] = proto[key];                                                                                     // 2310
        }                                                                                                              // 2311
        res.paper = res.root = res;                                                                                    // 2312
    } else {                                                                                                           // 2313
        res = make("svg", glob.doc.body);                                                                              // 2314
        $(res.node, {                                                                                                  // 2315
            height: h,                                                                                                 // 2316
            version: 1.1,                                                                                              // 2317
            width: w,                                                                                                  // 2318
            xmlns: xmlns                                                                                               // 2319
        });                                                                                                            // 2320
    }                                                                                                                  // 2321
    return res;                                                                                                        // 2322
}                                                                                                                      // 2323
function wrap(dom) {                                                                                                   // 2324
    if (!dom) {                                                                                                        // 2325
        return dom;                                                                                                    // 2326
    }                                                                                                                  // 2327
    if (dom instanceof Element || dom instanceof Fragment) {                                                           // 2328
        return dom;                                                                                                    // 2329
    }                                                                                                                  // 2330
    if (dom.tagName && dom.tagName.toLowerCase() == "svg") {                                                           // 2331
        return new Paper(dom);                                                                                         // 2332
    }                                                                                                                  // 2333
    if (dom.tagName && dom.tagName.toLowerCase() == "object" && dom.type == "image/svg+xml") {                         // 2334
        return new Paper(dom.contentDocument.getElementsByTagName("svg")[0]);                                          // 2335
    }                                                                                                                  // 2336
    return new Element(dom);                                                                                           // 2337
}                                                                                                                      // 2338
                                                                                                                       // 2339
Snap._.make = make;                                                                                                    // 2340
Snap._.wrap = wrap;                                                                                                    // 2341
/*\
 * Paper.el                                                                                                            // 2343
 [ method ]                                                                                                            // 2344
 **                                                                                                                    // 2345
 * Creates an element on paper with a given name and no attributes                                                     // 2346
 **                                                                                                                    // 2347
 - name (string) tag name                                                                                              // 2348
 - attr (object) attributes                                                                                            // 2349
 = (Element) the current element                                                                                       // 2350
 > Usage                                                                                                               // 2351
 | var c = paper.circle(10, 10, 10); // is the same as...                                                              // 2352
 | var c = paper.el("circle").attr({                                                                                   // 2353
 |     cx: 10,                                                                                                         // 2354
 |     cy: 10,                                                                                                         // 2355
 |     r: 10                                                                                                           // 2356
 | });                                                                                                                 // 2357
 | // and the same as                                                                                                  // 2358
 | var c = paper.el("circle", {                                                                                        // 2359
 |     cx: 10,                                                                                                         // 2360
 |     cy: 10,                                                                                                         // 2361
 |     r: 10                                                                                                           // 2362
 | });                                                                                                                 // 2363
\*/                                                                                                                    // 2364
Paper.prototype.el = function (name, attr) {                                                                           // 2365
    var el = make(name, this.node);                                                                                    // 2366
    attr && el.attr(attr);                                                                                             // 2367
    return el;                                                                                                         // 2368
};                                                                                                                     // 2369
/*\
 * Element.children                                                                                                    // 2371
 [ method ]                                                                                                            // 2372
 **                                                                                                                    // 2373
 * Returns array of all the children of the element.                                                                   // 2374
 = (array) array of Elements                                                                                           // 2375
\*/                                                                                                                    // 2376
Element.prototype.children = function () {                                                                             // 2377
    var out = [],                                                                                                      // 2378
        ch = this.node.childNodes;                                                                                     // 2379
    for (var i = 0, ii = ch.length; i < ii; i++) {                                                                     // 2380
        out[i] = Snap(ch[i]);                                                                                          // 2381
    }                                                                                                                  // 2382
    return out;                                                                                                        // 2383
};                                                                                                                     // 2384
function jsonFiller(root, o) {                                                                                         // 2385
    for (var i = 0, ii = root.length; i < ii; i++) {                                                                   // 2386
        var item = {                                                                                                   // 2387
                type: root[i].type,                                                                                    // 2388
                attr: root[i].attr()                                                                                   // 2389
            },                                                                                                         // 2390
            children = root[i].children();                                                                             // 2391
        o.push(item);                                                                                                  // 2392
        if (children.length) {                                                                                         // 2393
            jsonFiller(children, item.childNodes = []);                                                                // 2394
        }                                                                                                              // 2395
    }                                                                                                                  // 2396
}                                                                                                                      // 2397
/*\
 * Element.toJSON                                                                                                      // 2399
 [ method ]                                                                                                            // 2400
 **                                                                                                                    // 2401
 * Returns object representation of the given element and all its children.                                            // 2402
 = (object) in format                                                                                                  // 2403
 o {                                                                                                                   // 2404
 o     type (string) this.type,                                                                                        // 2405
 o     attr (object) attributes map,                                                                                   // 2406
 o     childNodes (array) optional array of children in the same format                                                // 2407
 o }                                                                                                                   // 2408
\*/                                                                                                                    // 2409
Element.prototype.toJSON = function () {                                                                               // 2410
    var out = [];                                                                                                      // 2411
    jsonFiller([this], out);                                                                                           // 2412
    return out[0];                                                                                                     // 2413
};                                                                                                                     // 2414
// default                                                                                                             // 2415
eve.on("snap.util.getattr", function () {                                                                              // 2416
    var att = eve.nt();                                                                                                // 2417
    att = att.substring(att.lastIndexOf(".") + 1);                                                                     // 2418
    var css = att.replace(/[A-Z]/g, function (letter) {                                                                // 2419
        return "-" + letter.toLowerCase();                                                                             // 2420
    });                                                                                                                // 2421
    if (cssAttr[has](css)) {                                                                                           // 2422
        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);            // 2423
    } else {                                                                                                           // 2424
        return $(this.node, att);                                                                                      // 2425
    }                                                                                                                  // 2426
});                                                                                                                    // 2427
var cssAttr = {                                                                                                        // 2428
    "alignment-baseline": 0,                                                                                           // 2429
    "baseline-shift": 0,                                                                                               // 2430
    "clip": 0,                                                                                                         // 2431
    "clip-path": 0,                                                                                                    // 2432
    "clip-rule": 0,                                                                                                    // 2433
    "color": 0,                                                                                                        // 2434
    "color-interpolation": 0,                                                                                          // 2435
    "color-interpolation-filters": 0,                                                                                  // 2436
    "color-profile": 0,                                                                                                // 2437
    "color-rendering": 0,                                                                                              // 2438
    "cursor": 0,                                                                                                       // 2439
    "direction": 0,                                                                                                    // 2440
    "display": 0,                                                                                                      // 2441
    "dominant-baseline": 0,                                                                                            // 2442
    "enable-background": 0,                                                                                            // 2443
    "fill": 0,                                                                                                         // 2444
    "fill-opacity": 0,                                                                                                 // 2445
    "fill-rule": 0,                                                                                                    // 2446
    "filter": 0,                                                                                                       // 2447
    "flood-color": 0,                                                                                                  // 2448
    "flood-opacity": 0,                                                                                                // 2449
    "font": 0,                                                                                                         // 2450
    "font-family": 0,                                                                                                  // 2451
    "font-size": 0,                                                                                                    // 2452
    "font-size-adjust": 0,                                                                                             // 2453
    "font-stretch": 0,                                                                                                 // 2454
    "font-style": 0,                                                                                                   // 2455
    "font-variant": 0,                                                                                                 // 2456
    "font-weight": 0,                                                                                                  // 2457
    "glyph-orientation-horizontal": 0,                                                                                 // 2458
    "glyph-orientation-vertical": 0,                                                                                   // 2459
    "image-rendering": 0,                                                                                              // 2460
    "kerning": 0,                                                                                                      // 2461
    "letter-spacing": 0,                                                                                               // 2462
    "lighting-color": 0,                                                                                               // 2463
    "marker": 0,                                                                                                       // 2464
    "marker-end": 0,                                                                                                   // 2465
    "marker-mid": 0,                                                                                                   // 2466
    "marker-start": 0,                                                                                                 // 2467
    "mask": 0,                                                                                                         // 2468
    "opacity": 0,                                                                                                      // 2469
    "overflow": 0,                                                                                                     // 2470
    "pointer-events": 0,                                                                                               // 2471
    "shape-rendering": 0,                                                                                              // 2472
    "stop-color": 0,                                                                                                   // 2473
    "stop-opacity": 0,                                                                                                 // 2474
    "stroke": 0,                                                                                                       // 2475
    "stroke-dasharray": 0,                                                                                             // 2476
    "stroke-dashoffset": 0,                                                                                            // 2477
    "stroke-linecap": 0,                                                                                               // 2478
    "stroke-linejoin": 0,                                                                                              // 2479
    "stroke-miterlimit": 0,                                                                                            // 2480
    "stroke-opacity": 0,                                                                                               // 2481
    "stroke-width": 0,                                                                                                 // 2482
    "text-anchor": 0,                                                                                                  // 2483
    "text-decoration": 0,                                                                                              // 2484
    "text-rendering": 0,                                                                                               // 2485
    "unicode-bidi": 0,                                                                                                 // 2486
    "visibility": 0,                                                                                                   // 2487
    "word-spacing": 0,                                                                                                 // 2488
    "writing-mode": 0                                                                                                  // 2489
};                                                                                                                     // 2490
                                                                                                                       // 2491
eve.on("snap.util.attr", function (value) {                                                                            // 2492
    var att = eve.nt(),                                                                                                // 2493
        attr = {};                                                                                                     // 2494
    att = att.substring(att.lastIndexOf(".") + 1);                                                                     // 2495
    attr[att] = value;                                                                                                 // 2496
    var style = att.replace(/-(\w)/gi, function (all, letter) {                                                        // 2497
            return letter.toUpperCase();                                                                               // 2498
        }),                                                                                                            // 2499
        css = att.replace(/[A-Z]/g, function (letter) {                                                                // 2500
            return "-" + letter.toLowerCase();                                                                         // 2501
        });                                                                                                            // 2502
    if (cssAttr[has](css)) {                                                                                           // 2503
        this.node.style[style] = value == null ? E : value;                                                            // 2504
    } else {                                                                                                           // 2505
        $(this.node, attr);                                                                                            // 2506
    }                                                                                                                  // 2507
});                                                                                                                    // 2508
(function (proto) {}(Paper.prototype));                                                                                // 2509
                                                                                                                       // 2510
// simple ajax                                                                                                         // 2511
/*\
 * Snap.ajax                                                                                                           // 2513
 [ method ]                                                                                                            // 2514
 **                                                                                                                    // 2515
 * Simple implementation of Ajax                                                                                       // 2516
 **                                                                                                                    // 2517
 - url (string) URL                                                                                                    // 2518
 - postData (object|string) data for post request                                                                      // 2519
 - callback (function) callback                                                                                        // 2520
 - scope (object) #optional scope of callback                                                                          // 2521
 * or                                                                                                                  // 2522
 - url (string) URL                                                                                                    // 2523
 - callback (function) callback                                                                                        // 2524
 - scope (object) #optional scope of callback                                                                          // 2525
 = (XMLHttpRequest) the XMLHttpRequest object, just in case                                                            // 2526
\*/                                                                                                                    // 2527
Snap.ajax = function (url, postData, callback, scope){                                                                 // 2528
    var req = new XMLHttpRequest,                                                                                      // 2529
        id = ID();                                                                                                     // 2530
    if (req) {                                                                                                         // 2531
        if (is(postData, "function")) {                                                                                // 2532
            scope = callback;                                                                                          // 2533
            callback = postData;                                                                                       // 2534
            postData = null;                                                                                           // 2535
        } else if (is(postData, "object")) {                                                                           // 2536
            var pd = [];                                                                                               // 2537
            for (var key in postData) if (postData.hasOwnProperty(key)) {                                              // 2538
                pd.push(encodeURIComponent(key) + "=" + encodeURIComponent(postData[key]));                            // 2539
            }                                                                                                          // 2540
            postData = pd.join("&");                                                                                   // 2541
        }                                                                                                              // 2542
        req.open((postData ? "POST" : "GET"), url, true);                                                              // 2543
        if (postData) {                                                                                                // 2544
            req.setRequestHeader("X-Requested-With", "XMLHttpRequest");                                                // 2545
            req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");                                 // 2546
        }                                                                                                              // 2547
        if (callback) {                                                                                                // 2548
            eve.once("snap.ajax." + id + ".0", callback);                                                              // 2549
            eve.once("snap.ajax." + id + ".200", callback);                                                            // 2550
            eve.once("snap.ajax." + id + ".304", callback);                                                            // 2551
        }                                                                                                              // 2552
        req.onreadystatechange = function() {                                                                          // 2553
            if (req.readyState != 4) return;                                                                           // 2554
            eve("snap.ajax." + id + "." + req.status, scope, req);                                                     // 2555
        };                                                                                                             // 2556
        if (req.readyState == 4) {                                                                                     // 2557
            return req;                                                                                                // 2558
        }                                                                                                              // 2559
        req.send(postData);                                                                                            // 2560
        return req;                                                                                                    // 2561
    }                                                                                                                  // 2562
};                                                                                                                     // 2563
/*\
 * Snap.load                                                                                                           // 2565
 [ method ]                                                                                                            // 2566
 **                                                                                                                    // 2567
 * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)                                      // 2568
 **                                                                                                                    // 2569
 - url (string) URL                                                                                                    // 2570
 - callback (function) callback                                                                                        // 2571
 - scope (object) #optional scope of callback                                                                          // 2572
\*/                                                                                                                    // 2573
Snap.load = function (url, callback, scope) {                                                                          // 2574
    Snap.ajax(url, function (req) {                                                                                    // 2575
        var f = Snap.parse(req.responseText);                                                                          // 2576
        scope ? callback.call(scope, f) : callback(f);                                                                 // 2577
    });                                                                                                                // 2578
};                                                                                                                     // 2579
var getOffset = function (elem) {                                                                                      // 2580
    var box = elem.getBoundingClientRect(),                                                                            // 2581
        doc = elem.ownerDocument,                                                                                      // 2582
        body = doc.body,                                                                                               // 2583
        docElem = doc.documentElement,                                                                                 // 2584
        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0, // 2585
        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,                     // 2586
        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;                   // 2587
    return {                                                                                                           // 2588
        y: top,                                                                                                        // 2589
        x: left                                                                                                        // 2590
    };                                                                                                                 // 2591
};                                                                                                                     // 2592
/*\
 * Snap.getElementByPoint                                                                                              // 2594
 [ method ]                                                                                                            // 2595
 **                                                                                                                    // 2596
 * Returns you topmost element under given point.                                                                      // 2597
 **                                                                                                                    // 2598
 = (object) Snap element object                                                                                        // 2599
 - x (number) x coordinate from the top left corner of the window                                                      // 2600
 - y (number) y coordinate from the top left corner of the window                                                      // 2601
 > Usage                                                                                                               // 2602
 | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: "#f00"});                                                      // 2603
\*/                                                                                                                    // 2604
Snap.getElementByPoint = function (x, y) {                                                                             // 2605
    var paper = this,                                                                                                  // 2606
        svg = paper.canvas,                                                                                            // 2607
        target = glob.doc.elementFromPoint(x, y);                                                                      // 2608
    if (glob.win.opera && target.tagName == "svg") {                                                                   // 2609
        var so = getOffset(target),                                                                                    // 2610
            sr = target.createSVGRect();                                                                               // 2611
        sr.x = x - so.x;                                                                                               // 2612
        sr.y = y - so.y;                                                                                               // 2613
        sr.width = sr.height = 1;                                                                                      // 2614
        var hits = target.getIntersectionList(sr, null);                                                               // 2615
        if (hits.length) {                                                                                             // 2616
            target = hits[hits.length - 1];                                                                            // 2617
        }                                                                                                              // 2618
    }                                                                                                                  // 2619
    if (!target) {                                                                                                     // 2620
        return null;                                                                                                   // 2621
    }                                                                                                                  // 2622
    return wrap(target);                                                                                               // 2623
};                                                                                                                     // 2624
/*\
 * Snap.plugin                                                                                                         // 2626
 [ method ]                                                                                                            // 2627
 **                                                                                                                    // 2628
 * Let you write plugins. You pass in a function with five arguments, like this:                                       // 2629
 | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {                                                     // 2630
 |     Snap.newmethod = function () {};                                                                                // 2631
 |     Element.prototype.newmethod = function () {};                                                                   // 2632
 |     Paper.prototype.newmethod = function () {};                                                                     // 2633
 | });                                                                                                                 // 2634
 * Inside the function you have access to all main objects (and their                                                  // 2635
 * prototypes). This allow you to extend anything you want.                                                            // 2636
 **                                                                                                                    // 2637
 - f (function) your plugin body                                                                                       // 2638
\*/                                                                                                                    // 2639
Snap.plugin = function (f) {                                                                                           // 2640
    f(Snap, Element, Paper, glob, Fragment);                                                                           // 2641
};                                                                                                                     // 2642
glob.win.Snap = Snap;                                                                                                  // 2643
return Snap;                                                                                                           // 2644
}(window || this));                                                                                                    // 2645
                                                                                                                       // 2646
// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 2647
//                                                                                                                     // 2648
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 2649
// you may not use this file except in compliance with the License.                                                    // 2650
// You may obtain a copy of the License at                                                                             // 2651
//                                                                                                                     // 2652
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 2653
//                                                                                                                     // 2654
// Unless required by applicable law or agreed to in writing, software                                                 // 2655
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 2656
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2657
// See the License for the specific language governing permissions and                                                 // 2658
// limitations under the License.                                                                                      // 2659
Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {                                                          // 2660
    var elproto = Element.prototype,                                                                                   // 2661
        is = Snap.is,                                                                                                  // 2662
        Str = String,                                                                                                  // 2663
        unit2px = Snap._unit2px,                                                                                       // 2664
        $ = Snap._.$,                                                                                                  // 2665
        make = Snap._.make,                                                                                            // 2666
        getSomeDefs = Snap._.getSomeDefs,                                                                              // 2667
        has = "hasOwnProperty",                                                                                        // 2668
        wrap = Snap._.wrap;                                                                                            // 2669
    /*\
     * Element.getBBox                                                                                                 // 2671
     [ method ]                                                                                                        // 2672
     **                                                                                                                // 2673
     * Returns the bounding box descriptor for the given element                                                       // 2674
     **                                                                                                                // 2675
     = (object) bounding box descriptor:                                                                               // 2676
     o {                                                                                                               // 2677
     o     cx: (number) x of the center,                                                                               // 2678
     o     cy: (number) x of the center,                                                                               // 2679
     o     h: (number) height,                                                                                         // 2680
     o     height: (number) height,                                                                                    // 2681
     o     path: (string) path command for the box,                                                                    // 2682
     o     r0: (number) radius of a circle that fully encloses the box,                                                // 2683
     o     r1: (number) radius of the smallest circle that can be enclosed,                                            // 2684
     o     r2: (number) radius of the largest circle that can be enclosed,                                             // 2685
     o     vb: (string) box as a viewbox command,                                                                      // 2686
     o     w: (number) width,                                                                                          // 2687
     o     width: (number) width,                                                                                      // 2688
     o     x2: (number) x of the right side,                                                                           // 2689
     o     x: (number) x of the left side,                                                                             // 2690
     o     y2: (number) y of the bottom edge,                                                                          // 2691
     o     y: (number) y of the top edge                                                                               // 2692
     o }                                                                                                               // 2693
    \*/                                                                                                                // 2694
    elproto.getBBox = function (isWithoutTransform) {                                                                  // 2695
        if (!Snap.Matrix || !Snap.path) {                                                                              // 2696
            return this.node.getBBox();                                                                                // 2697
        }                                                                                                              // 2698
        var el = this,                                                                                                 // 2699
            m = new Snap.Matrix;                                                                                       // 2700
        if (el.removed) {                                                                                              // 2701
            return Snap._.box();                                                                                       // 2702
        }                                                                                                              // 2703
        while (el.type == "use") {                                                                                     // 2704
            if (!isWithoutTransform) {                                                                                 // 2705
                m = m.add(el.transform().localMatrix.translate(el.attr("x") || 0, el.attr("y") || 0));                 // 2706
            }                                                                                                          // 2707
            if (el.original) {                                                                                         // 2708
                el = el.original;                                                                                      // 2709
            } else {                                                                                                   // 2710
                var href = el.attr("xlink:href");                                                                      // 2711
                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf("#") + 1));        // 2712
            }                                                                                                          // 2713
        }                                                                                                              // 2714
        var _ = el._,                                                                                                  // 2715
            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;                                                // 2716
        try {                                                                                                          // 2717
            if (isWithoutTransform) {                                                                                  // 2718
                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());
                return Snap._.box(_.bboxwt);                                                                           // 2720
            } else {                                                                                                   // 2721
                el.realPath = pathfinder(el);                                                                          // 2722
                el.matrix = el.transform().localMatrix;                                                                // 2723
                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));                              // 2724
                return Snap._.box(_.bbox);                                                                             // 2725
            }                                                                                                          // 2726
        } catch (e) {                                                                                                  // 2727
            // Firefox doesn’t give you bbox of hidden element                                                         // 2728
            return Snap._.box();                                                                                       // 2729
        }                                                                                                              // 2730
    };                                                                                                                 // 2731
    var propString = function () {                                                                                     // 2732
        return this.string;                                                                                            // 2733
    };                                                                                                                 // 2734
    function extractTransform(el, tstr) {                                                                              // 2735
        if (tstr == null) {                                                                                            // 2736
            var doReturn = true;                                                                                       // 2737
            if (el.type == "linearGradient" || el.type == "radialGradient") {                                          // 2738
                tstr = el.node.getAttribute("gradientTransform");                                                      // 2739
            } else if (el.type == "pattern") {                                                                         // 2740
                tstr = el.node.getAttribute("patternTransform");                                                       // 2741
            } else {                                                                                                   // 2742
                tstr = el.node.getAttribute("transform");                                                              // 2743
            }                                                                                                          // 2744
            if (!tstr) {                                                                                               // 2745
                return new Snap.Matrix;                                                                                // 2746
            }                                                                                                          // 2747
            tstr = Snap._.svgTransform2string(tstr);                                                                   // 2748
        } else {                                                                                                       // 2749
            if (!Snap._.rgTransform.test(tstr)) {                                                                      // 2750
                tstr = Snap._.svgTransform2string(tstr);                                                               // 2751
            } else {                                                                                                   // 2752
                tstr = Str(tstr).replace(/\.{3}|\u2026/g, el._.transform || "");                                       // 2753
            }                                                                                                          // 2754
            if (is(tstr, "array")) {                                                                                   // 2755
                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);                                          // 2756
            }                                                                                                          // 2757
            el._.transform = tstr;                                                                                     // 2758
        }                                                                                                              // 2759
        var m = Snap._.transform2matrix(tstr, el.getBBox(1));                                                          // 2760
        if (doReturn) {                                                                                                // 2761
            return m;                                                                                                  // 2762
        } else {                                                                                                       // 2763
            el.matrix = m;                                                                                             // 2764
        }                                                                                                              // 2765
    }                                                                                                                  // 2766
    /*\
     * Element.transform                                                                                               // 2768
     [ method ]                                                                                                        // 2769
     **                                                                                                                // 2770
     * Gets or sets transformation of the element                                                                      // 2771
     **                                                                                                                // 2772
     - tstr (string) transform string in Snap or SVG format                                                            // 2773
     = (Element) the current element                                                                                   // 2774
     * or                                                                                                              // 2775
     = (object) transformation descriptor:                                                                             // 2776
     o {                                                                                                               // 2777
     o     string (string) transform string,                                                                           // 2778
     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,                      // 2779
     o     localMatrix (Matrix) matrix of transformations applied only to the element,                                 // 2780
     o     diffMatrix (Matrix) matrix of difference between global and local transformations,                          // 2781
     o     global (string) global transformation as string,                                                            // 2782
     o     local (string) local transformation as string,                                                              // 2783
     o     toString (function) returns `string` property                                                               // 2784
     o }                                                                                                               // 2785
    \*/                                                                                                                // 2786
    elproto.transform = function (tstr) {                                                                              // 2787
        var _ = this._;                                                                                                // 2788
        if (tstr == null) {                                                                                            // 2789
            var papa = this,                                                                                           // 2790
                global = new Snap.Matrix(this.node.getCTM()),                                                          // 2791
                local = extractTransform(this),                                                                        // 2792
                ms = [local],                                                                                          // 2793
                m = new Snap.Matrix,                                                                                   // 2794
                i,                                                                                                     // 2795
                localString = local.toTransformString(),                                                               // 2796
                string = Str(local) == Str(this.matrix) ?                                                              // 2797
                            Str(_.transform) : localString;                                                            // 2798
            while (papa.type != "svg" && (papa = papa.parent())) {                                                     // 2799
                ms.push(extractTransform(papa));                                                                       // 2800
            }                                                                                                          // 2801
            i = ms.length;                                                                                             // 2802
            while (i--) {                                                                                              // 2803
                m.add(ms[i]);                                                                                          // 2804
            }                                                                                                          // 2805
            return {                                                                                                   // 2806
                string: string,                                                                                        // 2807
                globalMatrix: global,                                                                                  // 2808
                totalMatrix: m,                                                                                        // 2809
                localMatrix: local,                                                                                    // 2810
                diffMatrix: global.clone().add(local.invert()),                                                        // 2811
                global: global.toTransformString(),                                                                    // 2812
                total: m.toTransformString(),                                                                          // 2813
                local: localString,                                                                                    // 2814
                toString: propString                                                                                   // 2815
            };                                                                                                         // 2816
        }                                                                                                              // 2817
        if (tstr instanceof Snap.Matrix) {                                                                             // 2818
            this.matrix = tstr;                                                                                        // 2819
            this._.transform = tstr.toTransformString();                                                               // 2820
        } else {                                                                                                       // 2821
            extractTransform(this, tstr);                                                                              // 2822
        }                                                                                                              // 2823
                                                                                                                       // 2824
        if (this.node) {                                                                                               // 2825
            if (this.type == "linearGradient" || this.type == "radialGradient") {                                      // 2826
                $(this.node, {gradientTransform: this.matrix});                                                        // 2827
            } else if (this.type == "pattern") {                                                                       // 2828
                $(this.node, {patternTransform: this.matrix});                                                         // 2829
            } else {                                                                                                   // 2830
                $(this.node, {transform: this.matrix});                                                                // 2831
            }                                                                                                          // 2832
        }                                                                                                              // 2833
                                                                                                                       // 2834
        return this;                                                                                                   // 2835
    };                                                                                                                 // 2836
    /*\
     * Element.parent                                                                                                  // 2838
     [ method ]                                                                                                        // 2839
     **                                                                                                                // 2840
     * Returns the element's parent                                                                                    // 2841
     **                                                                                                                // 2842
     = (Element) the parent element                                                                                    // 2843
    \*/                                                                                                                // 2844
    elproto.parent = function () {                                                                                     // 2845
        return wrap(this.node.parentNode);                                                                             // 2846
    };                                                                                                                 // 2847
    /*\
     * Element.append                                                                                                  // 2849
     [ method ]                                                                                                        // 2850
     **                                                                                                                // 2851
     * Appends the given element to current one                                                                        // 2852
     **                                                                                                                // 2853
     - el (Element|Set) element to append                                                                              // 2854
     = (Element) the parent element                                                                                    // 2855
    \*/                                                                                                                // 2856
    /*\
     * Element.add                                                                                                     // 2858
     [ method ]                                                                                                        // 2859
     **                                                                                                                // 2860
     * See @Element.append                                                                                             // 2861
    \*/                                                                                                                // 2862
    elproto.append = elproto.add = function (el) {                                                                     // 2863
        if (el) {                                                                                                      // 2864
            if (el.type == "set") {                                                                                    // 2865
                var it = this;                                                                                         // 2866
                el.forEach(function (el) {                                                                             // 2867
                    it.add(el);                                                                                        // 2868
                });                                                                                                    // 2869
                return this;                                                                                           // 2870
            }                                                                                                          // 2871
            el = wrap(el);                                                                                             // 2872
            this.node.appendChild(el.node);                                                                            // 2873
            el.paper = this.paper;                                                                                     // 2874
        }                                                                                                              // 2875
        return this;                                                                                                   // 2876
    };                                                                                                                 // 2877
    /*\
     * Element.appendTo                                                                                                // 2879
     [ method ]                                                                                                        // 2880
     **                                                                                                                // 2881
     * Appends the current element to the given one                                                                    // 2882
     **                                                                                                                // 2883
     - el (Element) parent element to append to                                                                        // 2884
     = (Element) the child element                                                                                     // 2885
    \*/                                                                                                                // 2886
    elproto.appendTo = function (el) {                                                                                 // 2887
        if (el) {                                                                                                      // 2888
            el = wrap(el);                                                                                             // 2889
            el.append(this);                                                                                           // 2890
        }                                                                                                              // 2891
        return this;                                                                                                   // 2892
    };                                                                                                                 // 2893
    /*\
     * Element.prepend                                                                                                 // 2895
     [ method ]                                                                                                        // 2896
     **                                                                                                                // 2897
     * Prepends the given element to the current one                                                                   // 2898
     **                                                                                                                // 2899
     - el (Element) element to prepend                                                                                 // 2900
     = (Element) the parent element                                                                                    // 2901
    \*/                                                                                                                // 2902
    elproto.prepend = function (el) {                                                                                  // 2903
        if (el) {                                                                                                      // 2904
            if (el.type == "set") {                                                                                    // 2905
                var it = this,                                                                                         // 2906
                    first;                                                                                             // 2907
                el.forEach(function (el) {                                                                             // 2908
                    if (first) {                                                                                       // 2909
                        first.after(el);                                                                               // 2910
                    } else {                                                                                           // 2911
                        it.prepend(el);                                                                                // 2912
                    }                                                                                                  // 2913
                    first = el;                                                                                        // 2914
                });                                                                                                    // 2915
                return this;                                                                                           // 2916
            }                                                                                                          // 2917
            el = wrap(el);                                                                                             // 2918
            var parent = el.parent();                                                                                  // 2919
            this.node.insertBefore(el.node, this.node.firstChild);                                                     // 2920
            this.add && this.add();                                                                                    // 2921
            el.paper = this.paper;                                                                                     // 2922
            this.parent() && this.parent().add();                                                                      // 2923
            parent && parent.add();                                                                                    // 2924
        }                                                                                                              // 2925
        return this;                                                                                                   // 2926
    };                                                                                                                 // 2927
    /*\
     * Element.prependTo                                                                                               // 2929
     [ method ]                                                                                                        // 2930
     **                                                                                                                // 2931
     * Prepends the current element to the given one                                                                   // 2932
     **                                                                                                                // 2933
     - el (Element) parent element to prepend to                                                                       // 2934
     = (Element) the child element                                                                                     // 2935
    \*/                                                                                                                // 2936
    elproto.prependTo = function (el) {                                                                                // 2937
        el = wrap(el);                                                                                                 // 2938
        el.prepend(this);                                                                                              // 2939
        return this;                                                                                                   // 2940
    };                                                                                                                 // 2941
    /*\
     * Element.before                                                                                                  // 2943
     [ method ]                                                                                                        // 2944
     **                                                                                                                // 2945
     * Inserts given element before the current one                                                                    // 2946
     **                                                                                                                // 2947
     - el (Element) element to insert                                                                                  // 2948
     = (Element) the parent element                                                                                    // 2949
    \*/                                                                                                                // 2950
    elproto.before = function (el) {                                                                                   // 2951
        if (el.type == "set") {                                                                                        // 2952
            var it = this;                                                                                             // 2953
            el.forEach(function (el) {                                                                                 // 2954
                var parent = el.parent();                                                                              // 2955
                it.node.parentNode.insertBefore(el.node, it.node);                                                     // 2956
                parent && parent.add();                                                                                // 2957
            });                                                                                                        // 2958
            this.parent().add();                                                                                       // 2959
            return this;                                                                                               // 2960
        }                                                                                                              // 2961
        el = wrap(el);                                                                                                 // 2962
        var parent = el.parent();                                                                                      // 2963
        this.node.parentNode.insertBefore(el.node, this.node);                                                         // 2964
        this.parent() && this.parent().add();                                                                          // 2965
        parent && parent.add();                                                                                        // 2966
        el.paper = this.paper;                                                                                         // 2967
        return this;                                                                                                   // 2968
    };                                                                                                                 // 2969
    /*\
     * Element.after                                                                                                   // 2971
     [ method ]                                                                                                        // 2972
     **                                                                                                                // 2973
     * Inserts given element after the current one                                                                     // 2974
     **                                                                                                                // 2975
     - el (Element) element to insert                                                                                  // 2976
     = (Element) the parent element                                                                                    // 2977
    \*/                                                                                                                // 2978
    elproto.after = function (el) {                                                                                    // 2979
        el = wrap(el);                                                                                                 // 2980
        var parent = el.parent();                                                                                      // 2981
        if (this.node.nextSibling) {                                                                                   // 2982
            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);                                         // 2983
        } else {                                                                                                       // 2984
            this.node.parentNode.appendChild(el.node);                                                                 // 2985
        }                                                                                                              // 2986
        this.parent() && this.parent().add();                                                                          // 2987
        parent && parent.add();                                                                                        // 2988
        el.paper = this.paper;                                                                                         // 2989
        return this;                                                                                                   // 2990
    };                                                                                                                 // 2991
    /*\
     * Element.insertBefore                                                                                            // 2993
     [ method ]                                                                                                        // 2994
     **                                                                                                                // 2995
     * Inserts the element after the given one                                                                         // 2996
     **                                                                                                                // 2997
     - el (Element) element next to whom insert to                                                                     // 2998
     = (Element) the parent element                                                                                    // 2999
    \*/                                                                                                                // 3000
    elproto.insertBefore = function (el) {                                                                             // 3001
        el = wrap(el);                                                                                                 // 3002
        var parent = this.parent();                                                                                    // 3003
        el.node.parentNode.insertBefore(this.node, el.node);                                                           // 3004
        this.paper = el.paper;                                                                                         // 3005
        parent && parent.add();                                                                                        // 3006
        el.parent() && el.parent().add();                                                                              // 3007
        return this;                                                                                                   // 3008
    };                                                                                                                 // 3009
    /*\
     * Element.insertAfter                                                                                             // 3011
     [ method ]                                                                                                        // 3012
     **                                                                                                                // 3013
     * Inserts the element after the given one                                                                         // 3014
     **                                                                                                                // 3015
     - el (Element) element next to whom insert to                                                                     // 3016
     = (Element) the parent element                                                                                    // 3017
    \*/                                                                                                                // 3018
    elproto.insertAfter = function (el) {                                                                              // 3019
        el = wrap(el);                                                                                                 // 3020
        var parent = this.parent();                                                                                    // 3021
        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);                                               // 3022
        this.paper = el.paper;                                                                                         // 3023
        parent && parent.add();                                                                                        // 3024
        el.parent() && el.parent().add();                                                                              // 3025
        return this;                                                                                                   // 3026
    };                                                                                                                 // 3027
    /*\
     * Element.remove                                                                                                  // 3029
     [ method ]                                                                                                        // 3030
     **                                                                                                                // 3031
     * Removes element from the DOM                                                                                    // 3032
     = (Element) the detached element                                                                                  // 3033
    \*/                                                                                                                // 3034
    elproto.remove = function () {                                                                                     // 3035
        var parent = this.parent();                                                                                    // 3036
        this.node.parentNode && this.node.parentNode.removeChild(this.node);                                           // 3037
        delete this.paper;                                                                                             // 3038
        this.removed = true;                                                                                           // 3039
        parent && parent.add();                                                                                        // 3040
        return this;                                                                                                   // 3041
    };                                                                                                                 // 3042
    /*\
     * Element.select                                                                                                  // 3044
     [ method ]                                                                                                        // 3045
     **                                                                                                                // 3046
     * Gathers the nested @Element matching the given set of CSS selectors                                             // 3047
     **                                                                                                                // 3048
     - query (string) CSS selector                                                                                     // 3049
     = (Element) result of query selection                                                                             // 3050
    \*/                                                                                                                // 3051
    elproto.select = function (query) {                                                                                // 3052
        return wrap(this.node.querySelector(query));                                                                   // 3053
    };                                                                                                                 // 3054
    /*\
     * Element.selectAll                                                                                               // 3056
     [ method ]                                                                                                        // 3057
     **                                                                                                                // 3058
     * Gathers nested @Element objects matching the given set of CSS selectors                                         // 3059
     **                                                                                                                // 3060
     - query (string) CSS selector                                                                                     // 3061
     = (Set|array) result of query selection                                                                           // 3062
    \*/                                                                                                                // 3063
    elproto.selectAll = function (query) {                                                                             // 3064
        var nodelist = this.node.querySelectorAll(query),                                                              // 3065
            set = (Snap.set || Array)();                                                                               // 3066
        for (var i = 0; i < nodelist.length; i++) {                                                                    // 3067
            set.push(wrap(nodelist[i]));                                                                               // 3068
        }                                                                                                              // 3069
        return set;                                                                                                    // 3070
    };                                                                                                                 // 3071
    /*\
     * Element.asPX                                                                                                    // 3073
     [ method ]                                                                                                        // 3074
     **                                                                                                                // 3075
     * Returns given attribute of the element as a `px` value (not %, em, etc.)                                        // 3076
     **                                                                                                                // 3077
     - attr (string) attribute name                                                                                    // 3078
     - value (string) #optional attribute value                                                                        // 3079
     = (Element) result of query selection                                                                             // 3080
    \*/                                                                                                                // 3081
    elproto.asPX = function (attr, value) {                                                                            // 3082
        if (value == null) {                                                                                           // 3083
            value = this.attr(attr);                                                                                   // 3084
        }                                                                                                              // 3085
        return +unit2px(this, attr, value);                                                                            // 3086
    };                                                                                                                 // 3087
    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.
    /*\
     * Element.use                                                                                                     // 3090
     [ method ]                                                                                                        // 3091
     **                                                                                                                // 3092
     * Creates a `<use>` element linked to the current element                                                         // 3093
     **                                                                                                                // 3094
     = (Element) the `<use>` element                                                                                   // 3095
    \*/                                                                                                                // 3096
    elproto.use = function () {                                                                                        // 3097
        var use,                                                                                                       // 3098
            id = this.node.id;                                                                                         // 3099
        if (!id) {                                                                                                     // 3100
            id = this.id;                                                                                              // 3101
            $(this.node, {                                                                                             // 3102
                id: id                                                                                                 // 3103
            });                                                                                                        // 3104
        }                                                                                                              // 3105
        if (this.type == "linearGradient" || this.type == "radialGradient" ||                                          // 3106
            this.type == "pattern") {                                                                                  // 3107
            use = make(this.type, this.node.parentNode);                                                               // 3108
        } else {                                                                                                       // 3109
            use = make("use", this.node.parentNode);                                                                   // 3110
        }                                                                                                              // 3111
        $(use.node, {                                                                                                  // 3112
            "xlink:href": "#" + id                                                                                     // 3113
        });                                                                                                            // 3114
        use.original = this;                                                                                           // 3115
        return use;                                                                                                    // 3116
    };                                                                                                                 // 3117
    function fixids(el) {                                                                                              // 3118
        var els = el.selectAll("*"),                                                                                   // 3119
            it,                                                                                                        // 3120
            url = /^\s*url\(("|'|)(.*)\1\)\s*$/,                                                                       // 3121
            ids = [],                                                                                                  // 3122
            uses = {};                                                                                                 // 3123
        function urltest(it, name) {                                                                                   // 3124
            var val = $(it.node, name);                                                                                // 3125
            val = val && val.match(url);                                                                               // 3126
            val = val && val[2];                                                                                       // 3127
            if (val && val.charAt() == "#") {                                                                          // 3128
                val = val.substring(1);                                                                                // 3129
            } else {                                                                                                   // 3130
                return;                                                                                                // 3131
            }                                                                                                          // 3132
            if (val) {                                                                                                 // 3133
                uses[val] = (uses[val] || []).concat(function (id) {                                                   // 3134
                    var attr = {};                                                                                     // 3135
                    attr[name] = URL(id);                                                                              // 3136
                    $(it.node, attr);                                                                                  // 3137
                });                                                                                                    // 3138
            }                                                                                                          // 3139
        }                                                                                                              // 3140
        function linktest(it) {                                                                                        // 3141
            var val = $(it.node, "xlink:href");                                                                        // 3142
            if (val && val.charAt() == "#") {                                                                          // 3143
                val = val.substring(1);                                                                                // 3144
            } else {                                                                                                   // 3145
                return;                                                                                                // 3146
            }                                                                                                          // 3147
            if (val) {                                                                                                 // 3148
                uses[val] = (uses[val] || []).concat(function (id) {                                                   // 3149
                    it.attr("xlink:href", "#" + id);                                                                   // 3150
                });                                                                                                    // 3151
            }                                                                                                          // 3152
        }                                                                                                              // 3153
        for (var i = 0, ii = els.length; i < ii; i++) {                                                                // 3154
            it = els[i];                                                                                               // 3155
            urltest(it, "fill");                                                                                       // 3156
            urltest(it, "stroke");                                                                                     // 3157
            urltest(it, "filter");                                                                                     // 3158
            urltest(it, "mask");                                                                                       // 3159
            urltest(it, "clip-path");                                                                                  // 3160
            linktest(it);                                                                                              // 3161
            var oldid = $(it.node, "id");                                                                              // 3162
            if (oldid) {                                                                                               // 3163
                $(it.node, {id: it.id});                                                                               // 3164
                ids.push({                                                                                             // 3165
                    old: oldid,                                                                                        // 3166
                    id: it.id                                                                                          // 3167
                });                                                                                                    // 3168
            }                                                                                                          // 3169
        }                                                                                                              // 3170
        for (i = 0, ii = ids.length; i < ii; i++) {                                                                    // 3171
            var fs = uses[ids[i].old];                                                                                 // 3172
            if (fs) {                                                                                                  // 3173
                for (var j = 0, jj = fs.length; j < jj; j++) {                                                         // 3174
                    fs[j](ids[i].id);                                                                                  // 3175
                }                                                                                                      // 3176
            }                                                                                                          // 3177
        }                                                                                                              // 3178
    }                                                                                                                  // 3179
    /*\
     * Element.clone                                                                                                   // 3181
     [ method ]                                                                                                        // 3182
     **                                                                                                                // 3183
     * Creates a clone of the element and inserts it after the element                                                 // 3184
     **                                                                                                                // 3185
     = (Element) the clone                                                                                             // 3186
    \*/                                                                                                                // 3187
    elproto.clone = function () {                                                                                      // 3188
        var clone = wrap(this.node.cloneNode(true));                                                                   // 3189
        if ($(clone.node, "id")) {                                                                                     // 3190
            $(clone.node, {id: clone.id});                                                                             // 3191
        }                                                                                                              // 3192
        fixids(clone);                                                                                                 // 3193
        clone.insertAfter(this);                                                                                       // 3194
        return clone;                                                                                                  // 3195
    };                                                                                                                 // 3196
    /*\
     * Element.toDefs                                                                                                  // 3198
     [ method ]                                                                                                        // 3199
     **                                                                                                                // 3200
     * Moves element to the shared `<defs>` area                                                                       // 3201
     **                                                                                                                // 3202
     = (Element) the element                                                                                           // 3203
    \*/                                                                                                                // 3204
    elproto.toDefs = function () {                                                                                     // 3205
        var defs = getSomeDefs(this);                                                                                  // 3206
        defs.appendChild(this.node);                                                                                   // 3207
        return this;                                                                                                   // 3208
    };                                                                                                                 // 3209
    /*\
     * Element.toPattern                                                                                               // 3211
     [ method ]                                                                                                        // 3212
     **                                                                                                                // 3213
     * Creates a `<pattern>` element from the current element                                                          // 3214
     **                                                                                                                // 3215
     * To create a pattern you have to specify the pattern rect:                                                       // 3216
     - x (string|number)                                                                                               // 3217
     - y (string|number)                                                                                               // 3218
     - width (string|number)                                                                                           // 3219
     - height (string|number)                                                                                          // 3220
     = (Element) the `<pattern>` element                                                                               // 3221
     * You can use pattern later on as an argument for `fill` attribute:                                               // 3222
     | var p = paper.path("M10-5-10,15M15,0,0,15M0-5-20,15").attr({                                                    // 3223
     |         fill: "none",                                                                                           // 3224
     |         stroke: "#bada55",                                                                                      // 3225
     |         strokeWidth: 5                                                                                          // 3226
     |     }).pattern(0, 0, 10, 10),                                                                                   // 3227
     |     c = paper.circle(200, 200, 100);                                                                            // 3228
     | c.attr({                                                                                                        // 3229
     |     fill: p                                                                                                     // 3230
     | });                                                                                                             // 3231
    \*/                                                                                                                // 3232
    elproto.pattern = elproto.toPattern = function (x, y, width, height) {                                             // 3233
        var p = make("pattern", getSomeDefs(this));                                                                    // 3234
        if (x == null) {                                                                                               // 3235
            x = this.getBBox();                                                                                        // 3236
        }                                                                                                              // 3237
        if (is(x, "object") && "x" in x) {                                                                             // 3238
            y = x.y;                                                                                                   // 3239
            width = x.width;                                                                                           // 3240
            height = x.height;                                                                                         // 3241
            x = x.x;                                                                                                   // 3242
        }                                                                                                              // 3243
        $(p.node, {                                                                                                    // 3244
            x: x,                                                                                                      // 3245
            y: y,                                                                                                      // 3246
            width: width,                                                                                              // 3247
            height: height,                                                                                            // 3248
            patternUnits: "userSpaceOnUse",                                                                            // 3249
            id: p.id,                                                                                                  // 3250
            viewBox: [x, y, width, height].join(" ")                                                                   // 3251
        });                                                                                                            // 3252
        p.node.appendChild(this.node);                                                                                 // 3253
        return p;                                                                                                      // 3254
    };                                                                                                                 // 3255
// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.
// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?
    /*\
     * Element.marker                                                                                                  // 3259
     [ method ]                                                                                                        // 3260
     **                                                                                                                // 3261
     * Creates a `<marker>` element from the current element                                                           // 3262
     **                                                                                                                // 3263
     * To create a marker you have to specify the bounding rect and reference point:                                   // 3264
     - x (number)                                                                                                      // 3265
     - y (number)                                                                                                      // 3266
     - width (number)                                                                                                  // 3267
     - height (number)                                                                                                 // 3268
     - refX (number)                                                                                                   // 3269
     - refY (number)                                                                                                   // 3270
     = (Element) the `<marker>` element                                                                                // 3271
     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.
    \*/                                                                                                                // 3273
    // TODO add usage for markers                                                                                      // 3274
    elproto.marker = function (x, y, width, height, refX, refY) {                                                      // 3275
        var p = make("marker", getSomeDefs(this));                                                                     // 3276
        if (x == null) {                                                                                               // 3277
            x = this.getBBox();                                                                                        // 3278
        }                                                                                                              // 3279
        if (is(x, "object") && "x" in x) {                                                                             // 3280
            y = x.y;                                                                                                   // 3281
            width = x.width;                                                                                           // 3282
            height = x.height;                                                                                         // 3283
            refX = x.refX || x.cx;                                                                                     // 3284
            refY = x.refY || x.cy;                                                                                     // 3285
            x = x.x;                                                                                                   // 3286
        }                                                                                                              // 3287
        $(p.node, {                                                                                                    // 3288
            viewBox: [x, y, width, height].join(" "),                                                                  // 3289
            markerWidth: width,                                                                                        // 3290
            markerHeight: height,                                                                                      // 3291
            orient: "auto",                                                                                            // 3292
            refX: refX || 0,                                                                                           // 3293
            refY: refY || 0,                                                                                           // 3294
            id: p.id                                                                                                   // 3295
        });                                                                                                            // 3296
        p.node.appendChild(this.node);                                                                                 // 3297
        return p;                                                                                                      // 3298
    };                                                                                                                 // 3299
    // animation                                                                                                       // 3300
    function slice(from, to, f) {                                                                                      // 3301
        return function (arr) {                                                                                        // 3302
            var res = arr.slice(from, to);                                                                             // 3303
            if (res.length == 1) {                                                                                     // 3304
                res = res[0];                                                                                          // 3305
            }                                                                                                          // 3306
            return f ? f(res) : res;                                                                                   // 3307
        };                                                                                                             // 3308
    }                                                                                                                  // 3309
    var Animation = function (attr, ms, easing, callback) {                                                            // 3310
        if (typeof easing == "function" && !easing.length) {                                                           // 3311
            callback = easing;                                                                                         // 3312
            easing = mina.linear;                                                                                      // 3313
        }                                                                                                              // 3314
        this.attr = attr;                                                                                              // 3315
        this.dur = ms;                                                                                                 // 3316
        easing && (this.easing = easing);                                                                              // 3317
        callback && (this.callback = callback);                                                                        // 3318
    };                                                                                                                 // 3319
    Snap._.Animation = Animation;                                                                                      // 3320
    /*\
     * Snap.animation                                                                                                  // 3322
     [ method ]                                                                                                        // 3323
     **                                                                                                                // 3324
     * Creates an animation object                                                                                     // 3325
     **                                                                                                                // 3326
     - attr (object) attributes of final destination                                                                   // 3327
     - duration (number) duration of the animation, in milliseconds                                                    // 3328
     - easing (function) #optional one of easing functions of @mina or custom one                                      // 3329
     - callback (function) #optional callback function that fires when animation ends                                  // 3330
     = (object) animation object                                                                                       // 3331
    \*/                                                                                                                // 3332
    Snap.animation = function (attr, ms, easing, callback) {                                                           // 3333
        return new Animation(attr, ms, easing, callback);                                                              // 3334
    };                                                                                                                 // 3335
    /*\
     * Element.inAnim                                                                                                  // 3337
     [ method ]                                                                                                        // 3338
     **                                                                                                                // 3339
     * Returns a set of animations that may be able to manipulate the current element                                  // 3340
     **                                                                                                                // 3341
     = (object) in format:                                                                                             // 3342
     o {                                                                                                               // 3343
     o     anim (object) animation object,                                                                             // 3344
     o     mina (object) @mina object,                                                                                 // 3345
     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,                     // 3346
     o     status (function) gets or sets the status of the animation,                                                 // 3347
     o     stop (function) stops the animation                                                                         // 3348
     o }                                                                                                               // 3349
    \*/                                                                                                                // 3350
    elproto.inAnim = function () {                                                                                     // 3351
        var el = this,                                                                                                 // 3352
            res = [];                                                                                                  // 3353
        for (var id in el.anims) if (el.anims[has](id)) {                                                              // 3354
            (function (a) {                                                                                            // 3355
                res.push({                                                                                             // 3356
                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),                                       // 3357
                    mina: a,                                                                                           // 3358
                    curStatus: a.status(),                                                                             // 3359
                    status: function (val) {                                                                           // 3360
                        return a.status(val);                                                                          // 3361
                    },                                                                                                 // 3362
                    stop: function () {                                                                                // 3363
                        a.stop();                                                                                      // 3364
                    }                                                                                                  // 3365
                });                                                                                                    // 3366
            }(el.anims[id]));                                                                                          // 3367
        }                                                                                                              // 3368
        return res;                                                                                                    // 3369
    };                                                                                                                 // 3370
    /*\
     * Snap.animate                                                                                                    // 3372
     [ method ]                                                                                                        // 3373
     **                                                                                                                // 3374
     * Runs generic animation of one number into another with a caring function                                        // 3375
     **                                                                                                                // 3376
     - from (number|array) number or array of numbers                                                                  // 3377
     - to (number|array) number or array of numbers                                                                    // 3378
     - setter (function) caring function that accepts one number argument                                              // 3379
     - duration (number) duration, in milliseconds                                                                     // 3380
     - easing (function) #optional easing function from @mina or custom                                                // 3381
     - callback (function) #optional callback function to execute when animation ends                                  // 3382
     = (object) animation object in @mina format                                                                       // 3383
     o {                                                                                                               // 3384
     o     id (string) animation id, consider it read-only,                                                            // 3385
     o     duration (function) gets or sets the duration of the animation,                                             // 3386
     o     easing (function) easing,                                                                                   // 3387
     o     speed (function) gets or sets the speed of the animation,                                                   // 3388
     o     status (function) gets or sets the status of the animation,                                                 // 3389
     o     stop (function) stops the animation                                                                         // 3390
     o }                                                                                                               // 3391
     | var rect = Snap().rect(0, 0, 10, 10);                                                                           // 3392
     | Snap.animate(0, 10, function (val) {                                                                            // 3393
     |     rect.attr({                                                                                                 // 3394
     |         x: val                                                                                                  // 3395
     |     });                                                                                                         // 3396
     | }, 1000);                                                                                                       // 3397
     | // in given context is equivalent to                                                                            // 3398
     | rect.animate({x: 10}, 1000);                                                                                    // 3399
    \*/                                                                                                                // 3400
    Snap.animate = function (from, to, setter, ms, easing, callback) {                                                 // 3401
        if (typeof easing == "function" && !easing.length) {                                                           // 3402
            callback = easing;                                                                                         // 3403
            easing = mina.linear;                                                                                      // 3404
        }                                                                                                              // 3405
        var now = mina.time(),                                                                                         // 3406
            anim = mina(from, to, now, now + ms, mina.time, setter, easing);                                           // 3407
        callback && eve.once("mina.finish." + anim.id, callback);                                                      // 3408
        return anim;                                                                                                   // 3409
    };                                                                                                                 // 3410
    /*\
     * Element.stop                                                                                                    // 3412
     [ method ]                                                                                                        // 3413
     **                                                                                                                // 3414
     * Stops all the animations for the current element                                                                // 3415
     **                                                                                                                // 3416
     = (Element) the current element                                                                                   // 3417
    \*/                                                                                                                // 3418
    elproto.stop = function () {                                                                                       // 3419
        var anims = this.inAnim();                                                                                     // 3420
        for (var i = 0, ii = anims.length; i < ii; i++) {                                                              // 3421
            anims[i].stop();                                                                                           // 3422
        }                                                                                                              // 3423
        return this;                                                                                                   // 3424
    };                                                                                                                 // 3425
    /*\
     * Element.animate                                                                                                 // 3427
     [ method ]                                                                                                        // 3428
     **                                                                                                                // 3429
     * Animates the given attributes of the element                                                                    // 3430
     **                                                                                                                // 3431
     - attrs (object) key-value pairs of destination attributes                                                        // 3432
     - duration (number) duration of the animation in milliseconds                                                     // 3433
     - easing (function) #optional easing function from @mina or custom                                                // 3434
     - callback (function) #optional callback function that executes when the animation ends                           // 3435
     = (Element) the current element                                                                                   // 3436
    \*/                                                                                                                // 3437
    elproto.animate = function (attrs, ms, easing, callback) {                                                         // 3438
        if (typeof easing == "function" && !easing.length) {                                                           // 3439
            callback = easing;                                                                                         // 3440
            easing = mina.linear;                                                                                      // 3441
        }                                                                                                              // 3442
        if (attrs instanceof Animation) {                                                                              // 3443
            callback = attrs.callback;                                                                                 // 3444
            easing = attrs.easing;                                                                                     // 3445
            ms = attrs.dur;                                                                                            // 3446
            attrs = attrs.attr;                                                                                        // 3447
        }                                                                                                              // 3448
        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,                                                        // 3449
            el = this;                                                                                                 // 3450
        for (var key in attrs) if (attrs[has](key)) {                                                                  // 3451
            if (el.equal) {                                                                                            // 3452
                eq = el.equal(key, Str(attrs[key]));                                                                   // 3453
                from = eq.from;                                                                                        // 3454
                to = eq.to;                                                                                            // 3455
                f = eq.f;                                                                                              // 3456
            } else {                                                                                                   // 3457
                from = +el.attr(key);                                                                                  // 3458
                to = +attrs[key];                                                                                      // 3459
            }                                                                                                          // 3460
            var len = is(from, "array") ? from.length : 1;                                                             // 3461
            keys[key] = slice(fkeys.length, fkeys.length + len, f);                                                    // 3462
            fkeys = fkeys.concat(from);                                                                                // 3463
            tkeys = tkeys.concat(to);                                                                                  // 3464
        }                                                                                                              // 3465
        var now = mina.time(),                                                                                         // 3466
            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {                                       // 3467
                var attr = {};                                                                                         // 3468
                for (var key in keys) if (keys[has](key)) {                                                            // 3469
                    attr[key] = keys[key](val);                                                                        // 3470
                }                                                                                                      // 3471
                el.attr(attr);                                                                                         // 3472
            }, easing);                                                                                                // 3473
        el.anims[anim.id] = anim;                                                                                      // 3474
        anim._attrs = attrs;                                                                                           // 3475
        anim._callback = callback;                                                                                     // 3476
        eve("snap.animcreated." + el.id, anim);                                                                        // 3477
        eve.once("mina.finish." + anim.id, function () {                                                               // 3478
            delete el.anims[anim.id];                                                                                  // 3479
            callback && callback.call(el);                                                                             // 3480
        });                                                                                                            // 3481
        eve.once("mina.stop." + anim.id, function () {                                                                 // 3482
            delete el.anims[anim.id];                                                                                  // 3483
        });                                                                                                            // 3484
        return el;                                                                                                     // 3485
    };                                                                                                                 // 3486
    var eldata = {};                                                                                                   // 3487
    /*\
     * Element.data                                                                                                    // 3489
     [ method ]                                                                                                        // 3490
     **                                                                                                                // 3491
     * Adds or retrieves given value associated with given key. (Don’t confuse                                         // 3492
     * with `data-` attributes)                                                                                        // 3493
     *                                                                                                                 // 3494
     * See also @Element.removeData                                                                                    // 3495
     - key (string) key to store data                                                                                  // 3496
     - value (any) #optional value to store                                                                            // 3497
     = (object) @Element                                                                                               // 3498
     * or, if value is not specified:                                                                                  // 3499
     = (any) value                                                                                                     // 3500
     > Usage                                                                                                           // 3501
     | for (var i = 0, i < 5, i++) {                                                                                   // 3502
     |     paper.circle(10 + 15 * i, 10, 10)                                                                           // 3503
     |          .attr({fill: "#000"})                                                                                  // 3504
     |          .data("i", i)                                                                                          // 3505
     |          .click(function () {                                                                                   // 3506
     |             alert(this.data("i"));                                                                              // 3507
     |          });                                                                                                    // 3508
     | }                                                                                                               // 3509
    \*/                                                                                                                // 3510
    elproto.data = function (key, value) {                                                                             // 3511
        var data = eldata[this.id] = eldata[this.id] || {};                                                            // 3512
        if (arguments.length == 0){                                                                                    // 3513
            eve("snap.data.get." + this.id, this, data, null);                                                         // 3514
            return data;                                                                                               // 3515
        }                                                                                                              // 3516
        if (arguments.length == 1) {                                                                                   // 3517
            if (Snap.is(key, "object")) {                                                                              // 3518
                for (var i in key) if (key[has](i)) {                                                                  // 3519
                    this.data(i, key[i]);                                                                              // 3520
                }                                                                                                      // 3521
                return this;                                                                                           // 3522
            }                                                                                                          // 3523
            eve("snap.data.get." + this.id, this, data[key], key);                                                     // 3524
            return data[key];                                                                                          // 3525
        }                                                                                                              // 3526
        data[key] = value;                                                                                             // 3527
        eve("snap.data.set." + this.id, this, value, key);                                                             // 3528
        return this;                                                                                                   // 3529
    };                                                                                                                 // 3530
    /*\
     * Element.removeData                                                                                              // 3532
     [ method ]                                                                                                        // 3533
     **                                                                                                                // 3534
     * Removes value associated with an element by given key.                                                          // 3535
     * If key is not provided, removes all the data of the element.                                                    // 3536
     - key (string) #optional key                                                                                      // 3537
     = (object) @Element                                                                                               // 3538
    \*/                                                                                                                // 3539
    elproto.removeData = function (key) {                                                                              // 3540
        if (key == null) {                                                                                             // 3541
            eldata[this.id] = {};                                                                                      // 3542
        } else {                                                                                                       // 3543
            eldata[this.id] && delete eldata[this.id][key];                                                            // 3544
        }                                                                                                              // 3545
        return this;                                                                                                   // 3546
    };                                                                                                                 // 3547
    /*\
     * Element.outerSVG                                                                                                // 3549
     [ method ]                                                                                                        // 3550
     **                                                                                                                // 3551
     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.                                             // 3552
     *                                                                                                                 // 3553
     * See also @Element.innerSVG                                                                                      // 3554
     = (string) SVG code for the element                                                                               // 3555
    \*/                                                                                                                // 3556
    /*\
     * Element.toString                                                                                                // 3558
     [ method ]                                                                                                        // 3559
     **                                                                                                                // 3560
     * See @Element.outerSVG                                                                                           // 3561
    \*/                                                                                                                // 3562
    elproto.outerSVG = elproto.toString = toString(1);                                                                 // 3563
    /*\
     * Element.innerSVG                                                                                                // 3565
     [ method ]                                                                                                        // 3566
     **                                                                                                                // 3567
     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`                                   // 3568
     = (string) SVG code for the element                                                                               // 3569
    \*/                                                                                                                // 3570
    elproto.innerSVG = toString();                                                                                     // 3571
    function toString(type) {                                                                                          // 3572
        return function () {                                                                                           // 3573
            var res = type ? "<" + this.type : "",                                                                     // 3574
                attr = this.node.attributes,                                                                           // 3575
                chld = this.node.childNodes;                                                                           // 3576
            if (type) {                                                                                                // 3577
                for (var i = 0, ii = attr.length; i < ii; i++) {                                                       // 3578
                    res += " " + attr[i].name + '="' +                                                                 // 3579
                            attr[i].value.replace(/"/g, '\\"') + '"';                                                  // 3580
                }                                                                                                      // 3581
            }                                                                                                          // 3582
            if (chld.length) {                                                                                         // 3583
                type && (res += ">");                                                                                  // 3584
                for (i = 0, ii = chld.length; i < ii; i++) {                                                           // 3585
                    if (chld[i].nodeType == 3) {                                                                       // 3586
                        res += chld[i].nodeValue;                                                                      // 3587
                    } else if (chld[i].nodeType == 1) {                                                                // 3588
                        res += wrap(chld[i]).toString();                                                               // 3589
                    }                                                                                                  // 3590
                }                                                                                                      // 3591
                type && (res += "</" + this.type + ">");                                                               // 3592
            } else {                                                                                                   // 3593
                type && (res += "/>");                                                                                 // 3594
            }                                                                                                          // 3595
            return res;                                                                                                // 3596
        };                                                                                                             // 3597
    }                                                                                                                  // 3598
    elproto.toDataURL = function () {                                                                                  // 3599
        if (window && window.btoa) {                                                                                   // 3600
            var bb = this.getBBox(),                                                                                   // 3601
                svg = Snap.format('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="{width}" height="{height}" viewBox="{x} {y} {width} {height}">{contents}</svg>', {
                x: +bb.x.toFixed(3),                                                                                   // 3603
                y: +bb.y.toFixed(3),                                                                                   // 3604
                width: +bb.width.toFixed(3),                                                                           // 3605
                height: +bb.height.toFixed(3),                                                                         // 3606
                contents: this.outerSVG()                                                                              // 3607
            });                                                                                                        // 3608
            return "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(svg)));                             // 3609
        }                                                                                                              // 3610
    };                                                                                                                 // 3611
    /*\
     * Fragment.select                                                                                                 // 3613
     [ method ]                                                                                                        // 3614
     **                                                                                                                // 3615
     * See @Element.select                                                                                             // 3616
    \*/                                                                                                                // 3617
    Fragment.prototype.select = elproto.select;                                                                        // 3618
    /*\
     * Fragment.selectAll                                                                                              // 3620
     [ method ]                                                                                                        // 3621
     **                                                                                                                // 3622
     * See @Element.selectAll                                                                                          // 3623
    \*/                                                                                                                // 3624
    Fragment.prototype.selectAll = elproto.selectAll;                                                                  // 3625
});                                                                                                                    // 3626
                                                                                                                       // 3627
// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 3628
//                                                                                                                     // 3629
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3630
// you may not use this file except in compliance with the License.                                                    // 3631
// You may obtain a copy of the License at                                                                             // 3632
//                                                                                                                     // 3633
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3634
//                                                                                                                     // 3635
// Unless required by applicable law or agreed to in writing, software                                                 // 3636
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3637
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3638
// See the License for the specific language governing permissions and                                                 // 3639
// limitations under the License.                                                                                      // 3640
Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {                                                          // 3641
    var objectToString = Object.prototype.toString,                                                                    // 3642
        Str = String,                                                                                                  // 3643
        math = Math,                                                                                                   // 3644
        E = "";                                                                                                        // 3645
    function Matrix(a, b, c, d, e, f) {                                                                                // 3646
        if (b == null && objectToString.call(a) == "[object SVGMatrix]") {                                             // 3647
            this.a = a.a;                                                                                              // 3648
            this.b = a.b;                                                                                              // 3649
            this.c = a.c;                                                                                              // 3650
            this.d = a.d;                                                                                              // 3651
            this.e = a.e;                                                                                              // 3652
            this.f = a.f;                                                                                              // 3653
            return;                                                                                                    // 3654
        }                                                                                                              // 3655
        if (a != null) {                                                                                               // 3656
            this.a = +a;                                                                                               // 3657
            this.b = +b;                                                                                               // 3658
            this.c = +c;                                                                                               // 3659
            this.d = +d;                                                                                               // 3660
            this.e = +e;                                                                                               // 3661
            this.f = +f;                                                                                               // 3662
        } else {                                                                                                       // 3663
            this.a = 1;                                                                                                // 3664
            this.b = 0;                                                                                                // 3665
            this.c = 0;                                                                                                // 3666
            this.d = 1;                                                                                                // 3667
            this.e = 0;                                                                                                // 3668
            this.f = 0;                                                                                                // 3669
        }                                                                                                              // 3670
    }                                                                                                                  // 3671
    (function (matrixproto) {                                                                                          // 3672
        /*\
         * Matrix.add                                                                                                  // 3674
         [ method ]                                                                                                    // 3675
         **                                                                                                            // 3676
         * Adds the given matrix to existing one                                                                       // 3677
         - a (number)                                                                                                  // 3678
         - b (number)                                                                                                  // 3679
         - c (number)                                                                                                  // 3680
         - d (number)                                                                                                  // 3681
         - e (number)                                                                                                  // 3682
         - f (number)                                                                                                  // 3683
         * or                                                                                                          // 3684
         - matrix (object) @Matrix                                                                                     // 3685
        \*/                                                                                                            // 3686
        matrixproto.add = function (a, b, c, d, e, f) {                                                                // 3687
            var out = [[], [], []],                                                                                    // 3688
                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],                                   // 3689
                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],                                                            // 3690
                x, y, z, res;                                                                                          // 3691
                                                                                                                       // 3692
            if (a && a instanceof Matrix) {                                                                            // 3693
                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];                                                // 3694
            }                                                                                                          // 3695
                                                                                                                       // 3696
            for (x = 0; x < 3; x++) {                                                                                  // 3697
                for (y = 0; y < 3; y++) {                                                                              // 3698
                    res = 0;                                                                                           // 3699
                    for (z = 0; z < 3; z++) {                                                                          // 3700
                        res += m[x][z] * matrix[z][y];                                                                 // 3701
                    }                                                                                                  // 3702
                    out[x][y] = res;                                                                                   // 3703
                }                                                                                                      // 3704
            }                                                                                                          // 3705
            this.a = out[0][0];                                                                                        // 3706
            this.b = out[1][0];                                                                                        // 3707
            this.c = out[0][1];                                                                                        // 3708
            this.d = out[1][1];                                                                                        // 3709
            this.e = out[0][2];                                                                                        // 3710
            this.f = out[1][2];                                                                                        // 3711
            return this;                                                                                               // 3712
        };                                                                                                             // 3713
        /*\
         * Matrix.invert                                                                                               // 3715
         [ method ]                                                                                                    // 3716
         **                                                                                                            // 3717
         * Returns an inverted version of the matrix                                                                   // 3718
         = (object) @Matrix                                                                                            // 3719
        \*/                                                                                                            // 3720
        matrixproto.invert = function () {                                                                             // 3721
            var me = this,                                                                                             // 3722
                x = me.a * me.d - me.b * me.c;                                                                         // 3723
            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);
        };                                                                                                             // 3725
        /*\
         * Matrix.clone                                                                                                // 3727
         [ method ]                                                                                                    // 3728
         **                                                                                                            // 3729
         * Returns a copy of the matrix                                                                                // 3730
         = (object) @Matrix                                                                                            // 3731
        \*/                                                                                                            // 3732
        matrixproto.clone = function () {                                                                              // 3733
            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);                                         // 3734
        };                                                                                                             // 3735
        /*\
         * Matrix.translate                                                                                            // 3737
         [ method ]                                                                                                    // 3738
         **                                                                                                            // 3739
         * Translate the matrix                                                                                        // 3740
         - x (number) horizontal offset distance                                                                       // 3741
         - y (number) vertical offset distance                                                                         // 3742
        \*/                                                                                                            // 3743
        matrixproto.translate = function (x, y) {                                                                      // 3744
            return this.add(1, 0, 0, 1, x, y);                                                                         // 3745
        };                                                                                                             // 3746
        /*\
         * Matrix.scale                                                                                                // 3748
         [ method ]                                                                                                    // 3749
         **                                                                                                            // 3750
         * Scales the matrix                                                                                           // 3751
         - x (number) amount to be scaled, with `1` resulting in no change                                             // 3752
         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)         // 3753
         - cx (number) #optional horizontal origin point from which to scale                                           // 3754
         - cy (number) #optional vertical origin point from which to scale                                             // 3755
         * Default cx, cy is the middle point of the element.                                                          // 3756
        \*/                                                                                                            // 3757
        matrixproto.scale = function (x, y, cx, cy) {                                                                  // 3758
            y == null && (y = x);                                                                                      // 3759
            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);                                                                // 3760
            this.add(x, 0, 0, y, 0, 0);                                                                                // 3761
            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);                                                              // 3762
            return this;                                                                                               // 3763
        };                                                                                                             // 3764
        /*\
         * Matrix.rotate                                                                                               // 3766
         [ method ]                                                                                                    // 3767
         **                                                                                                            // 3768
         * Rotates the matrix                                                                                          // 3769
         - a (number) angle of rotation, in degrees                                                                    // 3770
         - x (number) horizontal origin point from which to rotate                                                     // 3771
         - y (number) vertical origin point from which to rotate                                                       // 3772
        \*/                                                                                                            // 3773
        matrixproto.rotate = function (a, x, y) {                                                                      // 3774
            a = Snap.rad(a);                                                                                           // 3775
            x = x || 0;                                                                                                // 3776
            y = y || 0;                                                                                                // 3777
            var cos = +math.cos(a).toFixed(9),                                                                         // 3778
                sin = +math.sin(a).toFixed(9);                                                                         // 3779
            this.add(cos, sin, -sin, cos, x, y);                                                                       // 3780
            return this.add(1, 0, 0, 1, -x, -y);                                                                       // 3781
        };                                                                                                             // 3782
        /*\
         * Matrix.x                                                                                                    // 3784
         [ method ]                                                                                                    // 3785
         **                                                                                                            // 3786
         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y       // 3787
         - x (number)                                                                                                  // 3788
         - y (number)                                                                                                  // 3789
         = (number) x                                                                                                  // 3790
        \*/                                                                                                            // 3791
        matrixproto.x = function (x, y) {                                                                              // 3792
            return x * this.a + y * this.c + this.e;                                                                   // 3793
        };                                                                                                             // 3794
        /*\
         * Matrix.y                                                                                                    // 3796
         [ method ]                                                                                                    // 3797
         **                                                                                                            // 3798
         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x       // 3799
         - x (number)                                                                                                  // 3800
         - y (number)                                                                                                  // 3801
         = (number) y                                                                                                  // 3802
        \*/                                                                                                            // 3803
        matrixproto.y = function (x, y) {                                                                              // 3804
            return x * this.b + y * this.d + this.f;                                                                   // 3805
        };                                                                                                             // 3806
        matrixproto.get = function (i) {                                                                               // 3807
            return +this[Str.fromCharCode(97 + i)].toFixed(4);                                                         // 3808
        };                                                                                                             // 3809
        matrixproto.toString = function () {                                                                           // 3810
            return "matrix(" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + ")";
        };                                                                                                             // 3812
        matrixproto.offset = function () {                                                                             // 3813
            return [this.e.toFixed(4), this.f.toFixed(4)];                                                             // 3814
        };                                                                                                             // 3815
        function norm(a) {                                                                                             // 3816
            return a[0] * a[0] + a[1] * a[1];                                                                          // 3817
        }                                                                                                              // 3818
        function normalize(a) {                                                                                        // 3819
            var mag = math.sqrt(norm(a));                                                                              // 3820
            a[0] && (a[0] /= mag);                                                                                     // 3821
            a[1] && (a[1] /= mag);                                                                                     // 3822
        }                                                                                                              // 3823
        /*\
         * Matrix.determinant                                                                                          // 3825
         [ method ]                                                                                                    // 3826
         **                                                                                                            // 3827
         * Finds determinant of the given matrix.                                                                      // 3828
         = (number) determinant                                                                                        // 3829
        \*/                                                                                                            // 3830
        matrixproto.determinant = function () {                                                                        // 3831
            return this.a * this.d - this.b * this.c;                                                                  // 3832
        };                                                                                                             // 3833
        /*\
         * Matrix.split                                                                                                // 3835
         [ method ]                                                                                                    // 3836
         **                                                                                                            // 3837
         * Splits matrix into primitive transformations                                                                // 3838
         = (object) in format:                                                                                         // 3839
         o dx (number) translation by x                                                                                // 3840
         o dy (number) translation by y                                                                                // 3841
         o scalex (number) scale by x                                                                                  // 3842
         o scaley (number) scale by y                                                                                  // 3843
         o shear (number) shear                                                                                        // 3844
         o rotate (number) rotation in deg                                                                             // 3845
         o isSimple (boolean) could it be represented via simple transformations                                       // 3846
        \*/                                                                                                            // 3847
        matrixproto.split = function () {                                                                              // 3848
            var out = {};                                                                                              // 3849
            // translation                                                                                             // 3850
            out.dx = this.e;                                                                                           // 3851
            out.dy = this.f;                                                                                           // 3852
                                                                                                                       // 3853
            // scale and shear                                                                                         // 3854
            var row = [[this.a, this.c], [this.b, this.d]];                                                            // 3855
            out.scalex = math.sqrt(norm(row[0]));                                                                      // 3856
            normalize(row[0]);                                                                                         // 3857
                                                                                                                       // 3858
            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];                                                 // 3859
            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];                           // 3860
                                                                                                                       // 3861
            out.scaley = math.sqrt(norm(row[1]));                                                                      // 3862
            normalize(row[1]);                                                                                         // 3863
            out.shear /= out.scaley;                                                                                   // 3864
                                                                                                                       // 3865
            if (this.determinant() < 0) {                                                                              // 3866
                out.scalex = -out.scalex;                                                                              // 3867
            }                                                                                                          // 3868
                                                                                                                       // 3869
            // rotation                                                                                                // 3870
            var sin = -row[0][1],                                                                                      // 3871
                cos = row[1][1];                                                                                       // 3872
            if (cos < 0) {                                                                                             // 3873
                out.rotate = Snap.deg(math.acos(cos));                                                                 // 3874
                if (sin < 0) {                                                                                         // 3875
                    out.rotate = 360 - out.rotate;                                                                     // 3876
                }                                                                                                      // 3877
            } else {                                                                                                   // 3878
                out.rotate = Snap.deg(math.asin(sin));                                                                 // 3879
            }                                                                                                          // 3880
                                                                                                                       // 3881
            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);  // 3882
            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;
            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;                                                    // 3884
            return out;                                                                                                // 3885
        };                                                                                                             // 3886
        /*\
         * Matrix.toTransformString                                                                                    // 3888
         [ method ]                                                                                                    // 3889
         **                                                                                                            // 3890
         * Returns transform string that represents given matrix                                                       // 3891
         = (string) transform string                                                                                   // 3892
        \*/                                                                                                            // 3893
        matrixproto.toTransformString = function (shorter) {                                                           // 3894
            var s = shorter || this.split();                                                                           // 3895
            if (!+s.shear.toFixed(9)) {                                                                                // 3896
                s.scalex = +s.scalex.toFixed(4);                                                                       // 3897
                s.scaley = +s.scaley.toFixed(4);                                                                       // 3898
                s.rotate = +s.rotate.toFixed(4);                                                                       // 3899
                return  (s.dx || s.dy ? "t" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) +                              // 3900
                        (s.scalex != 1 || s.scaley != 1 ? "s" + [s.scalex, s.scaley, 0, 0] : E) +                      // 3901
                        (s.rotate ? "r" + [+s.rotate.toFixed(4), 0, 0] : E);                                           // 3902
            } else {                                                                                                   // 3903
                return "m" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];           // 3904
            }                                                                                                          // 3905
        };                                                                                                             // 3906
    })(Matrix.prototype);                                                                                              // 3907
    /*\
     * Snap.Matrix                                                                                                     // 3909
     [ method ]                                                                                                        // 3910
     **                                                                                                                // 3911
     * Matrix constructor, extend on your own risk.                                                                    // 3912
     * To create matrices use @Snap.matrix.                                                                            // 3913
    \*/                                                                                                                // 3914
    Snap.Matrix = Matrix;                                                                                              // 3915
    /*\
     * Snap.matrix                                                                                                     // 3917
     [ method ]                                                                                                        // 3918
     **                                                                                                                // 3919
     * Utility method                                                                                                  // 3920
     **                                                                                                                // 3921
     * Returns a matrix based on the given parameters                                                                  // 3922
     - a (number)                                                                                                      // 3923
     - b (number)                                                                                                      // 3924
     - c (number)                                                                                                      // 3925
     - d (number)                                                                                                      // 3926
     - e (number)                                                                                                      // 3927
     - f (number)                                                                                                      // 3928
     * or                                                                                                              // 3929
     - svgMatrix (SVGMatrix)                                                                                           // 3930
     = (object) @Matrix                                                                                                // 3931
    \*/                                                                                                                // 3932
    Snap.matrix = function (a, b, c, d, e, f) {                                                                        // 3933
        return new Matrix(a, b, c, d, e, f);                                                                           // 3934
    };                                                                                                                 // 3935
});                                                                                                                    // 3936
// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 3937
//                                                                                                                     // 3938
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 3939
// you may not use this file except in compliance with the License.                                                    // 3940
// You may obtain a copy of the License at                                                                             // 3941
//                                                                                                                     // 3942
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3943
//                                                                                                                     // 3944
// Unless required by applicable law or agreed to in writing, software                                                 // 3945
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 3946
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3947
// See the License for the specific language governing permissions and                                                 // 3948
// limitations under the License.                                                                                      // 3949
Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {                                                          // 3950
    var has = "hasOwnProperty",                                                                                        // 3951
        make = Snap._.make,                                                                                            // 3952
        wrap = Snap._.wrap,                                                                                            // 3953
        is = Snap.is,                                                                                                  // 3954
        getSomeDefs = Snap._.getSomeDefs,                                                                              // 3955
        reURLValue = /^url\(#?([^)]+)\)$/,                                                                             // 3956
        $ = Snap._.$,                                                                                                  // 3957
        URL = Snap.url,                                                                                                // 3958
        Str = String,                                                                                                  // 3959
        separator = Snap._.separator,                                                                                  // 3960
        E = "";                                                                                                        // 3961
    // Attributes event handlers                                                                                       // 3962
    eve.on("snap.util.attr.mask", function (value) {                                                                   // 3963
        if (value instanceof Element || value instanceof Fragment) {                                                   // 3964
            eve.stop();                                                                                                // 3965
            if (value instanceof Fragment && value.node.childNodes.length == 1) {                                      // 3966
                value = value.node.firstChild;                                                                         // 3967
                getSomeDefs(this).appendChild(value);                                                                  // 3968
                value = wrap(value);                                                                                   // 3969
            }                                                                                                          // 3970
            if (value.type == "mask") {                                                                                // 3971
                var mask = value;                                                                                      // 3972
            } else {                                                                                                   // 3973
                mask = make("mask", getSomeDefs(this));                                                                // 3974
                mask.node.appendChild(value.node);                                                                     // 3975
            }                                                                                                          // 3976
            !mask.node.id && $(mask.node, {                                                                            // 3977
                id: mask.id                                                                                            // 3978
            });                                                                                                        // 3979
            $(this.node, {                                                                                             // 3980
                mask: URL(mask.id)                                                                                     // 3981
            });                                                                                                        // 3982
        }                                                                                                              // 3983
    });                                                                                                                // 3984
    (function (clipIt) {                                                                                               // 3985
        eve.on("snap.util.attr.clip", clipIt);                                                                         // 3986
        eve.on("snap.util.attr.clip-path", clipIt);                                                                    // 3987
        eve.on("snap.util.attr.clipPath", clipIt);                                                                     // 3988
    }(function (value) {                                                                                               // 3989
        if (value instanceof Element || value instanceof Fragment) {                                                   // 3990
            eve.stop();                                                                                                // 3991
            if (value.type == "clipPath") {                                                                            // 3992
                var clip = value;                                                                                      // 3993
            } else {                                                                                                   // 3994
                clip = make("clipPath", getSomeDefs(this));                                                            // 3995
                clip.node.appendChild(value.node);                                                                     // 3996
                !clip.node.id && $(clip.node, {                                                                        // 3997
                    id: clip.id                                                                                        // 3998
                });                                                                                                    // 3999
            }                                                                                                          // 4000
            $(this.node, {                                                                                             // 4001
                "clip-path": URL(clip.node.id || clip.id)                                                              // 4002
            });                                                                                                        // 4003
        }                                                                                                              // 4004
    }));                                                                                                               // 4005
    function fillStroke(name) {                                                                                        // 4006
        return function (value) {                                                                                      // 4007
            eve.stop();                                                                                                // 4008
            if (value instanceof Fragment && value.node.childNodes.length == 1 &&                                      // 4009
                (value.node.firstChild.tagName == "radialGradient" ||                                                  // 4010
                value.node.firstChild.tagName == "linearGradient" ||                                                   // 4011
                value.node.firstChild.tagName == "pattern")) {                                                         // 4012
                value = value.node.firstChild;                                                                         // 4013
                getSomeDefs(this).appendChild(value);                                                                  // 4014
                value = wrap(value);                                                                                   // 4015
            }                                                                                                          // 4016
            if (value instanceof Element) {                                                                            // 4017
                if (value.type == "radialGradient" || value.type == "linearGradient"                                   // 4018
                   || value.type == "pattern") {                                                                       // 4019
                    if (!value.node.id) {                                                                              // 4020
                        $(value.node, {                                                                                // 4021
                            id: value.id                                                                               // 4022
                        });                                                                                            // 4023
                    }                                                                                                  // 4024
                    var fill = URL(value.node.id);                                                                     // 4025
                } else {                                                                                               // 4026
                    fill = value.attr(name);                                                                           // 4027
                }                                                                                                      // 4028
            } else {                                                                                                   // 4029
                fill = Snap.color(value);                                                                              // 4030
                if (fill.error) {                                                                                      // 4031
                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);                                // 4032
                    if (grad) {                                                                                        // 4033
                        if (!grad.node.id) {                                                                           // 4034
                            $(grad.node, {                                                                             // 4035
                                id: grad.id                                                                            // 4036
                            });                                                                                        // 4037
                        }                                                                                              // 4038
                        fill = URL(grad.node.id);                                                                      // 4039
                    } else {                                                                                           // 4040
                        fill = value;                                                                                  // 4041
                    }                                                                                                  // 4042
                } else {                                                                                               // 4043
                    fill = Str(fill);                                                                                  // 4044
                }                                                                                                      // 4045
            }                                                                                                          // 4046
            var attrs = {};                                                                                            // 4047
            attrs[name] = fill;                                                                                        // 4048
            $(this.node, attrs);                                                                                       // 4049
            this.node.style[name] = E;                                                                                 // 4050
        };                                                                                                             // 4051
    }                                                                                                                  // 4052
    eve.on("snap.util.attr.fill", fillStroke("fill"));                                                                 // 4053
    eve.on("snap.util.attr.stroke", fillStroke("stroke"));                                                             // 4054
    var gradrg = /^([lr])(?:\(([^)]*)\))?(.*)$/i;                                                                      // 4055
    eve.on("snap.util.grad.parse", function parseGrad(string) {                                                        // 4056
        string = Str(string);                                                                                          // 4057
        var tokens = string.match(gradrg);                                                                             // 4058
        if (!tokens) {                                                                                                 // 4059
            return null;                                                                                               // 4060
        }                                                                                                              // 4061
        var type = tokens[1],                                                                                          // 4062
            params = tokens[2],                                                                                        // 4063
            stops = tokens[3];                                                                                         // 4064
        params = params.split(/\s*,\s*/).map(function (el) {                                                           // 4065
            return +el == el ? +el : el;                                                                               // 4066
        });                                                                                                            // 4067
        if (params.length == 1 && params[0] == 0) {                                                                    // 4068
            params = [];                                                                                               // 4069
        }                                                                                                              // 4070
        stops = stops.split("-");                                                                                      // 4071
        stops = stops.map(function (el) {                                                                              // 4072
            el = el.split(":");                                                                                        // 4073
            var out = {                                                                                                // 4074
                color: el[0]                                                                                           // 4075
            };                                                                                                         // 4076
            if (el[1]) {                                                                                               // 4077
                out.offset = parseFloat(el[1]);                                                                        // 4078
            }                                                                                                          // 4079
            return out;                                                                                                // 4080
        });                                                                                                            // 4081
        return {                                                                                                       // 4082
            type: type,                                                                                                // 4083
            params: params,                                                                                            // 4084
            stops: stops                                                                                               // 4085
        };                                                                                                             // 4086
    });                                                                                                                // 4087
                                                                                                                       // 4088
    eve.on("snap.util.attr.d", function (value) {                                                                      // 4089
        eve.stop();                                                                                                    // 4090
        if (is(value, "array") && is(value[0], "array")) {                                                             // 4091
            value = Snap.path.toString.call(value);                                                                    // 4092
        }                                                                                                              // 4093
        value = Str(value);                                                                                            // 4094
        if (value.match(/[ruo]/i)) {                                                                                   // 4095
            value = Snap.path.toAbsolute(value);                                                                       // 4096
        }                                                                                                              // 4097
        $(this.node, {d: value});                                                                                      // 4098
    })(-1);                                                                                                            // 4099
    eve.on("snap.util.attr.#text", function (value) {                                                                  // 4100
        eve.stop();                                                                                                    // 4101
        value = Str(value);                                                                                            // 4102
        var txt = glob.doc.createTextNode(value);                                                                      // 4103
        while (this.node.firstChild) {                                                                                 // 4104
            this.node.removeChild(this.node.firstChild);                                                               // 4105
        }                                                                                                              // 4106
        this.node.appendChild(txt);                                                                                    // 4107
    })(-1);                                                                                                            // 4108
    eve.on("snap.util.attr.path", function (value) {                                                                   // 4109
        eve.stop();                                                                                                    // 4110
        this.attr({d: value});                                                                                         // 4111
    })(-1);                                                                                                            // 4112
    eve.on("snap.util.attr.class", function (value) {                                                                  // 4113
        eve.stop();                                                                                                    // 4114
        this.node.className.baseVal = value;                                                                           // 4115
    })(-1);                                                                                                            // 4116
    eve.on("snap.util.attr.viewBox", function (value) {                                                                // 4117
        var vb;                                                                                                        // 4118
        if (is(value, "object") && "x" in value) {                                                                     // 4119
            vb = [value.x, value.y, value.width, value.height].join(" ");                                              // 4120
        } else if (is(value, "array")) {                                                                               // 4121
            vb = value.join(" ");                                                                                      // 4122
        } else {                                                                                                       // 4123
            vb = value;                                                                                                // 4124
        }                                                                                                              // 4125
        $(this.node, {                                                                                                 // 4126
            viewBox: vb                                                                                                // 4127
        });                                                                                                            // 4128
        eve.stop();                                                                                                    // 4129
    })(-1);                                                                                                            // 4130
    eve.on("snap.util.attr.transform", function (value) {                                                              // 4131
        this.transform(value);                                                                                         // 4132
        eve.stop();                                                                                                    // 4133
    })(-1);                                                                                                            // 4134
    eve.on("snap.util.attr.r", function (value) {                                                                      // 4135
        if (this.type == "rect") {                                                                                     // 4136
            eve.stop();                                                                                                // 4137
            $(this.node, {                                                                                             // 4138
                rx: value,                                                                                             // 4139
                ry: value                                                                                              // 4140
            });                                                                                                        // 4141
        }                                                                                                              // 4142
    })(-1);                                                                                                            // 4143
    eve.on("snap.util.attr.textpath", function (value) {                                                               // 4144
        eve.stop();                                                                                                    // 4145
        if (this.type == "text") {                                                                                     // 4146
            var id, tp, node;                                                                                          // 4147
            if (!value && this.textPath) {                                                                             // 4148
                tp = this.textPath;                                                                                    // 4149
                while (tp.node.firstChild) {                                                                           // 4150
                    this.node.appendChild(tp.node.firstChild);                                                         // 4151
                }                                                                                                      // 4152
                tp.remove();                                                                                           // 4153
                delete this.textPath;                                                                                  // 4154
                return;                                                                                                // 4155
            }                                                                                                          // 4156
            if (is(value, "string")) {                                                                                 // 4157
                var defs = getSomeDefs(this),                                                                          // 4158
                    path = wrap(defs.parentNode).path(value);                                                          // 4159
                defs.appendChild(path.node);                                                                           // 4160
                id = path.id;                                                                                          // 4161
                path.attr({id: id});                                                                                   // 4162
            } else {                                                                                                   // 4163
                value = wrap(value);                                                                                   // 4164
                if (value instanceof Element) {                                                                        // 4165
                    id = value.attr("id");                                                                             // 4166
                    if (!id) {                                                                                         // 4167
                        id = value.id;                                                                                 // 4168
                        value.attr({id: id});                                                                          // 4169
                    }                                                                                                  // 4170
                }                                                                                                      // 4171
            }                                                                                                          // 4172
            if (id) {                                                                                                  // 4173
                tp = this.textPath;                                                                                    // 4174
                node = this.node;                                                                                      // 4175
                if (tp) {                                                                                              // 4176
                    tp.attr({"xlink:href": "#" + id});                                                                 // 4177
                } else {                                                                                               // 4178
                    tp = $("textPath", {                                                                               // 4179
                        "xlink:href": "#" + id                                                                         // 4180
                    });                                                                                                // 4181
                    while (node.firstChild) {                                                                          // 4182
                        tp.appendChild(node.firstChild);                                                               // 4183
                    }                                                                                                  // 4184
                    node.appendChild(tp);                                                                              // 4185
                    this.textPath = wrap(tp);                                                                          // 4186
                }                                                                                                      // 4187
            }                                                                                                          // 4188
        }                                                                                                              // 4189
    })(-1);                                                                                                            // 4190
    eve.on("snap.util.attr.text", function (value) {                                                                   // 4191
        if (this.type == "text") {                                                                                     // 4192
            var i = 0,                                                                                                 // 4193
                node = this.node,                                                                                      // 4194
                tuner = function (chunk) {                                                                             // 4195
                    var out = $("tspan");                                                                              // 4196
                    if (is(chunk, "array")) {                                                                          // 4197
                        for (var i = 0; i < chunk.length; i++) {                                                       // 4198
                            out.appendChild(tuner(chunk[i]));                                                          // 4199
                        }                                                                                              // 4200
                    } else {                                                                                           // 4201
                        out.appendChild(glob.doc.createTextNode(chunk));                                               // 4202
                    }                                                                                                  // 4203
                    out.normalize && out.normalize();                                                                  // 4204
                    return out;                                                                                        // 4205
                };                                                                                                     // 4206
            while (node.firstChild) {                                                                                  // 4207
                node.removeChild(node.firstChild);                                                                     // 4208
            }                                                                                                          // 4209
            var tuned = tuner(value);                                                                                  // 4210
            while (tuned.firstChild) {                                                                                 // 4211
                node.appendChild(tuned.firstChild);                                                                    // 4212
            }                                                                                                          // 4213
        }                                                                                                              // 4214
        eve.stop();                                                                                                    // 4215
    })(-1);                                                                                                            // 4216
    function setFontSize(value) {                                                                                      // 4217
        eve.stop();                                                                                                    // 4218
        if (value == +value) {                                                                                         // 4219
            value += "px";                                                                                             // 4220
        }                                                                                                              // 4221
        this.node.style.fontSize = value;                                                                              // 4222
    }                                                                                                                  // 4223
    eve.on("snap.util.attr.fontSize", setFontSize)(-1);                                                                // 4224
    eve.on("snap.util.attr.font-size", setFontSize)(-1);                                                               // 4225
                                                                                                                       // 4226
                                                                                                                       // 4227
    eve.on("snap.util.getattr.transform", function () {                                                                // 4228
        eve.stop();                                                                                                    // 4229
        return this.transform();                                                                                       // 4230
    })(-1);                                                                                                            // 4231
    eve.on("snap.util.getattr.textpath", function () {                                                                 // 4232
        eve.stop();                                                                                                    // 4233
        return this.textPath;                                                                                          // 4234
    })(-1);                                                                                                            // 4235
    // Markers                                                                                                         // 4236
    (function () {                                                                                                     // 4237
        function getter(end) {                                                                                         // 4238
            return function () {                                                                                       // 4239
                eve.stop();                                                                                            // 4240
                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue("marker-" + end);  // 4241
                if (style == "none") {                                                                                 // 4242
                    return style;                                                                                      // 4243
                } else {                                                                                               // 4244
                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));                                  // 4245
                }                                                                                                      // 4246
            };                                                                                                         // 4247
        }                                                                                                              // 4248
        function setter(end) {                                                                                         // 4249
            return function (value) {                                                                                  // 4250
                eve.stop();                                                                                            // 4251
                var name = "marker" + end.charAt(0).toUpperCase() + end.substring(1);                                  // 4252
                if (value == "" || !value) {                                                                           // 4253
                    this.node.style[name] = "none";                                                                    // 4254
                    return;                                                                                            // 4255
                }                                                                                                      // 4256
                if (value.type == "marker") {                                                                          // 4257
                    var id = value.node.id;                                                                            // 4258
                    if (!id) {                                                                                         // 4259
                        $(value.node, {id: value.id});                                                                 // 4260
                    }                                                                                                  // 4261
                    this.node.style[name] = URL(id);                                                                   // 4262
                    return;                                                                                            // 4263
                }                                                                                                      // 4264
            };                                                                                                         // 4265
        }                                                                                                              // 4266
        eve.on("snap.util.getattr.marker-end", getter("end"))(-1);                                                     // 4267
        eve.on("snap.util.getattr.markerEnd", getter("end"))(-1);                                                      // 4268
        eve.on("snap.util.getattr.marker-start", getter("start"))(-1);                                                 // 4269
        eve.on("snap.util.getattr.markerStart", getter("start"))(-1);                                                  // 4270
        eve.on("snap.util.getattr.marker-mid", getter("mid"))(-1);                                                     // 4271
        eve.on("snap.util.getattr.markerMid", getter("mid"))(-1);                                                      // 4272
        eve.on("snap.util.attr.marker-end", setter("end"))(-1);                                                        // 4273
        eve.on("snap.util.attr.markerEnd", setter("end"))(-1);                                                         // 4274
        eve.on("snap.util.attr.marker-start", setter("start"))(-1);                                                    // 4275
        eve.on("snap.util.attr.markerStart", setter("start"))(-1);                                                     // 4276
        eve.on("snap.util.attr.marker-mid", setter("mid"))(-1);                                                        // 4277
        eve.on("snap.util.attr.markerMid", setter("mid"))(-1);                                                         // 4278
    }());                                                                                                              // 4279
    eve.on("snap.util.getattr.r", function () {                                                                        // 4280
        if (this.type == "rect" && $(this.node, "rx") == $(this.node, "ry")) {                                         // 4281
            eve.stop();                                                                                                // 4282
            return $(this.node, "rx");                                                                                 // 4283
        }                                                                                                              // 4284
    })(-1);                                                                                                            // 4285
    function textExtract(node) {                                                                                       // 4286
        var out = [];                                                                                                  // 4287
        var children = node.childNodes;                                                                                // 4288
        for (var i = 0, ii = children.length; i < ii; i++) {                                                           // 4289
            var chi = children[i];                                                                                     // 4290
            if (chi.nodeType == 3) {                                                                                   // 4291
                out.push(chi.nodeValue);                                                                               // 4292
            }                                                                                                          // 4293
            if (chi.tagName == "tspan") {                                                                              // 4294
                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {                                      // 4295
                    out.push(chi.firstChild.nodeValue);                                                                // 4296
                } else {                                                                                               // 4297
                    out.push(textExtract(chi));                                                                        // 4298
                }                                                                                                      // 4299
            }                                                                                                          // 4300
        }                                                                                                              // 4301
        return out;                                                                                                    // 4302
    }                                                                                                                  // 4303
    eve.on("snap.util.getattr.text", function () {                                                                     // 4304
        if (this.type == "text" || this.type == "tspan") {                                                             // 4305
            eve.stop();                                                                                                // 4306
            var out = textExtract(this.node);                                                                          // 4307
            return out.length == 1 ? out[0] : out;                                                                     // 4308
        }                                                                                                              // 4309
    })(-1);                                                                                                            // 4310
    eve.on("snap.util.getattr.#text", function () {                                                                    // 4311
        return this.node.textContent;                                                                                  // 4312
    })(-1);                                                                                                            // 4313
    eve.on("snap.util.getattr.viewBox", function () {                                                                  // 4314
        eve.stop();                                                                                                    // 4315
        var vb = $(this.node, "viewBox");                                                                              // 4316
        if (vb) {                                                                                                      // 4317
            vb = vb.split(separator);                                                                                  // 4318
            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);                                                         // 4319
        } else {                                                                                                       // 4320
            return;                                                                                                    // 4321
        }                                                                                                              // 4322
    })(-1);                                                                                                            // 4323
    eve.on("snap.util.getattr.points", function () {                                                                   // 4324
        var p = $(this.node, "points");                                                                                // 4325
        eve.stop();                                                                                                    // 4326
        if (p) {                                                                                                       // 4327
            return p.split(separator);                                                                                 // 4328
        } else {                                                                                                       // 4329
            return;                                                                                                    // 4330
        }                                                                                                              // 4331
    })(-1);                                                                                                            // 4332
    eve.on("snap.util.getattr.path", function () {                                                                     // 4333
        var p = $(this.node, "d");                                                                                     // 4334
        eve.stop();                                                                                                    // 4335
        return p;                                                                                                      // 4336
    })(-1);                                                                                                            // 4337
    eve.on("snap.util.getattr.class", function () {                                                                    // 4338
        return this.node.className.baseVal;                                                                            // 4339
    })(-1);                                                                                                            // 4340
    function getFontSize() {                                                                                           // 4341
        eve.stop();                                                                                                    // 4342
        return this.node.style.fontSize;                                                                               // 4343
    }                                                                                                                  // 4344
    eve.on("snap.util.getattr.fontSize", getFontSize)(-1);                                                             // 4345
    eve.on("snap.util.getattr.font-size", getFontSize)(-1);                                                            // 4346
});                                                                                                                    // 4347
                                                                                                                       // 4348
// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.                                                 // 4349
//                                                                                                                     // 4350
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 4351
// you may not use this file except in compliance with the License.                                                    // 4352
// You may obtain a copy of the License at                                                                             // 4353
//                                                                                                                     // 4354
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 4355
//                                                                                                                     // 4356
// Unless required by applicable law or agreed to in writing, software                                                 // 4357
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 4358
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 4359
// See the License for the specific language governing permissions and                                                 // 4360
// limitations under the License.                                                                                      // 4361
Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {                                                          // 4362
    var rgNotSpace = /\S+/g,                                                                                           // 4363
        rgBadSpace = /[\t\r\n\f]/g,                                                                                    // 4364
        rgTrim = /(^\s+|\s+$)/g,                                                                                       // 4365
        Str = String,                                                                                                  // 4366
        elproto = Element.prototype;                                                                                   // 4367
    /*\
     * Element.addClass                                                                                                // 4369
     [ method ]                                                                                                        // 4370
     **                                                                                                                // 4371
     * Adds given class name or list of class names to the element.                                                    // 4372
     - value (string) class name or space separated list of class names                                                // 4373
     **                                                                                                                // 4374
     = (Element) original element.                                                                                     // 4375
    \*/                                                                                                                // 4376
    elproto.addClass = function (value) {                                                                              // 4377
        var classes = Str(value || "").match(rgNotSpace) || [],                                                        // 4378
            elem = this.node,                                                                                          // 4379
            className = elem.className.baseVal,                                                                        // 4380
            curClasses = className.match(rgNotSpace) || [],                                                            // 4381
            j,                                                                                                         // 4382
            pos,                                                                                                       // 4383
            clazz,                                                                                                     // 4384
            finalValue;                                                                                                // 4385
                                                                                                                       // 4386
        if (classes.length) {                                                                                          // 4387
            j = 0;                                                                                                     // 4388
            while ((clazz = classes[j++])) {                                                                           // 4389
                pos = curClasses.indexOf(clazz);                                                                       // 4390
                if (!~pos) {                                                                                           // 4391
                    curClasses.push(clazz);                                                                            // 4392
                }                                                                                                      // 4393
            }                                                                                                          // 4394
                                                                                                                       // 4395
            finalValue = curClasses.join(" ");                                                                         // 4396
            if (className != finalValue) {                                                                             // 4397
                elem.className.baseVal = finalValue;                                                                   // 4398
            }                                                                                                          // 4399
        }                                                                                                              // 4400
        return this;                                                                                                   // 4401
    };                                                                                                                 // 4402
    /*\
     * Element.removeClass                                                                                             // 4404
     [ method ]                                                                                                        // 4405
     **                                                                                                                // 4406
     * Removes given class name or list of class names from the element.                                               // 4407
     - value (string) class name or space separated list of class names                                                // 4408
     **                                                                                                                // 4409
     = (Element) original element.                                                                                     // 4410
    \*/                                                                                                                // 4411
    elproto.removeClass = function (value) {                                                                           // 4412
        var classes = Str(value || "").match(rgNotSpace) || [],                                                        // 4413
            elem = this.node,                                                                                          // 4414
            className = elem.className.baseVal,                                                                        // 4415
            curClasses = className.match(rgNotSpace) || [],                                                            // 4416
            j,                                                                                                         // 4417
            pos,                                                                                                       // 4418
            clazz,                                                                                                     // 4419
            finalValue;                                                                                                // 4420
        if (curClasses.length) {                                                                                       // 4421
            j = 0;                                                                                                     // 4422
            while ((clazz = classes[j++])) {                                                                           // 4423
                pos = curClasses.indexOf(clazz);                                                                       // 4424
                if (~pos) {                                                                                            // 4425
                    curClasses.splice(pos, 1);                                                                         // 4426
                }                                                                                                      // 4427
            }                                                                                                          // 4428
                                                                                                                       // 4429
            finalValue = curClasses.join(" ");                                                                         // 4430
            if (className != finalValue) {                                                                             // 4431
                elem.className.baseVal = finalValue;                                                                   // 4432
            }                                                                                                          // 4433
        }                                                                                                              // 4434
        return this;                                                                                                   // 4435
    };                                                                                                                 // 4436
    /*\
     * Element.hasClass                                                                                                // 4438
     [ method ]                                                                                                        // 4439
     **                                                                                                                // 4440
     * Checks if the element has a given class name in the list of class names applied to it.                          // 4441
     - value (string) class name                                                                                       // 4442
     **                                                                                                                // 4443
     = (boolean) `true` if the element has given class                                                                 // 4444
    \*/                                                                                                                // 4445
    elproto.hasClass = function (value) {                                                                              // 4446
        var elem = this.node,                                                                                          // 4447
            className = elem.className.baseVal,                                                                        // 4448
            curClasses = className.match(rgNotSpace) || [];                                                            // 4449
        return !!~curClasses.indexOf(value);                                                                           // 4450
    };                                                                                                                 // 4451
    /*\
     * Element.toggleClass                                                                                             // 4453
     [ method ]                                                                                                        // 4454
     **                                                                                                                // 4455
     * Add or remove one or more classes from the element, depending on either                                         // 4456
     * the class’s presence or the value of the `flag` argument.                                                       // 4457
     - value (string) class name or space separated list of class names                                                // 4458
     - flag (boolean) value to determine whether the class should be added or removed                                  // 4459
     **                                                                                                                // 4460
     = (Element) original element.                                                                                     // 4461
    \*/                                                                                                                // 4462
    elproto.toggleClass = function (value, flag) {                                                                     // 4463
        if (flag != null) {                                                                                            // 4464
            if (flag) {                                                                                                // 4465
                return this.addClass(value);                                                                           // 4466
            } else {                                                                                                   // 4467
                return this.removeClass(value);                                                                        // 4468
            }                                                                                                          // 4469
        }                                                                                                              // 4470
        var classes = (value || "").match(rgNotSpace) || [],                                                           // 4471
            elem = this.node,                                                                                          // 4472
            className = elem.className.baseVal,                                                                        // 4473
            curClasses = className.match(rgNotSpace) || [],                                                            // 4474
            j,                                                                                                         // 4475
            pos,                                                                                                       // 4476
            clazz,                                                                                                     // 4477
            finalValue;                                                                                                // 4478
        j = 0;                                                                                                         // 4479
        while ((clazz = classes[j++])) {                                                                               // 4480
            pos = curClasses.indexOf(clazz);                                                                           // 4481
            if (~pos) {                                                                                                // 4482
                curClasses.splice(pos, 1);                                                                             // 4483
            } else {                                                                                                   // 4484
                curClasses.push(clazz);                                                                                // 4485
            }                                                                                                          // 4486
        }                                                                                                              // 4487
                                                                                                                       // 4488
        finalValue = curClasses.join(" ");                                                                             // 4489
        if (className != finalValue) {                                                                                 // 4490
            elem.className.baseVal = finalValue;                                                                       // 4491
        }                                                                                                              // 4492
        return this;                                                                                                   // 4493
    };                                                                                                                 // 4494
});                                                                                                                    // 4495
                                                                                                                       // 4496
// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 4497
//                                                                                                                     // 4498
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 4499
// you may not use this file except in compliance with the License.                                                    // 4500
// You may obtain a copy of the License at                                                                             // 4501
//                                                                                                                     // 4502
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 4503
//                                                                                                                     // 4504
// Unless required by applicable law or agreed to in writing, software                                                 // 4505
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 4506
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 4507
// See the License for the specific language governing permissions and                                                 // 4508
// limitations under the License.                                                                                      // 4509
Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {                                                          // 4510
    var operators = {                                                                                                  // 4511
            "+": function (x, y) {                                                                                     // 4512
                    return x + y;                                                                                      // 4513
                },                                                                                                     // 4514
            "-": function (x, y) {                                                                                     // 4515
                    return x - y;                                                                                      // 4516
                },                                                                                                     // 4517
            "/": function (x, y) {                                                                                     // 4518
                    return x / y;                                                                                      // 4519
                },                                                                                                     // 4520
            "*": function (x, y) {                                                                                     // 4521
                    return x * y;                                                                                      // 4522
                }                                                                                                      // 4523
        },                                                                                                             // 4524
        Str = String,                                                                                                  // 4525
        reUnit = /[a-z]+$/i,                                                                                           // 4526
        reAddon = /^\s*([+\-\/*])\s*=\s*([\d.eE+\-]+)\s*([^\d\s]+)?\s*$/;                                              // 4527
    function getNumber(val) {                                                                                          // 4528
        return val;                                                                                                    // 4529
    }                                                                                                                  // 4530
    function getUnit(unit) {                                                                                           // 4531
        return function (val) {                                                                                        // 4532
            return +val.toFixed(3) + unit;                                                                             // 4533
        };                                                                                                             // 4534
    }                                                                                                                  // 4535
    eve.on("snap.util.attr", function (val) {                                                                          // 4536
        var plus = Str(val).match(reAddon);                                                                            // 4537
        if (plus) {                                                                                                    // 4538
            var evnt = eve.nt(),                                                                                       // 4539
                name = evnt.substring(evnt.lastIndexOf(".") + 1),                                                      // 4540
                a = this.attr(name),                                                                                   // 4541
                atr = {};                                                                                              // 4542
            eve.stop();                                                                                                // 4543
            var unit = plus[3] || "",                                                                                  // 4544
                aUnit = a.match(reUnit),                                                                               // 4545
                op = operators[plus[1]];                                                                               // 4546
            if (aUnit && aUnit == unit) {                                                                              // 4547
                val = op(parseFloat(a), +plus[2]);                                                                     // 4548
            } else {                                                                                                   // 4549
                a = this.asPX(name);                                                                                   // 4550
                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));                                            // 4551
            }                                                                                                          // 4552
            if (isNaN(a) || isNaN(val)) {                                                                              // 4553
                return;                                                                                                // 4554
            }                                                                                                          // 4555
            atr[name] = val;                                                                                           // 4556
            this.attr(atr);                                                                                            // 4557
        }                                                                                                              // 4558
    })(-10);                                                                                                           // 4559
    eve.on("snap.util.equal", function (name, b) {                                                                     // 4560
        var A, B, a = Str(this.attr(name) || ""),                                                                      // 4561
            el = this,                                                                                                 // 4562
            bplus = Str(b).match(reAddon);                                                                             // 4563
        if (bplus) {                                                                                                   // 4564
            eve.stop();                                                                                                // 4565
            var unit = bplus[3] || "",                                                                                 // 4566
                aUnit = a.match(reUnit),                                                                               // 4567
                op = operators[bplus[1]];                                                                              // 4568
            if (aUnit && aUnit == unit) {                                                                              // 4569
                return {                                                                                               // 4570
                    from: parseFloat(a),                                                                               // 4571
                    to: op(parseFloat(a), +bplus[2]),                                                                  // 4572
                    f: getUnit(aUnit)                                                                                  // 4573
                };                                                                                                     // 4574
            } else {                                                                                                   // 4575
                a = this.asPX(name);                                                                                   // 4576
                return {                                                                                               // 4577
                    from: a,                                                                                           // 4578
                    to: op(a, this.asPX(name, bplus[2] + unit)),                                                       // 4579
                    f: getNumber                                                                                       // 4580
                };                                                                                                     // 4581
            }                                                                                                          // 4582
        }                                                                                                              // 4583
    })(-10);                                                                                                           // 4584
});                                                                                                                    // 4585
// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 4586
//                                                                                                                     // 4587
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 4588
// you may not use this file except in compliance with the License.                                                    // 4589
// You may obtain a copy of the License at                                                                             // 4590
//                                                                                                                     // 4591
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 4592
//                                                                                                                     // 4593
// Unless required by applicable law or agreed to in writing, software                                                 // 4594
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 4595
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 4596
// See the License for the specific language governing permissions and                                                 // 4597
// limitations under the License.                                                                                      // 4598
Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {                                                          // 4599
    var proto = Paper.prototype,                                                                                       // 4600
        is = Snap.is;                                                                                                  // 4601
    /*\
     * Paper.rect                                                                                                      // 4603
     [ method ]                                                                                                        // 4604
     *                                                                                                                 // 4605
     * Draws a rectangle                                                                                               // 4606
     **                                                                                                                // 4607
     - x (number) x coordinate of the top left corner                                                                  // 4608
     - y (number) y coordinate of the top left corner                                                                  // 4609
     - width (number) width                                                                                            // 4610
     - height (number) height                                                                                          // 4611
     - rx (number) #optional horizontal radius for rounded corners, default is 0                                       // 4612
     - ry (number) #optional vertical radius for rounded corners, default is rx or 0                                   // 4613
     = (object) the `rect` element                                                                                     // 4614
     **                                                                                                                // 4615
     > Usage                                                                                                           // 4616
     | // regular rectangle                                                                                            // 4617
     | var c = paper.rect(10, 10, 50, 50);                                                                             // 4618
     | // rectangle with rounded corners                                                                               // 4619
     | var c = paper.rect(40, 40, 50, 50, 10);                                                                         // 4620
    \*/                                                                                                                // 4621
    proto.rect = function (x, y, w, h, rx, ry) {                                                                       // 4622
        var attr;                                                                                                      // 4623
        if (ry == null) {                                                                                              // 4624
            ry = rx;                                                                                                   // 4625
        }                                                                                                              // 4626
        if (is(x, "object") && x == "[object Object]") {                                                               // 4627
            attr = x;                                                                                                  // 4628
        } else if (x != null) {                                                                                        // 4629
            attr = {                                                                                                   // 4630
                x: x,                                                                                                  // 4631
                y: y,                                                                                                  // 4632
                width: w,                                                                                              // 4633
                height: h                                                                                              // 4634
            };                                                                                                         // 4635
            if (rx != null) {                                                                                          // 4636
                attr.rx = rx;                                                                                          // 4637
                attr.ry = ry;                                                                                          // 4638
            }                                                                                                          // 4639
        }                                                                                                              // 4640
        return this.el("rect", attr);                                                                                  // 4641
    };                                                                                                                 // 4642
    /*\
     * Paper.circle                                                                                                    // 4644
     [ method ]                                                                                                        // 4645
     **                                                                                                                // 4646
     * Draws a circle                                                                                                  // 4647
     **                                                                                                                // 4648
     - x (number) x coordinate of the centre                                                                           // 4649
     - y (number) y coordinate of the centre                                                                           // 4650
     - r (number) radius                                                                                               // 4651
     = (object) the `circle` element                                                                                   // 4652
     **                                                                                                                // 4653
     > Usage                                                                                                           // 4654
     | var c = paper.circle(50, 50, 40);                                                                               // 4655
    \*/                                                                                                                // 4656
    proto.circle = function (cx, cy, r) {                                                                              // 4657
        var attr;                                                                                                      // 4658
        if (is(cx, "object") && cx == "[object Object]") {                                                             // 4659
            attr = cx;                                                                                                 // 4660
        } else if (cx != null) {                                                                                       // 4661
            attr = {                                                                                                   // 4662
                cx: cx,                                                                                                // 4663
                cy: cy,                                                                                                // 4664
                r: r                                                                                                   // 4665
            };                                                                                                         // 4666
        }                                                                                                              // 4667
        return this.el("circle", attr);                                                                                // 4668
    };                                                                                                                 // 4669
                                                                                                                       // 4670
    var preload = (function () {                                                                                       // 4671
        function onerror() {                                                                                           // 4672
            this.parentNode.removeChild(this);                                                                         // 4673
        }                                                                                                              // 4674
        return function (src, f) {                                                                                     // 4675
            var img = glob.doc.createElement("img"),                                                                   // 4676
                body = glob.doc.body;                                                                                  // 4677
            img.style.cssText = "position:absolute;left:-9999em;top:-9999em";                                          // 4678
            img.onload = function () {                                                                                 // 4679
                f.call(img);                                                                                           // 4680
                img.onload = img.onerror = null;                                                                       // 4681
                body.removeChild(img);                                                                                 // 4682
            };                                                                                                         // 4683
            img.onerror = onerror;                                                                                     // 4684
            body.appendChild(img);                                                                                     // 4685
            img.src = src;                                                                                             // 4686
        };                                                                                                             // 4687
    }());                                                                                                              // 4688
                                                                                                                       // 4689
    /*\
     * Paper.image                                                                                                     // 4691
     [ method ]                                                                                                        // 4692
     **                                                                                                                // 4693
     * Places an image on the surface                                                                                  // 4694
     **                                                                                                                // 4695
     - src (string) URI of the source image                                                                            // 4696
     - x (number) x offset position                                                                                    // 4697
     - y (number) y offset position                                                                                    // 4698
     - width (number) width of the image                                                                               // 4699
     - height (number) height of the image                                                                             // 4700
     = (object) the `image` element                                                                                    // 4701
     * or                                                                                                              // 4702
     = (object) Snap element object with type `image`                                                                  // 4703
     **                                                                                                                // 4704
     > Usage                                                                                                           // 4705
     | var c = paper.image("apple.png", 10, 10, 80, 80);                                                               // 4706
    \*/                                                                                                                // 4707
    proto.image = function (src, x, y, width, height) {                                                                // 4708
        var el = this.el("image");                                                                                     // 4709
        if (is(src, "object") && "src" in src) {                                                                       // 4710
            el.attr(src);                                                                                              // 4711
        } else if (src != null) {                                                                                      // 4712
            var set = {                                                                                                // 4713
                "xlink:href": src,                                                                                     // 4714
                preserveAspectRatio: "none"                                                                            // 4715
            };                                                                                                         // 4716
            if (x != null && y != null) {                                                                              // 4717
                set.x = x;                                                                                             // 4718
                set.y = y;                                                                                             // 4719
            }                                                                                                          // 4720
            if (width != null && height != null) {                                                                     // 4721
                set.width = width;                                                                                     // 4722
                set.height = height;                                                                                   // 4723
            } else {                                                                                                   // 4724
                preload(src, function () {                                                                             // 4725
                    Snap._.$(el.node, {                                                                                // 4726
                        width: this.offsetWidth,                                                                       // 4727
                        height: this.offsetHeight                                                                      // 4728
                    });                                                                                                // 4729
                });                                                                                                    // 4730
            }                                                                                                          // 4731
            Snap._.$(el.node, set);                                                                                    // 4732
        }                                                                                                              // 4733
        return el;                                                                                                     // 4734
    };                                                                                                                 // 4735
    /*\
     * Paper.ellipse                                                                                                   // 4737
     [ method ]                                                                                                        // 4738
     **                                                                                                                // 4739
     * Draws an ellipse                                                                                                // 4740
     **                                                                                                                // 4741
     - x (number) x coordinate of the centre                                                                           // 4742
     - y (number) y coordinate of the centre                                                                           // 4743
     - rx (number) horizontal radius                                                                                   // 4744
     - ry (number) vertical radius                                                                                     // 4745
     = (object) the `ellipse` element                                                                                  // 4746
     **                                                                                                                // 4747
     > Usage                                                                                                           // 4748
     | var c = paper.ellipse(50, 50, 40, 20);                                                                          // 4749
    \*/                                                                                                                // 4750
    proto.ellipse = function (cx, cy, rx, ry) {                                                                        // 4751
        var attr;                                                                                                      // 4752
        if (is(cx, "object") && cx == "[object Object]") {                                                             // 4753
            attr = cx;                                                                                                 // 4754
        } else if (cx != null) {                                                                                       // 4755
            attr ={                                                                                                    // 4756
                cx: cx,                                                                                                // 4757
                cy: cy,                                                                                                // 4758
                rx: rx,                                                                                                // 4759
                ry: ry                                                                                                 // 4760
            };                                                                                                         // 4761
        }                                                                                                              // 4762
        return this.el("ellipse", attr);                                                                               // 4763
    };                                                                                                                 // 4764
    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.
    /*\
     * Paper.path                                                                                                      // 4767
     [ method ]                                                                                                        // 4768
     **                                                                                                                // 4769
     * Creates a `<path>` element using the given string as the path's definition                                      // 4770
     - pathString (string) #optional path string in SVG format                                                         // 4771
     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example: // 4772
     | "M10,20L30,40"                                                                                                  // 4773
     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.
     *                                                                                                                 // 4775
     # <p>Here is short list of commands available, for more details see <a href="http://www.w3.org/TR/SVG/paths.html#PathData" title="Details of a path's data attribute's format are described in the SVG specification.">SVG path string format</a> or <a href="https://developer.mozilla.org/en/SVG/Tutorial/Paths">article about path strings at MDN</a>.</p>
     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>                          // 4777
     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>                                                               // 4778
     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>                                                            // 4779
     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>                                                               // 4780
     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>                                                        // 4781
     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>                                                          // 4782
     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>                                                  // 4783
     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>                                                 // 4784
     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>                                       // 4785
     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>                                      // 4786
     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>       // 4787
     # <tr><td>R</td><td><a href="http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>
     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.                            // 4789
     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.
     > Usage                                                                                                           // 4791
     | var c = paper.path("M10 10L90 90");                                                                             // 4792
     | // draw a diagonal line:                                                                                        // 4793
     | // move to 10,10, line to 90,90                                                                                 // 4794
    \*/                                                                                                                // 4795
    proto.path = function (d) {                                                                                        // 4796
        var attr;                                                                                                      // 4797
        if (is(d, "object") && !is(d, "array")) {                                                                      // 4798
            attr = d;                                                                                                  // 4799
        } else if (d) {                                                                                                // 4800
            attr = {d: d};                                                                                             // 4801
        }                                                                                                              // 4802
        return this.el("path", attr);                                                                                  // 4803
    };                                                                                                                 // 4804
    /*\
     * Paper.g                                                                                                         // 4806
     [ method ]                                                                                                        // 4807
     **                                                                                                                // 4808
     * Creates a group element                                                                                         // 4809
     **                                                                                                                // 4810
     - varargs (…) #optional elements to nest within the group                                                         // 4811
     = (object) the `g` element                                                                                        // 4812
     **                                                                                                                // 4813
     > Usage                                                                                                           // 4814
     | var c1 = paper.circle(),                                                                                        // 4815
     |     c2 = paper.rect(),                                                                                          // 4816
     |     g = paper.g(c2, c1); // note that the order of elements is different                                        // 4817
     * or                                                                                                              // 4818
     | var c1 = paper.circle(),                                                                                        // 4819
     |     c2 = paper.rect(),                                                                                          // 4820
     |     g = paper.g();                                                                                              // 4821
     | g.add(c2, c1);                                                                                                  // 4822
    \*/                                                                                                                // 4823
    /*\
     * Paper.group                                                                                                     // 4825
     [ method ]                                                                                                        // 4826
     **                                                                                                                // 4827
     * See @Paper.g                                                                                                    // 4828
    \*/                                                                                                                // 4829
    proto.group = proto.g = function (first) {                                                                         // 4830
        var attr,                                                                                                      // 4831
            el = this.el("g");                                                                                         // 4832
        if (arguments.length == 1 && first && !first.type) {                                                           // 4833
            el.attr(first);                                                                                            // 4834
        } else if (arguments.length) {                                                                                 // 4835
            el.add(Array.prototype.slice.call(arguments, 0));                                                          // 4836
        }                                                                                                              // 4837
        return el;                                                                                                     // 4838
    };                                                                                                                 // 4839
    /*\
     * Paper.svg                                                                                                       // 4841
     [ method ]                                                                                                        // 4842
     **                                                                                                                // 4843
     * Creates a nested SVG element.                                                                                   // 4844
     - x (number) @optional X of the element                                                                           // 4845
     - y (number) @optional Y of the element                                                                           // 4846
     - width (number) @optional width of the element                                                                   // 4847
     - height (number) @optional height of the element                                                                 // 4848
     - vbx (number) @optional viewbox X                                                                                // 4849
     - vby (number) @optional viewbox Y                                                                                // 4850
     - vbw (number) @optional viewbox width                                                                            // 4851
     - vbh (number) @optional viewbox height                                                                           // 4852
     **                                                                                                                // 4853
     = (object) the `svg` element                                                                                      // 4854
     **                                                                                                                // 4855
    \*/                                                                                                                // 4856
    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {                                                   // 4857
        var attrs = {};                                                                                                // 4858
        if (is(x, "object") && y == null) {                                                                            // 4859
            attrs = x;                                                                                                 // 4860
        } else {                                                                                                       // 4861
            if (x != null) {                                                                                           // 4862
                attrs.x = x;                                                                                           // 4863
            }                                                                                                          // 4864
            if (y != null) {                                                                                           // 4865
                attrs.y = y;                                                                                           // 4866
            }                                                                                                          // 4867
            if (width != null) {                                                                                       // 4868
                attrs.width = width;                                                                                   // 4869
            }                                                                                                          // 4870
            if (height != null) {                                                                                      // 4871
                attrs.height = height;                                                                                 // 4872
            }                                                                                                          // 4873
            if (vbx != null && vby != null && vbw != null && vbh != null) {                                            // 4874
                attrs.viewBox = [vbx, vby, vbw, vbh];                                                                  // 4875
            }                                                                                                          // 4876
        }                                                                                                              // 4877
        return this.el("svg", attrs);                                                                                  // 4878
    };                                                                                                                 // 4879
    /*\
     * Paper.mask                                                                                                      // 4881
     [ method ]                                                                                                        // 4882
     **                                                                                                                // 4883
     * Equivalent in behaviour to @Paper.g, except it’s a mask.                                                        // 4884
     **                                                                                                                // 4885
     = (object) the `mask` element                                                                                     // 4886
     **                                                                                                                // 4887
    \*/                                                                                                                // 4888
    proto.mask = function (first) {                                                                                    // 4889
        var attr,                                                                                                      // 4890
            el = this.el("mask");                                                                                      // 4891
        if (arguments.length == 1 && first && !first.type) {                                                           // 4892
            el.attr(first);                                                                                            // 4893
        } else if (arguments.length) {                                                                                 // 4894
            el.add(Array.prototype.slice.call(arguments, 0));                                                          // 4895
        }                                                                                                              // 4896
        return el;                                                                                                     // 4897
    };                                                                                                                 // 4898
    /*\
     * Paper.ptrn                                                                                                      // 4900
     [ method ]                                                                                                        // 4901
     **                                                                                                                // 4902
     * Equivalent in behaviour to @Paper.g, except it’s a pattern.                                                     // 4903
     - x (number) @optional X of the element                                                                           // 4904
     - y (number) @optional Y of the element                                                                           // 4905
     - width (number) @optional width of the element                                                                   // 4906
     - height (number) @optional height of the element                                                                 // 4907
     - vbx (number) @optional viewbox X                                                                                // 4908
     - vby (number) @optional viewbox Y                                                                                // 4909
     - vbw (number) @optional viewbox width                                                                            // 4910
     - vbh (number) @optional viewbox height                                                                           // 4911
     **                                                                                                                // 4912
     = (object) the `pattern` element                                                                                  // 4913
     **                                                                                                                // 4914
    \*/                                                                                                                // 4915
    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {                                                      // 4916
        if (is(x, "object")) {                                                                                         // 4917
            var attr = x;                                                                                              // 4918
        } else {                                                                                                       // 4919
            attr = {patternUnits: "userSpaceOnUse"};                                                                   // 4920
            if (x) {                                                                                                   // 4921
                attr.x = x;                                                                                            // 4922
            }                                                                                                          // 4923
            if (y) {                                                                                                   // 4924
                attr.y = y;                                                                                            // 4925
            }                                                                                                          // 4926
            if (width != null) {                                                                                       // 4927
                attr.width = width;                                                                                    // 4928
            }                                                                                                          // 4929
            if (height != null) {                                                                                      // 4930
                attr.height = height;                                                                                  // 4931
            }                                                                                                          // 4932
            if (vx != null && vy != null && vw != null && vh != null) {                                                // 4933
                attr.viewBox = [vx, vy, vw, vh];                                                                       // 4934
            } else {                                                                                                   // 4935
                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];                                              // 4936
            }                                                                                                          // 4937
        }                                                                                                              // 4938
        return this.el("pattern", attr);                                                                               // 4939
    };                                                                                                                 // 4940
    /*\
     * Paper.use                                                                                                       // 4942
     [ method ]                                                                                                        // 4943
     **                                                                                                                // 4944
     * Creates a <use> element.                                                                                        // 4945
     - id (string) @optional id of element to link                                                                     // 4946
     * or                                                                                                              // 4947
     - id (Element) @optional element to link                                                                          // 4948
     **                                                                                                                // 4949
     = (object) the `use` element                                                                                      // 4950
     **                                                                                                                // 4951
    \*/                                                                                                                // 4952
    proto.use = function (id) {                                                                                        // 4953
        if (id != null) {                                                                                              // 4954
            if (id instanceof Element) {                                                                               // 4955
                if (!id.attr("id")) {                                                                                  // 4956
                    id.attr({id: Snap._.id(id)});                                                                      // 4957
                }                                                                                                      // 4958
                id = id.attr("id");                                                                                    // 4959
            }                                                                                                          // 4960
            if (String(id).charAt() == "#") {                                                                          // 4961
                id = id.substring(1);                                                                                  // 4962
            }                                                                                                          // 4963
            return this.el("use", {"xlink:href": "#" + id});                                                           // 4964
        } else {                                                                                                       // 4965
            return Element.prototype.use.call(this);                                                                   // 4966
        }                                                                                                              // 4967
    };                                                                                                                 // 4968
    /*\
     * Paper.symbol                                                                                                    // 4970
     [ method ]                                                                                                        // 4971
     **                                                                                                                // 4972
     * Creates a <symbol> element.                                                                                     // 4973
     - vbx (number) @optional viewbox X                                                                                // 4974
     - vby (number) @optional viewbox Y                                                                                // 4975
     - vbw (number) @optional viewbox width                                                                            // 4976
     - vbh (number) @optional viewbox height                                                                           // 4977
     = (object) the `symbol` element                                                                                   // 4978
     **                                                                                                                // 4979
    \*/                                                                                                                // 4980
    proto.symbol = function (vx, vy, vw, vh) {                                                                         // 4981
        var attr = {};                                                                                                 // 4982
        if (vx != null && vy != null && vw != null && vh != null) {                                                    // 4983
            attr.viewBox = [vx, vy, vw, vh];                                                                           // 4984
        }                                                                                                              // 4985
                                                                                                                       // 4986
        return this.el("symbol", attr);                                                                                // 4987
    };                                                                                                                 // 4988
    /*\
     * Paper.text                                                                                                      // 4990
     [ method ]                                                                                                        // 4991
     **                                                                                                                // 4992
     * Draws a text string                                                                                             // 4993
     **                                                                                                                // 4994
     - x (number) x coordinate position                                                                                // 4995
     - y (number) y coordinate position                                                                                // 4996
     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements      // 4997
     = (object) the `text` element                                                                                     // 4998
     **                                                                                                                // 4999
     > Usage                                                                                                           // 5000
     | var t1 = paper.text(50, 50, "Snap");                                                                            // 5001
     | var t2 = paper.text(50, 50, ["S","n","a","p"]);                                                                 // 5002
     | // Text path usage                                                                                              // 5003
     | t1.attr({textpath: "M10,10L100,100"});                                                                          // 5004
     | // or                                                                                                           // 5005
     | var pth = paper.path("M10,10L100,100");                                                                         // 5006
     | t1.attr({textpath: pth});                                                                                       // 5007
    \*/                                                                                                                // 5008
    proto.text = function (x, y, text) {                                                                               // 5009
        var attr = {};                                                                                                 // 5010
        if (is(x, "object")) {                                                                                         // 5011
            attr = x;                                                                                                  // 5012
        } else if (x != null) {                                                                                        // 5013
            attr = {                                                                                                   // 5014
                x: x,                                                                                                  // 5015
                y: y,                                                                                                  // 5016
                text: text || ""                                                                                       // 5017
            };                                                                                                         // 5018
        }                                                                                                              // 5019
        return this.el("text", attr);                                                                                  // 5020
    };                                                                                                                 // 5021
    /*\
     * Paper.line                                                                                                      // 5023
     [ method ]                                                                                                        // 5024
     **                                                                                                                // 5025
     * Draws a line                                                                                                    // 5026
     **                                                                                                                // 5027
     - x1 (number) x coordinate position of the start                                                                  // 5028
     - y1 (number) y coordinate position of the start                                                                  // 5029
     - x2 (number) x coordinate position of the end                                                                    // 5030
     - y2 (number) y coordinate position of the end                                                                    // 5031
     = (object) the `line` element                                                                                     // 5032
     **                                                                                                                // 5033
     > Usage                                                                                                           // 5034
     | var t1 = paper.line(50, 50, 100, 100);                                                                          // 5035
    \*/                                                                                                                // 5036
    proto.line = function (x1, y1, x2, y2) {                                                                           // 5037
        var attr = {};                                                                                                 // 5038
        if (is(x1, "object")) {                                                                                        // 5039
            attr = x1;                                                                                                 // 5040
        } else if (x1 != null) {                                                                                       // 5041
            attr = {                                                                                                   // 5042
                x1: x1,                                                                                                // 5043
                x2: x2,                                                                                                // 5044
                y1: y1,                                                                                                // 5045
                y2: y2                                                                                                 // 5046
            };                                                                                                         // 5047
        }                                                                                                              // 5048
        return this.el("line", attr);                                                                                  // 5049
    };                                                                                                                 // 5050
    /*\
     * Paper.polyline                                                                                                  // 5052
     [ method ]                                                                                                        // 5053
     **                                                                                                                // 5054
     * Draws a polyline                                                                                                // 5055
     **                                                                                                                // 5056
     - points (array) array of points                                                                                  // 5057
     * or                                                                                                              // 5058
     - varargs (…) points                                                                                              // 5059
     = (object) the `polyline` element                                                                                 // 5060
     **                                                                                                                // 5061
     > Usage                                                                                                           // 5062
     | var p1 = paper.polyline([10, 10, 100, 100]);                                                                    // 5063
     | var p2 = paper.polyline(10, 10, 100, 100);                                                                      // 5064
    \*/                                                                                                                // 5065
    proto.polyline = function (points) {                                                                               // 5066
        if (arguments.length > 1) {                                                                                    // 5067
            points = Array.prototype.slice.call(arguments, 0);                                                         // 5068
        }                                                                                                              // 5069
        var attr = {};                                                                                                 // 5070
        if (is(points, "object") && !is(points, "array")) {                                                            // 5071
            attr = points;                                                                                             // 5072
        } else if (points != null) {                                                                                   // 5073
            attr = {points: points};                                                                                   // 5074
        }                                                                                                              // 5075
        return this.el("polyline", attr);                                                                              // 5076
    };                                                                                                                 // 5077
    /*\
     * Paper.polygon                                                                                                   // 5079
     [ method ]                                                                                                        // 5080
     **                                                                                                                // 5081
     * Draws a polygon. See @Paper.polyline                                                                            // 5082
    \*/                                                                                                                // 5083
    proto.polygon = function (points) {                                                                                // 5084
        if (arguments.length > 1) {                                                                                    // 5085
            points = Array.prototype.slice.call(arguments, 0);                                                         // 5086
        }                                                                                                              // 5087
        var attr = {};                                                                                                 // 5088
        if (is(points, "object") && !is(points, "array")) {                                                            // 5089
            attr = points;                                                                                             // 5090
        } else if (points != null) {                                                                                   // 5091
            attr = {points: points};                                                                                   // 5092
        }                                                                                                              // 5093
        return this.el("polygon", attr);                                                                               // 5094
    };                                                                                                                 // 5095
    // gradients                                                                                                       // 5096
    (function () {                                                                                                     // 5097
        var $ = Snap._.$;                                                                                              // 5098
        // gradients' helpers                                                                                          // 5099
        function Gstops() {                                                                                            // 5100
            return this.selectAll("stop");                                                                             // 5101
        }                                                                                                              // 5102
        function GaddStop(color, offset) {                                                                             // 5103
            var stop = $("stop"),                                                                                      // 5104
                attr = {                                                                                               // 5105
                    offset: +offset + "%"                                                                              // 5106
                };                                                                                                     // 5107
            color = Snap.color(color);                                                                                 // 5108
            attr["stop-color"] = color.hex;                                                                            // 5109
            if (color.opacity < 1) {                                                                                   // 5110
                attr["stop-opacity"] = color.opacity;                                                                  // 5111
            }                                                                                                          // 5112
            $(stop, attr);                                                                                             // 5113
            this.node.appendChild(stop);                                                                               // 5114
            return this;                                                                                               // 5115
        }                                                                                                              // 5116
        function GgetBBox() {                                                                                          // 5117
            if (this.type == "linearGradient") {                                                                       // 5118
                var x1 = $(this.node, "x1") || 0,                                                                      // 5119
                    x2 = $(this.node, "x2") || 1,                                                                      // 5120
                    y1 = $(this.node, "y1") || 0,                                                                      // 5121
                    y2 = $(this.node, "y2") || 0;                                                                      // 5122
                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));                                       // 5123
            } else {                                                                                                   // 5124
                var cx = this.node.cx || .5,                                                                           // 5125
                    cy = this.node.cy || .5,                                                                           // 5126
                    r = this.node.r || 0;                                                                              // 5127
                return Snap._.box(cx - r, cy - r, r * 2, r * 2);                                                       // 5128
            }                                                                                                          // 5129
        }                                                                                                              // 5130
        function gradient(defs, str) {                                                                                 // 5131
            var grad = eve("snap.util.grad.parse", null, str).firstDefined(),                                          // 5132
                el;                                                                                                    // 5133
            if (!grad) {                                                                                               // 5134
                return null;                                                                                           // 5135
            }                                                                                                          // 5136
            grad.params.unshift(defs);                                                                                 // 5137
            if (grad.type.toLowerCase() == "l") {                                                                      // 5138
                el = gradientLinear.apply(0, grad.params);                                                             // 5139
            } else {                                                                                                   // 5140
                el = gradientRadial.apply(0, grad.params);                                                             // 5141
            }                                                                                                          // 5142
            if (grad.type != grad.type.toLowerCase()) {                                                                // 5143
                $(el.node, {                                                                                           // 5144
                    gradientUnits: "userSpaceOnUse"                                                                    // 5145
                });                                                                                                    // 5146
            }                                                                                                          // 5147
            var stops = grad.stops,                                                                                    // 5148
                len = stops.length,                                                                                    // 5149
                start = 0,                                                                                             // 5150
                j = 0;                                                                                                 // 5151
            function seed(i, end) {                                                                                    // 5152
                var step = (end - start) / (i - j);                                                                    // 5153
                for (var k = j; k < i; k++) {                                                                          // 5154
                    stops[k].offset = +(+start + step * (k - j)).toFixed(2);                                           // 5155
                }                                                                                                      // 5156
                j = i;                                                                                                 // 5157
                start = end;                                                                                           // 5158
            }                                                                                                          // 5159
            len--;                                                                                                     // 5160
            for (var i = 0; i < len; i++) if ("offset" in stops[i]) {                                                  // 5161
                seed(i, stops[i].offset);                                                                              // 5162
            }                                                                                                          // 5163
            stops[len].offset = stops[len].offset || 100;                                                              // 5164
            seed(len, stops[len].offset);                                                                              // 5165
            for (i = 0; i <= len; i++) {                                                                               // 5166
                var stop = stops[i];                                                                                   // 5167
                el.addStop(stop.color, stop.offset);                                                                   // 5168
            }                                                                                                          // 5169
            return el;                                                                                                 // 5170
        }                                                                                                              // 5171
        function gradientLinear(defs, x1, y1, x2, y2) {                                                                // 5172
            var el = Snap._.make("linearGradient", defs);                                                              // 5173
            el.stops = Gstops;                                                                                         // 5174
            el.addStop = GaddStop;                                                                                     // 5175
            el.getBBox = GgetBBox;                                                                                     // 5176
            if (x1 != null) {                                                                                          // 5177
                $(el.node, {                                                                                           // 5178
                    x1: x1,                                                                                            // 5179
                    y1: y1,                                                                                            // 5180
                    x2: x2,                                                                                            // 5181
                    y2: y2                                                                                             // 5182
                });                                                                                                    // 5183
            }                                                                                                          // 5184
            return el;                                                                                                 // 5185
        }                                                                                                              // 5186
        function gradientRadial(defs, cx, cy, r, fx, fy) {                                                             // 5187
            var el = Snap._.make("radialGradient", defs);                                                              // 5188
            el.stops = Gstops;                                                                                         // 5189
            el.addStop = GaddStop;                                                                                     // 5190
            el.getBBox = GgetBBox;                                                                                     // 5191
            if (cx != null) {                                                                                          // 5192
                $(el.node, {                                                                                           // 5193
                    cx: cx,                                                                                            // 5194
                    cy: cy,                                                                                            // 5195
                    r: r                                                                                               // 5196
                });                                                                                                    // 5197
            }                                                                                                          // 5198
            if (fx != null && fy != null) {                                                                            // 5199
                $(el.node, {                                                                                           // 5200
                    fx: fx,                                                                                            // 5201
                    fy: fy                                                                                             // 5202
                });                                                                                                    // 5203
            }                                                                                                          // 5204
            return el;                                                                                                 // 5205
        }                                                                                                              // 5206
        /*\
         * Paper.gradient                                                                                              // 5208
         [ method ]                                                                                                    // 5209
         **                                                                                                            // 5210
         * Creates a gradient element                                                                                  // 5211
         **                                                                                                            // 5212
         - gradient (string) gradient descriptor                                                                       // 5213
         > Gradient Descriptor                                                                                         // 5214
         * The gradient descriptor is an expression formatted as                                                       // 5215
         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be                                                   // 5216
         * either linear or radial.  The uppercase `L` or `R` letters                                                  // 5217
         * indicate absolute coordinates offset from the SVG surface.                                                  // 5218
         * Lowercase `l` or `r` letters indicate coordinates                                                           // 5219
         * calculated relative to the element to which the gradient is                                                 // 5220
         * applied.  Coordinates specify a linear gradient vector as                                                   // 5221
         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,                                                 // 5222
         * `r` and optional `fx`, `fy` specifying a focal point away                                                   // 5223
         * from the center of the circle. Specify `<colors>` as a list                                                 // 5224
         * of dash-separated CSS color values.  Each color may be                                                      // 5225
         * followed by a custom offset value, separated with a colon                                                   // 5226
         * character.                                                                                                  // 5227
         > Examples                                                                                                    // 5228
         * Linear gradient, relative from top-left corner to bottom-right                                              // 5229
         * corner, from black through red to white:                                                                    // 5230
         | var g = paper.gradient("l(0, 0, 1, 1)#000-#f00-#fff");                                                      // 5231
         * Linear gradient, absolute from (0, 0) to (100, 100), from black                                             // 5232
         * through red at 25% to white:                                                                                // 5233
         | var g = paper.gradient("L(0, 0, 100, 100)#000-#f00:25-#fff");                                               // 5234
         * Radial gradient, relative from the center of the element with radius                                        // 5235
         * half the width, from black to white:                                                                        // 5236
         | var g = paper.gradient("r(0.5, 0.5, 0.5)#000-#fff");                                                        // 5237
         * To apply the gradient:                                                                                      // 5238
         | paper.circle(50, 50, 40).attr({                                                                             // 5239
         |     fill: g                                                                                                 // 5240
         | });                                                                                                         // 5241
         = (object) the `gradient` element                                                                             // 5242
        \*/                                                                                                            // 5243
        proto.gradient = function (str) {                                                                              // 5244
            return gradient(this.defs, str);                                                                           // 5245
        };                                                                                                             // 5246
        proto.gradientLinear = function (x1, y1, x2, y2) {                                                             // 5247
            return gradientLinear(this.defs, x1, y1, x2, y2);                                                          // 5248
        };                                                                                                             // 5249
        proto.gradientRadial = function (cx, cy, r, fx, fy) {                                                          // 5250
            return gradientRadial(this.defs, cx, cy, r, fx, fy);                                                       // 5251
        };                                                                                                             // 5252
        /*\
         * Paper.toString                                                                                              // 5254
         [ method ]                                                                                                    // 5255
         **                                                                                                            // 5256
         * Returns SVG code for the @Paper                                                                             // 5257
         = (string) SVG code for the @Paper                                                                            // 5258
        \*/                                                                                                            // 5259
        proto.toString = function () {                                                                                 // 5260
            var doc = this.node.ownerDocument,                                                                         // 5261
                f = doc.createDocumentFragment(),                                                                      // 5262
                d = doc.createElement("div"),                                                                          // 5263
                svg = this.node.cloneNode(true),                                                                       // 5264
                res;                                                                                                   // 5265
            f.appendChild(d);                                                                                          // 5266
            d.appendChild(svg);                                                                                        // 5267
            Snap._.$(svg, {xmlns: "http://www.w3.org/2000/svg"});                                                      // 5268
            res = d.innerHTML;                                                                                         // 5269
            f.removeChild(f.firstChild);                                                                               // 5270
            return res;                                                                                                // 5271
        };                                                                                                             // 5272
        /*\
         * Paper.toDataURL                                                                                             // 5274
         [ method ]                                                                                                    // 5275
         **                                                                                                            // 5276
         * Returns SVG code for the @Paper as Data URI string.                                                         // 5277
         = (string) Data URI string                                                                                    // 5278
        \*/                                                                                                            // 5279
        proto.toDataURL = function () {                                                                                // 5280
            if (window && window.btoa) {                                                                               // 5281
                return "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(this)));                        // 5282
            }                                                                                                          // 5283
        };                                                                                                             // 5284
        /*\
         * Paper.clear                                                                                                 // 5286
         [ method ]                                                                                                    // 5287
         **                                                                                                            // 5288
         * Removes all child nodes of the paper, except <defs>.                                                        // 5289
        \*/                                                                                                            // 5290
        proto.clear = function () {                                                                                    // 5291
            var node = this.node.firstChild,                                                                           // 5292
                next;                                                                                                  // 5293
            while (node) {                                                                                             // 5294
                next = node.nextSibling;                                                                               // 5295
                if (node.tagName != "defs") {                                                                          // 5296
                    node.parentNode.removeChild(node);                                                                 // 5297
                } else {                                                                                               // 5298
                    proto.clear.call({node: node});                                                                    // 5299
                }                                                                                                      // 5300
                node = next;                                                                                           // 5301
            }                                                                                                          // 5302
        };                                                                                                             // 5303
    }());                                                                                                              // 5304
});                                                                                                                    // 5305
                                                                                                                       // 5306
// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 5307
//                                                                                                                     // 5308
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 5309
// you may not use this file except in compliance with the License.                                                    // 5310
// You may obtain a copy of the License at                                                                             // 5311
//                                                                                                                     // 5312
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 5313
//                                                                                                                     // 5314
// Unless required by applicable law or agreed to in writing, software                                                 // 5315
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 5316
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 5317
// See the License for the specific language governing permissions and                                                 // 5318
// limitations under the License.                                                                                      // 5319
Snap.plugin(function (Snap, Element, Paper, glob) {                                                                    // 5320
    var elproto = Element.prototype,                                                                                   // 5321
        is = Snap.is,                                                                                                  // 5322
        clone = Snap._.clone,                                                                                          // 5323
        has = "hasOwnProperty",                                                                                        // 5324
        p2s = /,?([a-z]),?/gi,                                                                                         // 5325
        toFloat = parseFloat,                                                                                          // 5326
        math = Math,                                                                                                   // 5327
        PI = math.PI,                                                                                                  // 5328
        mmin = math.min,                                                                                               // 5329
        mmax = math.max,                                                                                               // 5330
        pow = math.pow,                                                                                                // 5331
        abs = math.abs;                                                                                                // 5332
    function paths(ps) {                                                                                               // 5333
        var p = paths.ps = paths.ps || {};                                                                             // 5334
        if (p[ps]) {                                                                                                   // 5335
            p[ps].sleep = 100;                                                                                         // 5336
        } else {                                                                                                       // 5337
            p[ps] = {                                                                                                  // 5338
                sleep: 100                                                                                             // 5339
            };                                                                                                         // 5340
        }                                                                                                              // 5341
        setTimeout(function () {                                                                                       // 5342
            for (var key in p) if (p[has](key) && key != ps) {                                                         // 5343
                p[key].sleep--;                                                                                        // 5344
                !p[key].sleep && delete p[key];                                                                        // 5345
            }                                                                                                          // 5346
        });                                                                                                            // 5347
        return p[ps];                                                                                                  // 5348
    }                                                                                                                  // 5349
    function box(x, y, width, height) {                                                                                // 5350
        if (x == null) {                                                                                               // 5351
            x = y = width = height = 0;                                                                                // 5352
        }                                                                                                              // 5353
        if (y == null) {                                                                                               // 5354
            y = x.y;                                                                                                   // 5355
            width = x.width;                                                                                           // 5356
            height = x.height;                                                                                         // 5357
            x = x.x;                                                                                                   // 5358
        }                                                                                                              // 5359
        return {                                                                                                       // 5360
            x: x,                                                                                                      // 5361
            y: y,                                                                                                      // 5362
            width: width,                                                                                              // 5363
            w: width,                                                                                                  // 5364
            height: height,                                                                                            // 5365
            h: height,                                                                                                 // 5366
            x2: x + width,                                                                                             // 5367
            y2: y + height,                                                                                            // 5368
            cx: x + width / 2,                                                                                         // 5369
            cy: y + height / 2,                                                                                        // 5370
            r1: math.min(width, height) / 2,                                                                           // 5371
            r2: math.max(width, height) / 2,                                                                           // 5372
            r0: math.sqrt(width * width + height * height) / 2,                                                        // 5373
            path: rectPath(x, y, width, height),                                                                       // 5374
            vb: [x, y, width, height].join(" ")                                                                        // 5375
        };                                                                                                             // 5376
    }                                                                                                                  // 5377
    function toString() {                                                                                              // 5378
        return this.join(",").replace(p2s, "$1");                                                                      // 5379
    }                                                                                                                  // 5380
    function pathClone(pathArray) {                                                                                    // 5381
        var res = clone(pathArray);                                                                                    // 5382
        res.toString = toString;                                                                                       // 5383
        return res;                                                                                                    // 5384
    }                                                                                                                  // 5385
    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {                                 // 5386
        if (length == null) {                                                                                          // 5387
            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);                                                     // 5388
        } else {                                                                                                       // 5389
            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,                                           // 5390
                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));                                            // 5391
        }                                                                                                              // 5392
    }                                                                                                                  // 5393
    function getLengthFactory(istotal, subpath) {                                                                      // 5394
        function O(val) {                                                                                              // 5395
            return +(+val).toFixed(3);                                                                                 // 5396
        }                                                                                                              // 5397
        return Snap._.cacher(function (path, length, onlystart) {                                                      // 5398
            if (path instanceof Element) {                                                                             // 5399
                path = path.attr("d");                                                                                 // 5400
            }                                                                                                          // 5401
            path = path2curve(path);                                                                                   // 5402
            var x, y, p, l, sp = "", subpaths = {}, point,                                                             // 5403
                len = 0;                                                                                               // 5404
            for (var i = 0, ii = path.length; i < ii; i++) {                                                           // 5405
                p = path[i];                                                                                           // 5406
                if (p[0] == "M") {                                                                                     // 5407
                    x = +p[1];                                                                                         // 5408
                    y = +p[2];                                                                                         // 5409
                } else {                                                                                               // 5410
                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);                             // 5411
                    if (len + l > length) {                                                                            // 5412
                        if (subpath && !subpaths.start) {                                                              // 5413
                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);   // 5414
                            sp += [                                                                                    // 5415
                                "C" + O(point.start.x),                                                                // 5416
                                O(point.start.y),                                                                      // 5417
                                O(point.m.x),                                                                          // 5418
                                O(point.m.y),                                                                          // 5419
                                O(point.x),                                                                            // 5420
                                O(point.y)                                                                             // 5421
                            ];                                                                                         // 5422
                            if (onlystart) {return sp;}                                                                // 5423
                            subpaths.start = sp;                                                                       // 5424
                            sp = [                                                                                     // 5425
                                "M" + O(point.x),                                                                      // 5426
                                O(point.y) + "C" + O(point.n.x),                                                       // 5427
                                O(point.n.y),                                                                          // 5428
                                O(point.end.x),                                                                        // 5429
                                O(point.end.y),                                                                        // 5430
                                O(p[5]),                                                                               // 5431
                                O(p[6])                                                                                // 5432
                            ].join();                                                                                  // 5433
                            len += l;                                                                                  // 5434
                            x = +p[5];                                                                                 // 5435
                            y = +p[6];                                                                                 // 5436
                            continue;                                                                                  // 5437
                        }                                                                                              // 5438
                        if (!istotal && !subpath) {                                                                    // 5439
                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);   // 5440
                            return point;                                                                              // 5441
                        }                                                                                              // 5442
                    }                                                                                                  // 5443
                    len += l;                                                                                          // 5444
                    x = +p[5];                                                                                         // 5445
                    y = +p[6];                                                                                         // 5446
                }                                                                                                      // 5447
                sp += p.shift() + p;                                                                                   // 5448
            }                                                                                                          // 5449
            subpaths.end = sp;                                                                                         // 5450
            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);
            return point;                                                                                              // 5452
        }, null, Snap._.clone);                                                                                        // 5453
    }                                                                                                                  // 5454
    var getTotalLength = getLengthFactory(1),                                                                          // 5455
        getPointAtLength = getLengthFactory(),                                                                         // 5456
        getSubpathsAtLength = getLengthFactory(0, 1);                                                                  // 5457
    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {                                            // 5458
        var t1 = 1 - t,                                                                                                // 5459
            t13 = pow(t1, 3),                                                                                          // 5460
            t12 = pow(t1, 2),                                                                                          // 5461
            t2 = t * t,                                                                                                // 5462
            t3 = t2 * t,                                                                                               // 5463
            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,                                       // 5464
            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,                                       // 5465
            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),                                               // 5466
            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),                                               // 5467
            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),                                               // 5468
            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),                                               // 5469
            ax = t1 * p1x + t * c1x,                                                                                   // 5470
            ay = t1 * p1y + t * c1y,                                                                                   // 5471
            cx = t1 * c2x + t * p2x,                                                                                   // 5472
            cy = t1 * c2y + t * p2y,                                                                                   // 5473
            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);                                                    // 5474
        // (mx > nx || my < ny) && (alpha += 180);                                                                     // 5475
        return {                                                                                                       // 5476
            x: x,                                                                                                      // 5477
            y: y,                                                                                                      // 5478
            m: {x: mx, y: my},                                                                                         // 5479
            n: {x: nx, y: ny},                                                                                         // 5480
            start: {x: ax, y: ay},                                                                                     // 5481
            end: {x: cx, y: cy},                                                                                       // 5482
            alpha: alpha                                                                                               // 5483
        };                                                                                                             // 5484
    }                                                                                                                  // 5485
    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {                                                      // 5486
        if (!Snap.is(p1x, "array")) {                                                                                  // 5487
            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];                                                            // 5488
        }                                                                                                              // 5489
        var bbox = curveDim.apply(null, p1x);                                                                          // 5490
        return box(                                                                                                    // 5491
            bbox.min.x,                                                                                                // 5492
            bbox.min.y,                                                                                                // 5493
            bbox.max.x - bbox.min.x,                                                                                   // 5494
            bbox.max.y - bbox.min.y                                                                                    // 5495
        );                                                                                                             // 5496
    }                                                                                                                  // 5497
    function isPointInsideBBox(bbox, x, y) {                                                                           // 5498
        return  x >= bbox.x &&                                                                                         // 5499
                x <= bbox.x + bbox.width &&                                                                            // 5500
                y >= bbox.y &&                                                                                         // 5501
                y <= bbox.y + bbox.height;                                                                             // 5502
    }                                                                                                                  // 5503
    function isBBoxIntersect(bbox1, bbox2) {                                                                           // 5504
        bbox1 = box(bbox1);                                                                                            // 5505
        bbox2 = box(bbox2);                                                                                            // 5506
        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)                                                              // 5507
            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)                                                             // 5508
            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)                                                             // 5509
            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)                                                            // 5510
            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)                                                              // 5511
            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)                                                             // 5512
            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)                                                             // 5513
            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)                                                            // 5514
            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x                                                                // 5515
                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)                                                            // 5516
            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y                                                                // 5517
                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);                                                           // 5518
    }                                                                                                                  // 5519
    function base3(t, p1, p2, p3, p4) {                                                                                // 5520
        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,                                                                   // 5521
            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;                                                                   // 5522
        return t * t2 - 3 * p1 + 3 * p2;                                                                               // 5523
    }                                                                                                                  // 5524
    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {                                                               // 5525
        if (z == null) {                                                                                               // 5526
            z = 1;                                                                                                     // 5527
        }                                                                                                              // 5528
        z = z > 1 ? 1 : z < 0 ? 0 : z;                                                                                 // 5529
        var z2 = z / 2,                                                                                                // 5530
            n = 12,                                                                                                    // 5531
            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],                 // 5532
            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],           // 5533
            sum = 0;                                                                                                   // 5534
        for (var i = 0; i < n; i++) {                                                                                  // 5535
            var ct = z2 * Tvalues[i] + z2,                                                                             // 5536
                xbase = base3(ct, x1, x2, x3, x4),                                                                     // 5537
                ybase = base3(ct, y1, y2, y3, y4),                                                                     // 5538
                comb = xbase * xbase + ybase * ybase;                                                                  // 5539
            sum += Cvalues[i] * math.sqrt(comb);                                                                       // 5540
        }                                                                                                              // 5541
        return z2 * sum;                                                                                               // 5542
    }                                                                                                                  // 5543
    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {                                                           // 5544
        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {                                                   // 5545
            return;                                                                                                    // 5546
        }                                                                                                              // 5547
        var t = 1,                                                                                                     // 5548
            step = t / 2,                                                                                              // 5549
            t2 = t - step,                                                                                             // 5550
            l,                                                                                                         // 5551
            e = .01;                                                                                                   // 5552
        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);                                                                // 5553
        while (abs(l - ll) > e) {                                                                                      // 5554
            step /= 2;                                                                                                 // 5555
            t2 += (l < ll ? 1 : -1) * step;                                                                            // 5556
            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);                                                            // 5557
        }                                                                                                              // 5558
        return t2;                                                                                                     // 5559
    }                                                                                                                  // 5560
    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {                                                               // 5561
        if (                                                                                                           // 5562
            mmax(x1, x2) < mmin(x3, x4) ||                                                                             // 5563
            mmin(x1, x2) > mmax(x3, x4) ||                                                                             // 5564
            mmax(y1, y2) < mmin(y3, y4) ||                                                                             // 5565
            mmin(y1, y2) > mmax(y3, y4)                                                                                // 5566
        ) {                                                                                                            // 5567
            return;                                                                                                    // 5568
        }                                                                                                              // 5569
        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),                                    // 5570
            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),                                    // 5571
            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);                                               // 5572
                                                                                                                       // 5573
        if (!denominator) {                                                                                            // 5574
            return;                                                                                                    // 5575
        }                                                                                                              // 5576
        var px = nx / denominator,                                                                                     // 5577
            py = ny / denominator,                                                                                     // 5578
            px2 = +px.toFixed(2),                                                                                      // 5579
            py2 = +py.toFixed(2);                                                                                      // 5580
        if (                                                                                                           // 5581
            px2 < +mmin(x1, x2).toFixed(2) ||                                                                          // 5582
            px2 > +mmax(x1, x2).toFixed(2) ||                                                                          // 5583
            px2 < +mmin(x3, x4).toFixed(2) ||                                                                          // 5584
            px2 > +mmax(x3, x4).toFixed(2) ||                                                                          // 5585
            py2 < +mmin(y1, y2).toFixed(2) ||                                                                          // 5586
            py2 > +mmax(y1, y2).toFixed(2) ||                                                                          // 5587
            py2 < +mmin(y3, y4).toFixed(2) ||                                                                          // 5588
            py2 > +mmax(y3, y4).toFixed(2)                                                                             // 5589
        ) {                                                                                                            // 5590
            return;                                                                                                    // 5591
        }                                                                                                              // 5592
        return {x: px, y: py};                                                                                         // 5593
    }                                                                                                                  // 5594
    function inter(bez1, bez2) {                                                                                       // 5595
        return interHelper(bez1, bez2);                                                                                // 5596
    }                                                                                                                  // 5597
    function interCount(bez1, bez2) {                                                                                  // 5598
        return interHelper(bez1, bez2, 1);                                                                             // 5599
    }                                                                                                                  // 5600
    function interHelper(bez1, bez2, justCount) {                                                                      // 5601
        var bbox1 = bezierBBox(bez1),                                                                                  // 5602
            bbox2 = bezierBBox(bez2);                                                                                  // 5603
        if (!isBBoxIntersect(bbox1, bbox2)) {                                                                          // 5604
            return justCount ? 0 : [];                                                                                 // 5605
        }                                                                                                              // 5606
        var l1 = bezlen.apply(0, bez1),                                                                                // 5607
            l2 = bezlen.apply(0, bez2),                                                                                // 5608
            n1 = ~~(l1 / 8),                                                                                           // 5609
            n2 = ~~(l2 / 8),                                                                                           // 5610
            dots1 = [],                                                                                                // 5611
            dots2 = [],                                                                                                // 5612
            xy = {},                                                                                                   // 5613
            res = justCount ? 0 : [];                                                                                  // 5614
        for (var i = 0; i < n1 + 1; i++) {                                                                             // 5615
            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));                                                   // 5616
            dots1.push({x: p.x, y: p.y, t: i / n1});                                                                   // 5617
        }                                                                                                              // 5618
        for (i = 0; i < n2 + 1; i++) {                                                                                 // 5619
            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));                                                       // 5620
            dots2.push({x: p.x, y: p.y, t: i / n2});                                                                   // 5621
        }                                                                                                              // 5622
        for (i = 0; i < n1; i++) {                                                                                     // 5623
            for (var j = 0; j < n2; j++) {                                                                             // 5624
                var di = dots1[i],                                                                                     // 5625
                    di1 = dots1[i + 1],                                                                                // 5626
                    dj = dots2[j],                                                                                     // 5627
                    dj1 = dots2[j + 1],                                                                                // 5628
                    ci = abs(di1.x - di.x) < .001 ? "y" : "x",                                                         // 5629
                    cj = abs(dj1.x - dj.x) < .001 ? "y" : "x",                                                         // 5630
                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);                                // 5631
                if (is) {                                                                                              // 5632
                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {                                                      // 5633
                        continue;                                                                                      // 5634
                    }                                                                                                  // 5635
                    xy[is.x.toFixed(4)] = is.y.toFixed(4);                                                             // 5636
                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),                      // 5637
                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);                      // 5638
                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {                                                    // 5639
                        if (justCount) {                                                                               // 5640
                            res++;                                                                                     // 5641
                        } else {                                                                                       // 5642
                            res.push({                                                                                 // 5643
                                x: is.x,                                                                               // 5644
                                y: is.y,                                                                               // 5645
                                t1: t1,                                                                                // 5646
                                t2: t2                                                                                 // 5647
                            });                                                                                        // 5648
                        }                                                                                              // 5649
                    }                                                                                                  // 5650
                }                                                                                                      // 5651
            }                                                                                                          // 5652
        }                                                                                                              // 5653
        return res;                                                                                                    // 5654
    }                                                                                                                  // 5655
    function pathIntersection(path1, path2) {                                                                          // 5656
        return interPathHelper(path1, path2);                                                                          // 5657
    }                                                                                                                  // 5658
    function pathIntersectionNumber(path1, path2) {                                                                    // 5659
        return interPathHelper(path1, path2, 1);                                                                       // 5660
    }                                                                                                                  // 5661
    function interPathHelper(path1, path2, justCount) {                                                                // 5662
        path1 = path2curve(path1);                                                                                     // 5663
        path2 = path2curve(path2);                                                                                     // 5664
        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,                                                            // 5665
            res = justCount ? 0 : [];                                                                                  // 5666
        for (var i = 0, ii = path1.length; i < ii; i++) {                                                              // 5667
            var pi = path1[i];                                                                                         // 5668
            if (pi[0] == "M") {                                                                                        // 5669
                x1 = x1m = pi[1];                                                                                      // 5670
                y1 = y1m = pi[2];                                                                                      // 5671
            } else {                                                                                                   // 5672
                if (pi[0] == "C") {                                                                                    // 5673
                    bez1 = [x1, y1].concat(pi.slice(1));                                                               // 5674
                    x1 = bez1[6];                                                                                      // 5675
                    y1 = bez1[7];                                                                                      // 5676
                } else {                                                                                               // 5677
                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];                                                       // 5678
                    x1 = x1m;                                                                                          // 5679
                    y1 = y1m;                                                                                          // 5680
                }                                                                                                      // 5681
                for (var j = 0, jj = path2.length; j < jj; j++) {                                                      // 5682
                    var pj = path2[j];                                                                                 // 5683
                    if (pj[0] == "M") {                                                                                // 5684
                        x2 = x2m = pj[1];                                                                              // 5685
                        y2 = y2m = pj[2];                                                                              // 5686
                    } else {                                                                                           // 5687
                        if (pj[0] == "C") {                                                                            // 5688
                            bez2 = [x2, y2].concat(pj.slice(1));                                                       // 5689
                            x2 = bez2[6];                                                                              // 5690
                            y2 = bez2[7];                                                                              // 5691
                        } else {                                                                                       // 5692
                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];                                               // 5693
                            x2 = x2m;                                                                                  // 5694
                            y2 = y2m;                                                                                  // 5695
                        }                                                                                              // 5696
                        var intr = interHelper(bez1, bez2, justCount);                                                 // 5697
                        if (justCount) {                                                                               // 5698
                            res += intr;                                                                               // 5699
                        } else {                                                                                       // 5700
                            for (var k = 0, kk = intr.length; k < kk; k++) {                                           // 5701
                                intr[k].segment1 = i;                                                                  // 5702
                                intr[k].segment2 = j;                                                                  // 5703
                                intr[k].bez1 = bez1;                                                                   // 5704
                                intr[k].bez2 = bez2;                                                                   // 5705
                            }                                                                                          // 5706
                            res = res.concat(intr);                                                                    // 5707
                        }                                                                                              // 5708
                    }                                                                                                  // 5709
                }                                                                                                      // 5710
            }                                                                                                          // 5711
        }                                                                                                              // 5712
        return res;                                                                                                    // 5713
    }                                                                                                                  // 5714
    function isPointInsidePath(path, x, y) {                                                                           // 5715
        var bbox = pathBBox(path);                                                                                     // 5716
        return isPointInsideBBox(bbox, x, y) &&                                                                        // 5717
               interPathHelper(path, [["M", x, y], ["H", bbox.x2 + 10]], 1) % 2 == 1;                                  // 5718
    }                                                                                                                  // 5719
    function pathBBox(path) {                                                                                          // 5720
        var pth = paths(path);                                                                                         // 5721
        if (pth.bbox) {                                                                                                // 5722
            return clone(pth.bbox);                                                                                    // 5723
        }                                                                                                              // 5724
        if (!path) {                                                                                                   // 5725
            return box();                                                                                              // 5726
        }                                                                                                              // 5727
        path = path2curve(path);                                                                                       // 5728
        var x = 0,                                                                                                     // 5729
            y = 0,                                                                                                     // 5730
            X = [],                                                                                                    // 5731
            Y = [],                                                                                                    // 5732
            p;                                                                                                         // 5733
        for (var i = 0, ii = path.length; i < ii; i++) {                                                               // 5734
            p = path[i];                                                                                               // 5735
            if (p[0] == "M") {                                                                                         // 5736
                x = p[1];                                                                                              // 5737
                y = p[2];                                                                                              // 5738
                X.push(x);                                                                                             // 5739
                Y.push(y);                                                                                             // 5740
            } else {                                                                                                   // 5741
                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);                                          // 5742
                X = X.concat(dim.min.x, dim.max.x);                                                                    // 5743
                Y = Y.concat(dim.min.y, dim.max.y);                                                                    // 5744
                x = p[5];                                                                                              // 5745
                y = p[6];                                                                                              // 5746
            }                                                                                                          // 5747
        }                                                                                                              // 5748
        var xmin = mmin.apply(0, X),                                                                                   // 5749
            ymin = mmin.apply(0, Y),                                                                                   // 5750
            xmax = mmax.apply(0, X),                                                                                   // 5751
            ymax = mmax.apply(0, Y),                                                                                   // 5752
            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);                                                            // 5753
        pth.bbox = clone(bb);                                                                                          // 5754
        return bb;                                                                                                     // 5755
    }                                                                                                                  // 5756
    function rectPath(x, y, w, h, r) {                                                                                 // 5757
        if (r) {                                                                                                       // 5758
            return [                                                                                                   // 5759
                ["M", +x + (+r), y],                                                                                   // 5760
                ["l", w - r * 2, 0],                                                                                   // 5761
                ["a", r, r, 0, 0, 1, r, r],                                                                            // 5762
                ["l", 0, h - r * 2],                                                                                   // 5763
                ["a", r, r, 0, 0, 1, -r, r],                                                                           // 5764
                ["l", r * 2 - w, 0],                                                                                   // 5765
                ["a", r, r, 0, 0, 1, -r, -r],                                                                          // 5766
                ["l", 0, r * 2 - h],                                                                                   // 5767
                ["a", r, r, 0, 0, 1, r, -r],                                                                           // 5768
                ["z"]                                                                                                  // 5769
            ];                                                                                                         // 5770
        }                                                                                                              // 5771
        var res = [["M", x, y], ["l", w, 0], ["l", 0, h], ["l", -w, 0], ["z"]];                                        // 5772
        res.toString = toString;                                                                                       // 5773
        return res;                                                                                                    // 5774
    }                                                                                                                  // 5775
    function ellipsePath(x, y, rx, ry, a) {                                                                            // 5776
        if (a == null && ry == null) {                                                                                 // 5777
            ry = rx;                                                                                                   // 5778
        }                                                                                                              // 5779
        x = +x;                                                                                                        // 5780
        y = +y;                                                                                                        // 5781
        rx = +rx;                                                                                                      // 5782
        ry = +ry;                                                                                                      // 5783
        if (a != null) {                                                                                               // 5784
            var rad = Math.PI / 180,                                                                                   // 5785
                x1 = x + rx * Math.cos(-ry * rad),                                                                     // 5786
                x2 = x + rx * Math.cos(-a * rad),                                                                      // 5787
                y1 = y + rx * Math.sin(-ry * rad),                                                                     // 5788
                y2 = y + rx * Math.sin(-a * rad),                                                                      // 5789
                res = [["M", x1, y1], ["A", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];                                   // 5790
        } else {                                                                                                       // 5791
            res = [                                                                                                    // 5792
                ["M", x, y],                                                                                           // 5793
                ["m", 0, -ry],                                                                                         // 5794
                ["a", rx, ry, 0, 1, 1, 0, 2 * ry],                                                                     // 5795
                ["a", rx, ry, 0, 1, 1, 0, -2 * ry],                                                                    // 5796
                ["z"]                                                                                                  // 5797
            ];                                                                                                         // 5798
        }                                                                                                              // 5799
        res.toString = toString;                                                                                       // 5800
        return res;                                                                                                    // 5801
    }                                                                                                                  // 5802
    var unit2px = Snap._unit2px,                                                                                       // 5803
        getPath = {                                                                                                    // 5804
        path: function (el) {                                                                                          // 5805
            return el.attr("path");                                                                                    // 5806
        },                                                                                                             // 5807
        circle: function (el) {                                                                                        // 5808
            var attr = unit2px(el);                                                                                    // 5809
            return ellipsePath(attr.cx, attr.cy, attr.r);                                                              // 5810
        },                                                                                                             // 5811
        ellipse: function (el) {                                                                                       // 5812
            var attr = unit2px(el);                                                                                    // 5813
            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);                                          // 5814
        },                                                                                                             // 5815
        rect: function (el) {                                                                                          // 5816
            var attr = unit2px(el);                                                                                    // 5817
            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);                      // 5818
        },                                                                                                             // 5819
        image: function (el) {                                                                                         // 5820
            var attr = unit2px(el);                                                                                    // 5821
            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);                                        // 5822
        },                                                                                                             // 5823
        line: function (el) {                                                                                          // 5824
            return "M" + [el.attr("x1") || 0, el.attr("y1") || 0, el.attr("x2"), el.attr("y2")];                       // 5825
        },                                                                                                             // 5826
        polyline: function (el) {                                                                                      // 5827
            return "M" + el.attr("points");                                                                            // 5828
        },                                                                                                             // 5829
        polygon: function (el) {                                                                                       // 5830
            return "M" + el.attr("points") + "z";                                                                      // 5831
        },                                                                                                             // 5832
        deflt: function (el) {                                                                                         // 5833
            var bbox = el.node.getBBox();                                                                              // 5834
            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);                                                  // 5835
        }                                                                                                              // 5836
    };                                                                                                                 // 5837
    function pathToRelative(pathArray) {                                                                               // 5838
        var pth = paths(pathArray),                                                                                    // 5839
            lowerCase = String.prototype.toLowerCase;                                                                  // 5840
        if (pth.rel) {                                                                                                 // 5841
            return pathClone(pth.rel);                                                                                 // 5842
        }                                                                                                              // 5843
        if (!Snap.is(pathArray, "array") || !Snap.is(pathArray && pathArray[0], "array")) {                            // 5844
            pathArray = Snap.parsePathString(pathArray);                                                               // 5845
        }                                                                                                              // 5846
        var res = [],                                                                                                  // 5847
            x = 0,                                                                                                     // 5848
            y = 0,                                                                                                     // 5849
            mx = 0,                                                                                                    // 5850
            my = 0,                                                                                                    // 5851
            start = 0;                                                                                                 // 5852
        if (pathArray[0][0] == "M") {                                                                                  // 5853
            x = pathArray[0][1];                                                                                       // 5854
            y = pathArray[0][2];                                                                                       // 5855
            mx = x;                                                                                                    // 5856
            my = y;                                                                                                    // 5857
            start++;                                                                                                   // 5858
            res.push(["M", x, y]);                                                                                     // 5859
        }                                                                                                              // 5860
        for (var i = start, ii = pathArray.length; i < ii; i++) {                                                      // 5861
            var r = res[i] = [],                                                                                       // 5862
                pa = pathArray[i];                                                                                     // 5863
            if (pa[0] != lowerCase.call(pa[0])) {                                                                      // 5864
                r[0] = lowerCase.call(pa[0]);                                                                          // 5865
                switch (r[0]) {                                                                                        // 5866
                    case "a":                                                                                          // 5867
                        r[1] = pa[1];                                                                                  // 5868
                        r[2] = pa[2];                                                                                  // 5869
                        r[3] = pa[3];                                                                                  // 5870
                        r[4] = pa[4];                                                                                  // 5871
                        r[5] = pa[5];                                                                                  // 5872
                        r[6] = +(pa[6] - x).toFixed(3);                                                                // 5873
                        r[7] = +(pa[7] - y).toFixed(3);                                                                // 5874
                        break;                                                                                         // 5875
                    case "v":                                                                                          // 5876
                        r[1] = +(pa[1] - y).toFixed(3);                                                                // 5877
                        break;                                                                                         // 5878
                    case "m":                                                                                          // 5879
                        mx = pa[1];                                                                                    // 5880
                        my = pa[2];                                                                                    // 5881
                    default:                                                                                           // 5882
                        for (var j = 1, jj = pa.length; j < jj; j++) {                                                 // 5883
                            r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);                                            // 5884
                        }                                                                                              // 5885
                }                                                                                                      // 5886
            } else {                                                                                                   // 5887
                r = res[i] = [];                                                                                       // 5888
                if (pa[0] == "m") {                                                                                    // 5889
                    mx = pa[1] + x;                                                                                    // 5890
                    my = pa[2] + y;                                                                                    // 5891
                }                                                                                                      // 5892
                for (var k = 0, kk = pa.length; k < kk; k++) {                                                         // 5893
                    res[i][k] = pa[k];                                                                                 // 5894
                }                                                                                                      // 5895
            }                                                                                                          // 5896
            var len = res[i].length;                                                                                   // 5897
            switch (res[i][0]) {                                                                                       // 5898
                case "z":                                                                                              // 5899
                    x = mx;                                                                                            // 5900
                    y = my;                                                                                            // 5901
                    break;                                                                                             // 5902
                case "h":                                                                                              // 5903
                    x += +res[i][len - 1];                                                                             // 5904
                    break;                                                                                             // 5905
                case "v":                                                                                              // 5906
                    y += +res[i][len - 1];                                                                             // 5907
                    break;                                                                                             // 5908
                default:                                                                                               // 5909
                    x += +res[i][len - 2];                                                                             // 5910
                    y += +res[i][len - 1];                                                                             // 5911
            }                                                                                                          // 5912
        }                                                                                                              // 5913
        res.toString = toString;                                                                                       // 5914
        pth.rel = pathClone(res);                                                                                      // 5915
        return res;                                                                                                    // 5916
    }                                                                                                                  // 5917
    function pathToAbsolute(pathArray) {                                                                               // 5918
        var pth = paths(pathArray);                                                                                    // 5919
        if (pth.abs) {                                                                                                 // 5920
            return pathClone(pth.abs);                                                                                 // 5921
        }                                                                                                              // 5922
        if (!is(pathArray, "array") || !is(pathArray && pathArray[0], "array")) { // rough assumption                  // 5923
            pathArray = Snap.parsePathString(pathArray);                                                               // 5924
        }                                                                                                              // 5925
        if (!pathArray || !pathArray.length) {                                                                         // 5926
            return [["M", 0, 0]];                                                                                      // 5927
        }                                                                                                              // 5928
        var res = [],                                                                                                  // 5929
            x = 0,                                                                                                     // 5930
            y = 0,                                                                                                     // 5931
            mx = 0,                                                                                                    // 5932
            my = 0,                                                                                                    // 5933
            start = 0,                                                                                                 // 5934
            pa0;                                                                                                       // 5935
        if (pathArray[0][0] == "M") {                                                                                  // 5936
            x = +pathArray[0][1];                                                                                      // 5937
            y = +pathArray[0][2];                                                                                      // 5938
            mx = x;                                                                                                    // 5939
            my = y;                                                                                                    // 5940
            start++;                                                                                                   // 5941
            res[0] = ["M", x, y];                                                                                      // 5942
        }                                                                                                              // 5943
        var crz = pathArray.length == 3 &&                                                                             // 5944
            pathArray[0][0] == "M" &&                                                                                  // 5945
            pathArray[1][0].toUpperCase() == "R" &&                                                                    // 5946
            pathArray[2][0].toUpperCase() == "Z";                                                                      // 5947
        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {                                               // 5948
            res.push(r = []);                                                                                          // 5949
            pa = pathArray[i];                                                                                         // 5950
            pa0 = pa[0];                                                                                               // 5951
            if (pa0 != pa0.toUpperCase()) {                                                                            // 5952
                r[0] = pa0.toUpperCase();                                                                              // 5953
                switch (r[0]) {                                                                                        // 5954
                    case "A":                                                                                          // 5955
                        r[1] = pa[1];                                                                                  // 5956
                        r[2] = pa[2];                                                                                  // 5957
                        r[3] = pa[3];                                                                                  // 5958
                        r[4] = pa[4];                                                                                  // 5959
                        r[5] = pa[5];                                                                                  // 5960
                        r[6] = +pa[6] + x;                                                                             // 5961
                        r[7] = +pa[7] + y;                                                                             // 5962
                        break;                                                                                         // 5963
                    case "V":                                                                                          // 5964
                        r[1] = +pa[1] + y;                                                                             // 5965
                        break;                                                                                         // 5966
                    case "H":                                                                                          // 5967
                        r[1] = +pa[1] + x;                                                                             // 5968
                        break;                                                                                         // 5969
                    case "R":                                                                                          // 5970
                        var dots = [x, y].concat(pa.slice(1));                                                         // 5971
                        for (var j = 2, jj = dots.length; j < jj; j++) {                                               // 5972
                            dots[j] = +dots[j] + x;                                                                    // 5973
                            dots[++j] = +dots[j] + y;                                                                  // 5974
                        }                                                                                              // 5975
                        res.pop();                                                                                     // 5976
                        res = res.concat(catmullRom2bezier(dots, crz));                                                // 5977
                        break;                                                                                         // 5978
                    case "O":                                                                                          // 5979
                        res.pop();                                                                                     // 5980
                        dots = ellipsePath(x, y, pa[1], pa[2]);                                                        // 5981
                        dots.push(dots[0]);                                                                            // 5982
                        res = res.concat(dots);                                                                        // 5983
                        break;                                                                                         // 5984
                    case "U":                                                                                          // 5985
                        res.pop();                                                                                     // 5986
                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));                                      // 5987
                        r = ["U"].concat(res[res.length - 1].slice(-2));                                               // 5988
                        break;                                                                                         // 5989
                    case "M":                                                                                          // 5990
                        mx = +pa[1] + x;                                                                               // 5991
                        my = +pa[2] + y;                                                                               // 5992
                    default:                                                                                           // 5993
                        for (j = 1, jj = pa.length; j < jj; j++) {                                                     // 5994
                            r[j] = +pa[j] + ((j % 2) ? x : y);                                                         // 5995
                        }                                                                                              // 5996
                }                                                                                                      // 5997
            } else if (pa0 == "R") {                                                                                   // 5998
                dots = [x, y].concat(pa.slice(1));                                                                     // 5999
                res.pop();                                                                                             // 6000
                res = res.concat(catmullRom2bezier(dots, crz));                                                        // 6001
                r = ["R"].concat(pa.slice(-2));                                                                        // 6002
            } else if (pa0 == "O") {                                                                                   // 6003
                res.pop();                                                                                             // 6004
                dots = ellipsePath(x, y, pa[1], pa[2]);                                                                // 6005
                dots.push(dots[0]);                                                                                    // 6006
                res = res.concat(dots);                                                                                // 6007
            } else if (pa0 == "U") {                                                                                   // 6008
                res.pop();                                                                                             // 6009
                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));                                              // 6010
                r = ["U"].concat(res[res.length - 1].slice(-2));                                                       // 6011
            } else {                                                                                                   // 6012
                for (var k = 0, kk = pa.length; k < kk; k++) {                                                         // 6013
                    r[k] = pa[k];                                                                                      // 6014
                }                                                                                                      // 6015
            }                                                                                                          // 6016
            pa0 = pa0.toUpperCase();                                                                                   // 6017
            if (pa0 != "O") {                                                                                          // 6018
                switch (r[0]) {                                                                                        // 6019
                    case "Z":                                                                                          // 6020
                        x = +mx;                                                                                       // 6021
                        y = +my;                                                                                       // 6022
                        break;                                                                                         // 6023
                    case "H":                                                                                          // 6024
                        x = r[1];                                                                                      // 6025
                        break;                                                                                         // 6026
                    case "V":                                                                                          // 6027
                        y = r[1];                                                                                      // 6028
                        break;                                                                                         // 6029
                    case "M":                                                                                          // 6030
                        mx = r[r.length - 2];                                                                          // 6031
                        my = r[r.length - 1];                                                                          // 6032
                    default:                                                                                           // 6033
                        x = r[r.length - 2];                                                                           // 6034
                        y = r[r.length - 1];                                                                           // 6035
                }                                                                                                      // 6036
            }                                                                                                          // 6037
        }                                                                                                              // 6038
        res.toString = toString;                                                                                       // 6039
        pth.abs = pathClone(res);                                                                                      // 6040
        return res;                                                                                                    // 6041
    }                                                                                                                  // 6042
    function l2c(x1, y1, x2, y2) {                                                                                     // 6043
        return [x1, y1, x2, y2, x2, y2];                                                                               // 6044
    }                                                                                                                  // 6045
    function q2c(x1, y1, ax, ay, x2, y2) {                                                                             // 6046
        var _13 = 1 / 3,                                                                                               // 6047
            _23 = 2 / 3;                                                                                               // 6048
        return [                                                                                                       // 6049
                _13 * x1 + _23 * ax,                                                                                   // 6050
                _13 * y1 + _23 * ay,                                                                                   // 6051
                _13 * x2 + _23 * ax,                                                                                   // 6052
                _13 * y2 + _23 * ay,                                                                                   // 6053
                x2,                                                                                                    // 6054
                y2                                                                                                     // 6055
            ];                                                                                                         // 6056
    }                                                                                                                  // 6057
    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {                               // 6058
        // for more information of where this math came from visit:                                                    // 6059
        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes                                             // 6060
        var _120 = PI * 120 / 180,                                                                                     // 6061
            rad = PI / 180 * (+angle || 0),                                                                            // 6062
            res = [],                                                                                                  // 6063
            xy,                                                                                                        // 6064
            rotate = Snap._.cacher(function (x, y, rad) {                                                              // 6065
                var X = x * math.cos(rad) - y * math.sin(rad),                                                         // 6066
                    Y = x * math.sin(rad) + y * math.cos(rad);                                                         // 6067
                return {x: X, y: Y};                                                                                   // 6068
            });                                                                                                        // 6069
        if (!recursive) {                                                                                              // 6070
            xy = rotate(x1, y1, -rad);                                                                                 // 6071
            x1 = xy.x;                                                                                                 // 6072
            y1 = xy.y;                                                                                                 // 6073
            xy = rotate(x2, y2, -rad);                                                                                 // 6074
            x2 = xy.x;                                                                                                 // 6075
            y2 = xy.y;                                                                                                 // 6076
            var cos = math.cos(PI / 180 * angle),                                                                      // 6077
                sin = math.sin(PI / 180 * angle),                                                                      // 6078
                x = (x1 - x2) / 2,                                                                                     // 6079
                y = (y1 - y2) / 2;                                                                                     // 6080
            var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);                                                         // 6081
            if (h > 1) {                                                                                               // 6082
                h = math.sqrt(h);                                                                                      // 6083
                rx = h * rx;                                                                                           // 6084
                ry = h * ry;                                                                                           // 6085
            }                                                                                                          // 6086
            var rx2 = rx * rx,                                                                                         // 6087
                ry2 = ry * ry,                                                                                         // 6088
                k = (large_arc_flag == sweep_flag ? -1 : 1) *                                                          // 6089
                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),             // 6090
                cx = k * rx * y / ry + (x1 + x2) / 2,                                                                  // 6091
                cy = k * -ry * x / rx + (y1 + y2) / 2,                                                                 // 6092
                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),                                                           // 6093
                f2 = math.asin(((y2 - cy) / ry).toFixed(9));                                                           // 6094
                                                                                                                       // 6095
            f1 = x1 < cx ? PI - f1 : f1;                                                                               // 6096
            f2 = x2 < cx ? PI - f2 : f2;                                                                               // 6097
            f1 < 0 && (f1 = PI * 2 + f1);                                                                              // 6098
            f2 < 0 && (f2 = PI * 2 + f2);                                                                              // 6099
            if (sweep_flag && f1 > f2) {                                                                               // 6100
                f1 = f1 - PI * 2;                                                                                      // 6101
            }                                                                                                          // 6102
            if (!sweep_flag && f2 > f1) {                                                                              // 6103
                f2 = f2 - PI * 2;                                                                                      // 6104
            }                                                                                                          // 6105
        } else {                                                                                                       // 6106
            f1 = recursive[0];                                                                                         // 6107
            f2 = recursive[1];                                                                                         // 6108
            cx = recursive[2];                                                                                         // 6109
            cy = recursive[3];                                                                                         // 6110
        }                                                                                                              // 6111
        var df = f2 - f1;                                                                                              // 6112
        if (abs(df) > _120) {                                                                                          // 6113
            var f2old = f2,                                                                                            // 6114
                x2old = x2,                                                                                            // 6115
                y2old = y2;                                                                                            // 6116
            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);                                                         // 6117
            x2 = cx + rx * math.cos(f2);                                                                               // 6118
            y2 = cy + ry * math.sin(f2);                                                                               // 6119
            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);                        // 6120
        }                                                                                                              // 6121
        df = f2 - f1;                                                                                                  // 6122
        var c1 = math.cos(f1),                                                                                         // 6123
            s1 = math.sin(f1),                                                                                         // 6124
            c2 = math.cos(f2),                                                                                         // 6125
            s2 = math.sin(f2),                                                                                         // 6126
            t = math.tan(df / 4),                                                                                      // 6127
            hx = 4 / 3 * rx * t,                                                                                       // 6128
            hy = 4 / 3 * ry * t,                                                                                       // 6129
            m1 = [x1, y1],                                                                                             // 6130
            m2 = [x1 + hx * s1, y1 - hy * c1],                                                                         // 6131
            m3 = [x2 + hx * s2, y2 - hy * c2],                                                                         // 6132
            m4 = [x2, y2];                                                                                             // 6133
        m2[0] = 2 * m1[0] - m2[0];                                                                                     // 6134
        m2[1] = 2 * m1[1] - m2[1];                                                                                     // 6135
        if (recursive) {                                                                                               // 6136
            return [m2, m3, m4].concat(res);                                                                           // 6137
        } else {                                                                                                       // 6138
            res = [m2, m3, m4].concat(res).join().split(",");                                                          // 6139
            var newres = [];                                                                                           // 6140
            for (var i = 0, ii = res.length; i < ii; i++) {                                                            // 6141
                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;             // 6142
            }                                                                                                          // 6143
            return newres;                                                                                             // 6144
        }                                                                                                              // 6145
    }                                                                                                                  // 6146
    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {                                             // 6147
        var t1 = 1 - t;                                                                                                // 6148
        return {                                                                                                       // 6149
            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,                   // 6150
            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y                    // 6151
        };                                                                                                             // 6152
    }                                                                                                                  // 6153
                                                                                                                       // 6154
    // Returns bounding box of cubic bezier curve.                                                                     // 6155
    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html                       // 6156
    // Original version: NISHIO Hirokazu                                                                               // 6157
    // Modifications: https://github.com/timo22345                                                                     // 6158
    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {                                                                // 6159
        var tvalues = [],                                                                                              // 6160
            bounds = [[], []],                                                                                         // 6161
            a, b, c, t, t1, t2, b2ac, sqrtb2ac;                                                                        // 6162
        for (var i = 0; i < 2; ++i) {                                                                                  // 6163
            if (i == 0) {                                                                                              // 6164
                b = 6 * x0 - 12 * x1 + 6 * x2;                                                                         // 6165
                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;                                                                // 6166
                c = 3 * x1 - 3 * x0;                                                                                   // 6167
            } else {                                                                                                   // 6168
                b = 6 * y0 - 12 * y1 + 6 * y2;                                                                         // 6169
                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;                                                                // 6170
                c = 3 * y1 - 3 * y0;                                                                                   // 6171
            }                                                                                                          // 6172
            if (abs(a) < 1e-12) {                                                                                      // 6173
                if (abs(b) < 1e-12) {                                                                                  // 6174
                    continue;                                                                                          // 6175
                }                                                                                                      // 6176
                t = -c / b;                                                                                            // 6177
                if (0 < t && t < 1) {                                                                                  // 6178
                    tvalues.push(t);                                                                                   // 6179
                }                                                                                                      // 6180
                continue;                                                                                              // 6181
            }                                                                                                          // 6182
            b2ac = b * b - 4 * c * a;                                                                                  // 6183
            sqrtb2ac = math.sqrt(b2ac);                                                                                // 6184
            if (b2ac < 0) {                                                                                            // 6185
                continue;                                                                                              // 6186
            }                                                                                                          // 6187
            t1 = (-b + sqrtb2ac) / (2 * a);                                                                            // 6188
            if (0 < t1 && t1 < 1) {                                                                                    // 6189
                tvalues.push(t1);                                                                                      // 6190
            }                                                                                                          // 6191
            t2 = (-b - sqrtb2ac) / (2 * a);                                                                            // 6192
            if (0 < t2 && t2 < 1) {                                                                                    // 6193
                tvalues.push(t2);                                                                                      // 6194
            }                                                                                                          // 6195
        }                                                                                                              // 6196
                                                                                                                       // 6197
        var x, y, j = tvalues.length,                                                                                  // 6198
            jlen = j,                                                                                                  // 6199
            mt;                                                                                                        // 6200
        while (j--) {                                                                                                  // 6201
            t = tvalues[j];                                                                                            // 6202
            mt = 1 - t;                                                                                                // 6203
            bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);    // 6204
            bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);    // 6205
        }                                                                                                              // 6206
                                                                                                                       // 6207
        bounds[0][jlen] = x0;                                                                                          // 6208
        bounds[1][jlen] = y0;                                                                                          // 6209
        bounds[0][jlen + 1] = x3;                                                                                      // 6210
        bounds[1][jlen + 1] = y3;                                                                                      // 6211
        bounds[0].length = bounds[1].length = jlen + 2;                                                                // 6212
                                                                                                                       // 6213
                                                                                                                       // 6214
        return {                                                                                                       // 6215
          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},                                             // 6216
          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}                                              // 6217
        };                                                                                                             // 6218
    }                                                                                                                  // 6219
                                                                                                                       // 6220
    function path2curve(path, path2) {                                                                                 // 6221
        var pth = !path2 && paths(path);                                                                               // 6222
        if (!path2 && pth.curve) {                                                                                     // 6223
            return pathClone(pth.curve);                                                                               // 6224
        }                                                                                                              // 6225
        var p = pathToAbsolute(path),                                                                                  // 6226
            p2 = path2 && pathToAbsolute(path2),                                                                       // 6227
            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},                                        // 6228
            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},                                       // 6229
            processPath = function (path, d, pcom) {                                                                   // 6230
                var nx, ny;                                                                                            // 6231
                if (!path) {                                                                                           // 6232
                    return ["C", d.x, d.y, d.x, d.y, d.x, d.y];                                                        // 6233
                }                                                                                                      // 6234
                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);                                                    // 6235
                switch (path[0]) {                                                                                     // 6236
                    case "M":                                                                                          // 6237
                        d.X = path[1];                                                                                 // 6238
                        d.Y = path[2];                                                                                 // 6239
                        break;                                                                                         // 6240
                    case "A":                                                                                          // 6241
                        path = ["C"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));                           // 6242
                        break;                                                                                         // 6243
                    case "S":                                                                                          // 6244
                        if (pcom == "C" || pcom == "S") { // In "S" case we have to take into account, if the previous command is C/S.
                            nx = d.x * 2 - d.bx;          // And reflect the previous                                  // 6246
                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.    // 6247
                        }                                                                                              // 6248
                        else {                            // or some else or nothing                                   // 6249
                            nx = d.x;                                                                                  // 6250
                            ny = d.y;                                                                                  // 6251
                        }                                                                                              // 6252
                        path = ["C", nx, ny].concat(path.slice(1));                                                    // 6253
                        break;                                                                                         // 6254
                    case "T":                                                                                          // 6255
                        if (pcom == "Q" || pcom == "T") { // In "T" case we have to take into account, if the previous command is Q/T.
                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar                             // 6257
                            d.qy = d.y * 2 - d.qy;        // to case "S".                                              // 6258
                        }                                                                                              // 6259
                        else {                            // or something else or nothing                              // 6260
                            d.qx = d.x;                                                                                // 6261
                            d.qy = d.y;                                                                                // 6262
                        }                                                                                              // 6263
                        path = ["C"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));                              // 6264
                        break;                                                                                         // 6265
                    case "Q":                                                                                          // 6266
                        d.qx = path[1];                                                                                // 6267
                        d.qy = path[2];                                                                                // 6268
                        path = ["C"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));                        // 6269
                        break;                                                                                         // 6270
                    case "L":                                                                                          // 6271
                        path = ["C"].concat(l2c(d.x, d.y, path[1], path[2]));                                          // 6272
                        break;                                                                                         // 6273
                    case "H":                                                                                          // 6274
                        path = ["C"].concat(l2c(d.x, d.y, path[1], d.y));                                              // 6275
                        break;                                                                                         // 6276
                    case "V":                                                                                          // 6277
                        path = ["C"].concat(l2c(d.x, d.y, d.x, path[1]));                                              // 6278
                        break;                                                                                         // 6279
                    case "Z":                                                                                          // 6280
                        path = ["C"].concat(l2c(d.x, d.y, d.X, d.Y));                                                  // 6281
                        break;                                                                                         // 6282
                }                                                                                                      // 6283
                return path;                                                                                           // 6284
            },                                                                                                         // 6285
            fixArc = function (pp, i) {                                                                                // 6286
                if (pp[i].length > 7) {                                                                                // 6287
                    pp[i].shift();                                                                                     // 6288
                    var pi = pp[i];                                                                                    // 6289
                    while (pi.length) {                                                                                // 6290
                        pcoms1[i] = "A"; // if created multiple C:s, their original seg is saved                       // 6291
                        p2 && (pcoms2[i] = "A"); // the same as above                                                  // 6292
                        pp.splice(i++, 0, ["C"].concat(pi.splice(0, 6)));                                              // 6293
                    }                                                                                                  // 6294
                    pp.splice(i, 1);                                                                                   // 6295
                    ii = mmax(p.length, p2 && p2.length || 0);                                                         // 6296
                }                                                                                                      // 6297
            },                                                                                                         // 6298
            fixM = function (path1, path2, a1, a2, i) {                                                                // 6299
                if (path1 && path2 && path1[i][0] == "M" && path2[i][0] != "M") {                                      // 6300
                    path2.splice(i, 0, ["M", a2.x, a2.y]);                                                             // 6301
                    a1.bx = 0;                                                                                         // 6302
                    a1.by = 0;                                                                                         // 6303
                    a1.x = path1[i][1];                                                                                // 6304
                    a1.y = path1[i][2];                                                                                // 6305
                    ii = mmax(p.length, p2 && p2.length || 0);                                                         // 6306
                }                                                                                                      // 6307
            },                                                                                                         // 6308
            pcoms1 = [], // path commands of original path p                                                           // 6309
            pcoms2 = [], // path commands of original path p2                                                          // 6310
            pfirst = "", // temporary holder for original path command                                                 // 6311
            pcom = ""; // holder for previous path command of original path                                            // 6312
        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {                                      // 6313
            p[i] && (pfirst = p[i][0]); // save current path command                                                   // 6314
                                                                                                                       // 6315
            if (pfirst != "C") // C is not saved yet, because it may be result of conversion                           // 6316
            {                                                                                                          // 6317
                pcoms1[i] = pfirst; // Save current path command                                                       // 6318
                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom                                        // 6319
            }                                                                                                          // 6320
            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath                 // 6321
                                                                                                                       // 6322
            if (pcoms1[i] != "A" && pfirst == "C") pcoms1[i] = "C"; // A is the only command                           // 6323
            // which may produce multiple C:s                                                                          // 6324
            // so we have to make sure that C is also C in original path                                               // 6325
                                                                                                                       // 6326
            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1                                        // 6327
                                                                                                                       // 6328
            if (p2) { // the same procedures is done to p2                                                             // 6329
                p2[i] && (pfirst = p2[i][0]);                                                                          // 6330
                if (pfirst != "C") {                                                                                   // 6331
                    pcoms2[i] = pfirst;                                                                                // 6332
                    i && (pcom = pcoms2[i - 1]);                                                                       // 6333
                }                                                                                                      // 6334
                p2[i] = processPath(p2[i], attrs2, pcom);                                                              // 6335
                                                                                                                       // 6336
                if (pcoms2[i] != "A" && pfirst == "C") {                                                               // 6337
                    pcoms2[i] = "C";                                                                                   // 6338
                }                                                                                                      // 6339
                                                                                                                       // 6340
                fixArc(p2, i);                                                                                         // 6341
            }                                                                                                          // 6342
            fixM(p, p2, attrs, attrs2, i);                                                                             // 6343
            fixM(p2, p, attrs2, attrs, i);                                                                             // 6344
            var seg = p[i],                                                                                            // 6345
                seg2 = p2 && p2[i],                                                                                    // 6346
                seglen = seg.length,                                                                                   // 6347
                seg2len = p2 && seg2.length;                                                                           // 6348
            attrs.x = seg[seglen - 2];                                                                                 // 6349
            attrs.y = seg[seglen - 1];                                                                                 // 6350
            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;                                                            // 6351
            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;                                                            // 6352
            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);                                                // 6353
            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);                                                // 6354
            attrs2.x = p2 && seg2[seg2len - 2];                                                                        // 6355
            attrs2.y = p2 && seg2[seg2len - 1];                                                                        // 6356
        }                                                                                                              // 6357
        if (!p2) {                                                                                                     // 6358
            pth.curve = pathClone(p);                                                                                  // 6359
        }                                                                                                              // 6360
        return p2 ? [p, p2] : p;                                                                                       // 6361
    }                                                                                                                  // 6362
    function mapPath(path, matrix) {                                                                                   // 6363
        if (!matrix) {                                                                                                 // 6364
            return path;                                                                                               // 6365
        }                                                                                                              // 6366
        var x, y, i, j, ii, jj, pathi;                                                                                 // 6367
        path = path2curve(path);                                                                                       // 6368
        for (i = 0, ii = path.length; i < ii; i++) {                                                                   // 6369
            pathi = path[i];                                                                                           // 6370
            for (j = 1, jj = pathi.length; j < jj; j += 2) {                                                           // 6371
                x = matrix.x(pathi[j], pathi[j + 1]);                                                                  // 6372
                y = matrix.y(pathi[j], pathi[j + 1]);                                                                  // 6373
                pathi[j] = x;                                                                                          // 6374
                pathi[j + 1] = y;                                                                                      // 6375
            }                                                                                                          // 6376
        }                                                                                                              // 6377
        return path;                                                                                                   // 6378
    }                                                                                                                  // 6379
                                                                                                                       // 6380
    // http://schepers.cc/getting-to-the-point                                                                         // 6381
    function catmullRom2bezier(crp, z) {                                                                               // 6382
        var d = [];                                                                                                    // 6383
        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {                                                // 6384
            var p = [                                                                                                  // 6385
                        {x: +crp[i - 2], y: +crp[i - 1]},                                                              // 6386
                        {x: +crp[i],     y: +crp[i + 1]},                                                              // 6387
                        {x: +crp[i + 2], y: +crp[i + 3]},                                                              // 6388
                        {x: +crp[i + 4], y: +crp[i + 5]}                                                               // 6389
                    ];                                                                                                 // 6390
            if (z) {                                                                                                   // 6391
                if (!i) {                                                                                              // 6392
                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};                                                     // 6393
                } else if (iLen - 4 == i) {                                                                            // 6394
                    p[3] = {x: +crp[0], y: +crp[1]};                                                                   // 6395
                } else if (iLen - 2 == i) {                                                                            // 6396
                    p[2] = {x: +crp[0], y: +crp[1]};                                                                   // 6397
                    p[3] = {x: +crp[2], y: +crp[3]};                                                                   // 6398
                }                                                                                                      // 6399
            } else {                                                                                                   // 6400
                if (iLen - 4 == i) {                                                                                   // 6401
                    p[3] = p[2];                                                                                       // 6402
                } else if (!i) {                                                                                       // 6403
                    p[0] = {x: +crp[i], y: +crp[i + 1]};                                                               // 6404
                }                                                                                                      // 6405
            }                                                                                                          // 6406
            d.push(["C",                                                                                               // 6407
                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,                                                                 // 6408
                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,                                                                 // 6409
                  (p[1].x + 6 * p[2].x - p[3].x) / 6,                                                                  // 6410
                  (p[1].y + 6*p[2].y - p[3].y) / 6,                                                                    // 6411
                  p[2].x,                                                                                              // 6412
                  p[2].y                                                                                               // 6413
            ]);                                                                                                        // 6414
        }                                                                                                              // 6415
                                                                                                                       // 6416
        return d;                                                                                                      // 6417
    }                                                                                                                  // 6418
                                                                                                                       // 6419
    // export                                                                                                          // 6420
    Snap.path = paths;                                                                                                 // 6421
                                                                                                                       // 6422
    /*\
     * Snap.path.getTotalLength                                                                                        // 6424
     [ method ]                                                                                                        // 6425
     **                                                                                                                // 6426
     * Returns the length of the given path in pixels                                                                  // 6427
     **                                                                                                                // 6428
     - path (string) SVG path string                                                                                   // 6429
     **                                                                                                                // 6430
     = (number) length                                                                                                 // 6431
    \*/                                                                                                                // 6432
    Snap.path.getTotalLength = getTotalLength;                                                                         // 6433
    /*\
     * Snap.path.getPointAtLength                                                                                      // 6435
     [ method ]                                                                                                        // 6436
     **                                                                                                                // 6437
     * Returns the coordinates of the point located at the given length along the given path                           // 6438
     **                                                                                                                // 6439
     - path (string) SVG path string                                                                                   // 6440
     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps                    // 6441
     **                                                                                                                // 6442
     = (object) representation of the point:                                                                           // 6443
     o {                                                                                                               // 6444
     o     x: (number) x coordinate,                                                                                   // 6445
     o     y: (number) y coordinate,                                                                                   // 6446
     o     alpha: (number) angle of derivative                                                                         // 6447
     o }                                                                                                               // 6448
    \*/                                                                                                                // 6449
    Snap.path.getPointAtLength = getPointAtLength;                                                                     // 6450
    /*\
     * Snap.path.getSubpath                                                                                            // 6452
     [ method ]                                                                                                        // 6453
     **                                                                                                                // 6454
     * Returns the subpath of a given path between given start and end lengths                                         // 6455
     **                                                                                                                // 6456
     - path (string) SVG path string                                                                                   // 6457
     - from (number) length, in pixels, from the start of the path to the start of the segment                         // 6458
     - to (number) length, in pixels, from the start of the path to the end of the segment                             // 6459
     **                                                                                                                // 6460
     = (string) path string definition for the segment                                                                 // 6461
    \*/                                                                                                                // 6462
    Snap.path.getSubpath = function (path, from, to) {                                                                 // 6463
        if (this.getTotalLength(path) - to < 1e-6) {                                                                   // 6464
            return getSubpathsAtLength(path, from).end;                                                                // 6465
        }                                                                                                              // 6466
        var a = getSubpathsAtLength(path, to, 1);                                                                      // 6467
        return from ? getSubpathsAtLength(a, from).end : a;                                                            // 6468
    };                                                                                                                 // 6469
    /*\
     * Element.getTotalLength                                                                                          // 6471
     [ method ]                                                                                                        // 6472
     **                                                                                                                // 6473
     * Returns the length of the path in pixels (only works for `path` elements)                                       // 6474
     = (number) length                                                                                                 // 6475
    \*/                                                                                                                // 6476
    elproto.getTotalLength = function () {                                                                             // 6477
        if (this.node.getTotalLength) {                                                                                // 6478
            return this.node.getTotalLength();                                                                         // 6479
        }                                                                                                              // 6480
    };                                                                                                                 // 6481
    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?
    /*\
     * Element.getPointAtLength                                                                                        // 6484
     [ method ]                                                                                                        // 6485
     **                                                                                                                // 6486
     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements) // 6487
     **                                                                                                                // 6488
     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps                    // 6489
     **                                                                                                                // 6490
     = (object) representation of the point:                                                                           // 6491
     o {                                                                                                               // 6492
     o     x: (number) x coordinate,                                                                                   // 6493
     o     y: (number) y coordinate,                                                                                   // 6494
     o     alpha: (number) angle of derivative                                                                         // 6495
     o }                                                                                                               // 6496
    \*/                                                                                                                // 6497
    elproto.getPointAtLength = function (length) {                                                                     // 6498
        return getPointAtLength(this.attr("d"), length);                                                               // 6499
    };                                                                                                                 // 6500
    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.
    /*\
     * Element.getSubpath                                                                                              // 6503
     [ method ]                                                                                                        // 6504
     **                                                                                                                // 6505
     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)            // 6506
     **                                                                                                                // 6507
     - from (number) length, in pixels, from the start of the path to the start of the segment                         // 6508
     - to (number) length, in pixels, from the start of the path to the end of the segment                             // 6509
     **                                                                                                                // 6510
     = (string) path string definition for the segment                                                                 // 6511
    \*/                                                                                                                // 6512
    elproto.getSubpath = function (from, to) {                                                                         // 6513
        return Snap.path.getSubpath(this.attr("d"), from, to);                                                         // 6514
    };                                                                                                                 // 6515
    Snap._.box = box;                                                                                                  // 6516
    /*\
     * Snap.path.findDotsAtSegment                                                                                     // 6518
     [ method ]                                                                                                        // 6519
     **                                                                                                                // 6520
     * Utility method                                                                                                  // 6521
     **                                                                                                                // 6522
     * Finds dot coordinates on the given cubic beziér curve at the given t                                            // 6523
     - p1x (number) x of the first point of the curve                                                                  // 6524
     - p1y (number) y of the first point of the curve                                                                  // 6525
     - c1x (number) x of the first anchor of the curve                                                                 // 6526
     - c1y (number) y of the first anchor of the curve                                                                 // 6527
     - c2x (number) x of the second anchor of the curve                                                                // 6528
     - c2y (number) y of the second anchor of the curve                                                                // 6529
     - p2x (number) x of the second point of the curve                                                                 // 6530
     - p2y (number) y of the second point of the curve                                                                 // 6531
     - t (number) position on the curve (0..1)                                                                         // 6532
     = (object) point information in format:                                                                           // 6533
     o {                                                                                                               // 6534
     o     x: (number) x coordinate of the point,                                                                      // 6535
     o     y: (number) y coordinate of the point,                                                                      // 6536
     o     m: {                                                                                                        // 6537
     o         x: (number) x coordinate of the left anchor,                                                            // 6538
     o         y: (number) y coordinate of the left anchor                                                             // 6539
     o     },                                                                                                          // 6540
     o     n: {                                                                                                        // 6541
     o         x: (number) x coordinate of the right anchor,                                                           // 6542
     o         y: (number) y coordinate of the right anchor                                                            // 6543
     o     },                                                                                                          // 6544
     o     start: {                                                                                                    // 6545
     o         x: (number) x coordinate of the start of the curve,                                                     // 6546
     o         y: (number) y coordinate of the start of the curve                                                      // 6547
     o     },                                                                                                          // 6548
     o     end: {                                                                                                      // 6549
     o         x: (number) x coordinate of the end of the curve,                                                       // 6550
     o         y: (number) y coordinate of the end of the curve                                                        // 6551
     o     },                                                                                                          // 6552
     o     alpha: (number) angle of the curve derivative at the point                                                  // 6553
     o }                                                                                                               // 6554
    \*/                                                                                                                // 6555
    Snap.path.findDotsAtSegment = findDotsAtSegment;                                                                   // 6556
    /*\
     * Snap.path.bezierBBox                                                                                            // 6558
     [ method ]                                                                                                        // 6559
     **                                                                                                                // 6560
     * Utility method                                                                                                  // 6561
     **                                                                                                                // 6562
     * Returns the bounding box of a given cubic beziér curve                                                          // 6563
     - p1x (number) x of the first point of the curve                                                                  // 6564
     - p1y (number) y of the first point of the curve                                                                  // 6565
     - c1x (number) x of the first anchor of the curve                                                                 // 6566
     - c1y (number) y of the first anchor of the curve                                                                 // 6567
     - c2x (number) x of the second anchor of the curve                                                                // 6568
     - c2y (number) y of the second anchor of the curve                                                                // 6569
     - p2x (number) x of the second point of the curve                                                                 // 6570
     - p2y (number) y of the second point of the curve                                                                 // 6571
     * or                                                                                                              // 6572
     - bez (array) array of six points for beziér curve                                                                // 6573
     = (object) bounding box                                                                                           // 6574
     o {                                                                                                               // 6575
     o     x: (number) x coordinate of the left top point of the box,                                                  // 6576
     o     y: (number) y coordinate of the left top point of the box,                                                  // 6577
     o     x2: (number) x coordinate of the right bottom point of the box,                                             // 6578
     o     y2: (number) y coordinate of the right bottom point of the box,                                             // 6579
     o     width: (number) width of the box,                                                                           // 6580
     o     height: (number) height of the box                                                                          // 6581
     o }                                                                                                               // 6582
    \*/                                                                                                                // 6583
    Snap.path.bezierBBox = bezierBBox;                                                                                 // 6584
    /*\
     * Snap.path.isPointInsideBBox                                                                                     // 6586
     [ method ]                                                                                                        // 6587
     **                                                                                                                // 6588
     * Utility method                                                                                                  // 6589
     **                                                                                                                // 6590
     * Returns `true` if given point is inside bounding box                                                            // 6591
     - bbox (string) bounding box                                                                                      // 6592
     - x (string) x coordinate of the point                                                                            // 6593
     - y (string) y coordinate of the point                                                                            // 6594
     = (boolean) `true` if point is inside                                                                             // 6595
    \*/                                                                                                                // 6596
    Snap.path.isPointInsideBBox = isPointInsideBBox;                                                                   // 6597
    Snap.closest = function (x, y, X, Y) {                                                                             // 6598
        var r = 100,                                                                                                   // 6599
            b = box(x - r / 2, y - r / 2, r, r),                                                                       // 6600
            inside = [],                                                                                               // 6601
            getter = X[0].hasOwnProperty("x") ? function (i) {                                                         // 6602
                return {                                                                                               // 6603
                    x: X[i].x,                                                                                         // 6604
                    y: X[i].y                                                                                          // 6605
                };                                                                                                     // 6606
            } : function (i) {                                                                                         // 6607
                return {                                                                                               // 6608
                    x: X[i],                                                                                           // 6609
                    y: Y[i]                                                                                            // 6610
                };                                                                                                     // 6611
            },                                                                                                         // 6612
            found = 0;                                                                                                 // 6613
        while (r <= 1e6 && !found) {                                                                                   // 6614
            for (var i = 0, ii = X.length; i < ii; i++) {                                                              // 6615
                var xy = getter(i);                                                                                    // 6616
                if (isPointInsideBBox(b, xy.x, xy.y)) {                                                                // 6617
                    found++;                                                                                           // 6618
                    inside.push(xy);                                                                                   // 6619
                    break;                                                                                             // 6620
                }                                                                                                      // 6621
            }                                                                                                          // 6622
            if (!found) {                                                                                              // 6623
                r *= 2;                                                                                                // 6624
                b = box(x - r / 2, y - r / 2, r, r)                                                                    // 6625
            }                                                                                                          // 6626
        }                                                                                                              // 6627
        if (r == 1e6) {                                                                                                // 6628
            return;                                                                                                    // 6629
        }                                                                                                              // 6630
        var len = Infinity,                                                                                            // 6631
            res;                                                                                                       // 6632
        for (i = 0, ii = inside.length; i < ii; i++) {                                                                 // 6633
            var l = Snap.len(x, y, inside[i].x, inside[i].y);                                                          // 6634
            if (len > l) {                                                                                             // 6635
                len = l;                                                                                               // 6636
                inside[i].len = l;                                                                                     // 6637
                res = inside[i];                                                                                       // 6638
            }                                                                                                          // 6639
        }                                                                                                              // 6640
        return res;                                                                                                    // 6641
    };                                                                                                                 // 6642
    /*\
     * Snap.path.isBBoxIntersect                                                                                       // 6644
     [ method ]                                                                                                        // 6645
     **                                                                                                                // 6646
     * Utility method                                                                                                  // 6647
     **                                                                                                                // 6648
     * Returns `true` if two bounding boxes intersect                                                                  // 6649
     - bbox1 (string) first bounding box                                                                               // 6650
     - bbox2 (string) second bounding box                                                                              // 6651
     = (boolean) `true` if bounding boxes intersect                                                                    // 6652
    \*/                                                                                                                // 6653
    Snap.path.isBBoxIntersect = isBBoxIntersect;                                                                       // 6654
    /*\
     * Snap.path.intersection                                                                                          // 6656
     [ method ]                                                                                                        // 6657
     **                                                                                                                // 6658
     * Utility method                                                                                                  // 6659
     **                                                                                                                // 6660
     * Finds intersections of two paths                                                                                // 6661
     - path1 (string) path string                                                                                      // 6662
     - path2 (string) path string                                                                                      // 6663
     = (array) dots of intersection                                                                                    // 6664
     o [                                                                                                               // 6665
     o     {                                                                                                           // 6666
     o         x: (number) x coordinate of the point,                                                                  // 6667
     o         y: (number) y coordinate of the point,                                                                  // 6668
     o         t1: (number) t value for segment of path1,                                                              // 6669
     o         t2: (number) t value for segment of path2,                                                              // 6670
     o         segment1: (number) order number for segment of path1,                                                   // 6671
     o         segment2: (number) order number for segment of path2,                                                   // 6672
     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,                     // 6673
     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2                      // 6674
     o     }                                                                                                           // 6675
     o ]                                                                                                               // 6676
    \*/                                                                                                                // 6677
    Snap.path.intersection = pathIntersection;                                                                         // 6678
    Snap.path.intersectionNumber = pathIntersectionNumber;                                                             // 6679
    /*\
     * Snap.path.isPointInside                                                                                         // 6681
     [ method ]                                                                                                        // 6682
     **                                                                                                                // 6683
     * Utility method                                                                                                  // 6684
     **                                                                                                                // 6685
     * Returns `true` if given point is inside a given closed path.                                                    // 6686
     *                                                                                                                 // 6687
     * Note: fill mode doesn’t affect the result of this method.                                                       // 6688
     - path (string) path string                                                                                       // 6689
     - x (number) x of the point                                                                                       // 6690
     - y (number) y of the point                                                                                       // 6691
     = (boolean) `true` if point is inside the path                                                                    // 6692
    \*/                                                                                                                // 6693
    Snap.path.isPointInside = isPointInsidePath;                                                                       // 6694
    /*\
     * Snap.path.getBBox                                                                                               // 6696
     [ method ]                                                                                                        // 6697
     **                                                                                                                // 6698
     * Utility method                                                                                                  // 6699
     **                                                                                                                // 6700
     * Returns the bounding box of a given path                                                                        // 6701
     - path (string) path string                                                                                       // 6702
     = (object) bounding box                                                                                           // 6703
     o {                                                                                                               // 6704
     o     x: (number) x coordinate of the left top point of the box,                                                  // 6705
     o     y: (number) y coordinate of the left top point of the box,                                                  // 6706
     o     x2: (number) x coordinate of the right bottom point of the box,                                             // 6707
     o     y2: (number) y coordinate of the right bottom point of the box,                                             // 6708
     o     width: (number) width of the box,                                                                           // 6709
     o     height: (number) height of the box                                                                          // 6710
     o }                                                                                                               // 6711
    \*/                                                                                                                // 6712
    Snap.path.getBBox = pathBBox;                                                                                      // 6713
    Snap.path.get = getPath;                                                                                           // 6714
    /*\
     * Snap.path.toRelative                                                                                            // 6716
     [ method ]                                                                                                        // 6717
     **                                                                                                                // 6718
     * Utility method                                                                                                  // 6719
     **                                                                                                                // 6720
     * Converts path coordinates into relative values                                                                  // 6721
     - path (string) path string                                                                                       // 6722
     = (array) path string                                                                                             // 6723
    \*/                                                                                                                // 6724
    Snap.path.toRelative = pathToRelative;                                                                             // 6725
    /*\
     * Snap.path.toAbsolute                                                                                            // 6727
     [ method ]                                                                                                        // 6728
     **                                                                                                                // 6729
     * Utility method                                                                                                  // 6730
     **                                                                                                                // 6731
     * Converts path coordinates into absolute values                                                                  // 6732
     - path (string) path string                                                                                       // 6733
     = (array) path string                                                                                             // 6734
    \*/                                                                                                                // 6735
    Snap.path.toAbsolute = pathToAbsolute;                                                                             // 6736
    /*\
     * Snap.path.toCubic                                                                                               // 6738
     [ method ]                                                                                                        // 6739
     **                                                                                                                // 6740
     * Utility method                                                                                                  // 6741
     **                                                                                                                // 6742
     * Converts path to a new path where all segments are cubic beziér curves                                          // 6743
     - pathString (string|array) path string or array of segments                                                      // 6744
     = (array) array of segments                                                                                       // 6745
    \*/                                                                                                                // 6746
    Snap.path.toCubic = path2curve;                                                                                    // 6747
    /*\
     * Snap.path.map                                                                                                   // 6749
     [ method ]                                                                                                        // 6750
     **                                                                                                                // 6751
     * Transform the path string with the given matrix                                                                 // 6752
     - path (string) path string                                                                                       // 6753
     - matrix (object) see @Matrix                                                                                     // 6754
     = (string) transformed path string                                                                                // 6755
    \*/                                                                                                                // 6756
    Snap.path.map = mapPath;                                                                                           // 6757
    Snap.path.toString = toString;                                                                                     // 6758
    Snap.path.clone = pathClone;                                                                                       // 6759
});                                                                                                                    // 6760
                                                                                                                       // 6761
// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 6762
//                                                                                                                     // 6763
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 6764
// you may not use this file except in compliance with the License.                                                    // 6765
// You may obtain a copy of the License at                                                                             // 6766
//                                                                                                                     // 6767
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 6768
//                                                                                                                     // 6769
// Unless required by applicable law or agreed to in writing, software                                                 // 6770
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 6771
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 6772
// See the License for the specific language governing permissions and                                                 // 6773
// limitations under the License.                                                                                      // 6774
Snap.plugin(function (Snap, Element, Paper, glob) {                                                                    // 6775
    var mmax = Math.max,                                                                                               // 6776
        mmin = Math.min;                                                                                               // 6777
                                                                                                                       // 6778
    // Set                                                                                                             // 6779
    var Set = function (items) {                                                                                       // 6780
        this.items = [];                                                                                               // 6781
	this.bindings = {};                                                                                                   // 6782
        this.length = 0;                                                                                               // 6783
        this.type = "set";                                                                                             // 6784
        if (items) {                                                                                                   // 6785
            for (var i = 0, ii = items.length; i < ii; i++) {                                                          // 6786
                if (items[i]) {                                                                                        // 6787
                    this[this.items.length] = this.items[this.items.length] = items[i];                                // 6788
                    this.length++;                                                                                     // 6789
                }                                                                                                      // 6790
            }                                                                                                          // 6791
        }                                                                                                              // 6792
    },                                                                                                                 // 6793
    setproto = Set.prototype;                                                                                          // 6794
    /*\
     * Set.push                                                                                                        // 6796
     [ method ]                                                                                                        // 6797
     **                                                                                                                // 6798
     * Adds each argument to the current set                                                                           // 6799
     = (object) original element                                                                                       // 6800
    \*/                                                                                                                // 6801
    setproto.push = function () {                                                                                      // 6802
        var item,                                                                                                      // 6803
            len;                                                                                                       // 6804
        for (var i = 0, ii = arguments.length; i < ii; i++) {                                                          // 6805
            item = arguments[i];                                                                                       // 6806
            if (item) {                                                                                                // 6807
                len = this.items.length;                                                                               // 6808
                this[len] = this.items[len] = item;                                                                    // 6809
                this.length++;                                                                                         // 6810
            }                                                                                                          // 6811
        }                                                                                                              // 6812
        return this;                                                                                                   // 6813
    };                                                                                                                 // 6814
    /*\
     * Set.pop                                                                                                         // 6816
     [ method ]                                                                                                        // 6817
     **                                                                                                                // 6818
     * Removes last element and returns it                                                                             // 6819
     = (object) element                                                                                                // 6820
    \*/                                                                                                                // 6821
    setproto.pop = function () {                                                                                       // 6822
        this.length && delete this[this.length--];                                                                     // 6823
        return this.items.pop();                                                                                       // 6824
    };                                                                                                                 // 6825
    /*\
     * Set.forEach                                                                                                     // 6827
     [ method ]                                                                                                        // 6828
     **                                                                                                                // 6829
     * Executes given function for each element in the set                                                             // 6830
     *                                                                                                                 // 6831
     * If the function returns `false`, the loop stops running.                                                        // 6832
     **                                                                                                                // 6833
     - callback (function) function to run                                                                             // 6834
     - thisArg (object) context object for the callback                                                                // 6835
     = (object) Set object                                                                                             // 6836
    \*/                                                                                                                // 6837
    setproto.forEach = function (callback, thisArg) {                                                                  // 6838
        for (var i = 0, ii = this.items.length; i < ii; i++) {                                                         // 6839
            if (callback.call(thisArg, this.items[i], i) === false) {                                                  // 6840
                return this;                                                                                           // 6841
            }                                                                                                          // 6842
        }                                                                                                              // 6843
        return this;                                                                                                   // 6844
    };                                                                                                                 // 6845
    /*\
     * Set.animate                                                                                                     // 6847
     [ method ]                                                                                                        // 6848
     **                                                                                                                // 6849
     * Animates each element in set in sync.                                                                           // 6850
     *                                                                                                                 // 6851
     **                                                                                                                // 6852
     - attrs (object) key-value pairs of destination attributes                                                        // 6853
     - duration (number) duration of the animation in milliseconds                                                     // 6854
     - easing (function) #optional easing function from @mina or custom                                                // 6855
     - callback (function) #optional callback function that executes when the animation ends                           // 6856
     * or                                                                                                              // 6857
     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`
     > Usage                                                                                                           // 6859
     | // animate all elements in set to radius 10                                                                     // 6860
     | set.animate({r: 10}, 500, mina.easein);                                                                         // 6861
     | // or                                                                                                           // 6862
     | // animate first element to radius 10, but second to radius 20 and in different time                            // 6863
     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);                                         // 6864
     = (Element) the current element                                                                                   // 6865
    \*/                                                                                                                // 6866
    setproto.animate = function (attrs, ms, easing, callback) {                                                        // 6867
        if (typeof easing == "function" && !easing.length) {                                                           // 6868
            callback = easing;                                                                                         // 6869
            easing = mina.linear;                                                                                      // 6870
        }                                                                                                              // 6871
        if (attrs instanceof Snap._.Animation) {                                                                       // 6872
            callback = attrs.callback;                                                                                 // 6873
            easing = attrs.easing;                                                                                     // 6874
            ms = easing.dur;                                                                                           // 6875
            attrs = attrs.attr;                                                                                        // 6876
        }                                                                                                              // 6877
        var args = arguments;                                                                                          // 6878
        if (Snap.is(attrs, "array") && Snap.is(args[args.length - 1], "array")) {                                      // 6879
            var each = true;                                                                                           // 6880
        }                                                                                                              // 6881
        var begin,                                                                                                     // 6882
            handler = function () {                                                                                    // 6883
                if (begin) {                                                                                           // 6884
                    this.b = begin;                                                                                    // 6885
                } else {                                                                                               // 6886
                    begin = this.b;                                                                                    // 6887
                }                                                                                                      // 6888
            },                                                                                                         // 6889
            cb = 0,                                                                                                    // 6890
            set = this,                                                                                                // 6891
            callbacker = callback && function () {                                                                     // 6892
                if (++cb == set.length) {                                                                              // 6893
                    callback.call(this);                                                                               // 6894
                }                                                                                                      // 6895
            };                                                                                                         // 6896
        return this.forEach(function (el, i) {                                                                         // 6897
            eve.once("snap.animcreated." + el.id, handler);                                                            // 6898
            if (each) {                                                                                                // 6899
                args[i] && el.animate.apply(el, args[i]);                                                              // 6900
            } else {                                                                                                   // 6901
                el.animate(attrs, ms, easing, callbacker);                                                             // 6902
            }                                                                                                          // 6903
        });                                                                                                            // 6904
    };                                                                                                                 // 6905
    setproto.remove = function () {                                                                                    // 6906
        while (this.length) {                                                                                          // 6907
            this.pop().remove();                                                                                       // 6908
        }                                                                                                              // 6909
        return this;                                                                                                   // 6910
    };                                                                                                                 // 6911
    /*\
     * Set.bind                                                                                                        // 6913
     [ method ]                                                                                                        // 6914
     **                                                                                                                // 6915
     * Specifies how to handle a specific attribute when applied                                                       // 6916
     * to a set.                                                                                                       // 6917
     *                                                                                                                 // 6918
     **                                                                                                                // 6919
     - attr (string) attribute name                                                                                    // 6920
     - callback (function) function to run                                                                             // 6921
     * or                                                                                                              // 6922
     - attr (string) attribute name                                                                                    // 6923
     - element (Element) specific element in the set to apply the attribute to                                         // 6924
     * or                                                                                                              // 6925
     - attr (string) attribute name                                                                                    // 6926
     - element (Element) specific element in the set to apply the attribute to                                         // 6927
     - eattr (string) attribute on the element to bind the attribute to                                                // 6928
     = (object) Set object                                                                                             // 6929
    \*/                                                                                                                // 6930
    setproto.bind = function (attr, a, b) {                                                                            // 6931
        var data = {};                                                                                                 // 6932
        if (typeof a == "function") {                                                                                  // 6933
            this.bindings[attr] = a;                                                                                   // 6934
        } else {                                                                                                       // 6935
            var aname = b || attr;                                                                                     // 6936
            this.bindings[attr] = function (v) {                                                                       // 6937
                data[aname] = v;                                                                                       // 6938
                a.attr(data);                                                                                          // 6939
            };                                                                                                         // 6940
        }                                                                                                              // 6941
        return this;                                                                                                   // 6942
    };                                                                                                                 // 6943
    setproto.attr = function (value) {                                                                                 // 6944
        var unbound = {};                                                                                              // 6945
        for (var k in value) {                                                                                         // 6946
            if (this.bindings[k]) {                                                                                    // 6947
                this.bindings[k](value[k]);                                                                            // 6948
            } else {                                                                                                   // 6949
                unbound[k] = value[k];                                                                                 // 6950
            }                                                                                                          // 6951
        }                                                                                                              // 6952
        for (var i = 0, ii = this.items.length; i < ii; i++) {                                                         // 6953
            this.items[i].attr(unbound);                                                                               // 6954
        }                                                                                                              // 6955
        return this;                                                                                                   // 6956
    };                                                                                                                 // 6957
    /*\
     * Set.clear                                                                                                       // 6959
     [ method ]                                                                                                        // 6960
     **                                                                                                                // 6961
     * Removes all elements from the set                                                                               // 6962
    \*/                                                                                                                // 6963
    setproto.clear = function () {                                                                                     // 6964
        while (this.length) {                                                                                          // 6965
            this.pop();                                                                                                // 6966
        }                                                                                                              // 6967
    };                                                                                                                 // 6968
    /*\
     * Set.splice                                                                                                      // 6970
     [ method ]                                                                                                        // 6971
     **                                                                                                                // 6972
     * Removes range of elements from the set                                                                          // 6973
     **                                                                                                                // 6974
     - index (number) position of the deletion                                                                         // 6975
     - count (number) number of element to remove                                                                      // 6976
     - insertion… (object) #optional elements to insert                                                                // 6977
     = (object) set elements that were deleted                                                                         // 6978
    \*/                                                                                                                // 6979
    setproto.splice = function (index, count, insertion) {                                                             // 6980
        index = index < 0 ? mmax(this.length + index, 0) : index;                                                      // 6981
        count = mmax(0, mmin(this.length - index, count));                                                             // 6982
        var tail = [],                                                                                                 // 6983
            todel = [],                                                                                                // 6984
            args = [],                                                                                                 // 6985
            i;                                                                                                         // 6986
        for (i = 2; i < arguments.length; i++) {                                                                       // 6987
            args.push(arguments[i]);                                                                                   // 6988
        }                                                                                                              // 6989
        for (i = 0; i < count; i++) {                                                                                  // 6990
            todel.push(this[index + i]);                                                                               // 6991
        }                                                                                                              // 6992
        for (; i < this.length - index; i++) {                                                                         // 6993
            tail.push(this[index + i]);                                                                                // 6994
        }                                                                                                              // 6995
        var arglen = args.length;                                                                                      // 6996
        for (i = 0; i < arglen + tail.length; i++) {                                                                   // 6997
            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];                         // 6998
        }                                                                                                              // 6999
        i = this.items.length = this.length -= count - arglen;                                                         // 7000
        while (this[i]) {                                                                                              // 7001
            delete this[i++];                                                                                          // 7002
        }                                                                                                              // 7003
        return new Set(todel);                                                                                         // 7004
    };                                                                                                                 // 7005
    /*\
     * Set.exclude                                                                                                     // 7007
     [ method ]                                                                                                        // 7008
     **                                                                                                                // 7009
     * Removes given element from the set                                                                              // 7010
     **                                                                                                                // 7011
     - element (object) element to remove                                                                              // 7012
     = (boolean) `true` if object was found and removed from the set                                                   // 7013
    \*/                                                                                                                // 7014
    setproto.exclude = function (el) {                                                                                 // 7015
        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {                                            // 7016
            this.splice(i, 1);                                                                                         // 7017
            return true;                                                                                               // 7018
        }                                                                                                              // 7019
        return false;                                                                                                  // 7020
    };                                                                                                                 // 7021
    setproto.insertAfter = function (el) {                                                                             // 7022
        var i = this.items.length;                                                                                     // 7023
        while (i--) {                                                                                                  // 7024
            this.items[i].insertAfter(el);                                                                             // 7025
        }                                                                                                              // 7026
        return this;                                                                                                   // 7027
    };                                                                                                                 // 7028
    setproto.getBBox = function () {                                                                                   // 7029
        var x = [],                                                                                                    // 7030
            y = [],                                                                                                    // 7031
            x2 = [],                                                                                                   // 7032
            y2 = [];                                                                                                   // 7033
        for (var i = this.items.length; i--;) if (!this.items[i].removed) {                                            // 7034
            var box = this.items[i].getBBox();                                                                         // 7035
            x.push(box.x);                                                                                             // 7036
            y.push(box.y);                                                                                             // 7037
            x2.push(box.x + box.width);                                                                                // 7038
            y2.push(box.y + box.height);                                                                               // 7039
        }                                                                                                              // 7040
        x = mmin.apply(0, x);                                                                                          // 7041
        y = mmin.apply(0, y);                                                                                          // 7042
        x2 = mmax.apply(0, x2);                                                                                        // 7043
        y2 = mmax.apply(0, y2);                                                                                        // 7044
        return {                                                                                                       // 7045
            x: x,                                                                                                      // 7046
            y: y,                                                                                                      // 7047
            x2: x2,                                                                                                    // 7048
            y2: y2,                                                                                                    // 7049
            width: x2 - x,                                                                                             // 7050
            height: y2 - y,                                                                                            // 7051
            cx: x + (x2 - x) / 2,                                                                                      // 7052
            cy: y + (y2 - y) / 2                                                                                       // 7053
        };                                                                                                             // 7054
    };                                                                                                                 // 7055
    setproto.clone = function (s) {                                                                                    // 7056
        s = new Set;                                                                                                   // 7057
        for (var i = 0, ii = this.items.length; i < ii; i++) {                                                         // 7058
            s.push(this.items[i].clone());                                                                             // 7059
        }                                                                                                              // 7060
        return s;                                                                                                      // 7061
    };                                                                                                                 // 7062
    setproto.toString = function () {                                                                                  // 7063
        return "Snap\u2018s set";                                                                                      // 7064
    };                                                                                                                 // 7065
    setproto.type = "set";                                                                                             // 7066
    // export                                                                                                          // 7067
    Snap.Set = Set;                                                                                                    // 7068
    Snap.set = function () {                                                                                           // 7069
        var set = new Set;                                                                                             // 7070
        if (arguments.length) {                                                                                        // 7071
            set.push.apply(set, Array.prototype.slice.call(arguments, 0));                                             // 7072
        }                                                                                                              // 7073
        return set;                                                                                                    // 7074
    };                                                                                                                 // 7075
});                                                                                                                    // 7076
                                                                                                                       // 7077
// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 7078
//                                                                                                                     // 7079
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 7080
// you may not use this file except in compliance with the License.                                                    // 7081
// You may obtain a copy of the License at                                                                             // 7082
//                                                                                                                     // 7083
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7084
//                                                                                                                     // 7085
// Unless required by applicable law or agreed to in writing, software                                                 // 7086
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 7087
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7088
// See the License for the specific language governing permissions and                                                 // 7089
// limitations under the License.                                                                                      // 7090
Snap.plugin(function (Snap, Element, Paper, glob) {                                                                    // 7091
    var names = {},                                                                                                    // 7092
        reUnit = /[a-z]+$/i,                                                                                           // 7093
        Str = String;                                                                                                  // 7094
    names.stroke = names.fill = "colour";                                                                              // 7095
    function getEmpty(item) {                                                                                          // 7096
        var l = item[0];                                                                                               // 7097
        switch (l.toLowerCase()) {                                                                                     // 7098
            case "t": return [l, 0, 0];                                                                                // 7099
            case "m": return [l, 1, 0, 0, 1, 0, 0];                                                                    // 7100
            case "r": if (item.length == 4) {                                                                          // 7101
                return [l, 0, item[2], item[3]];                                                                       // 7102
            } else {                                                                                                   // 7103
                return [l, 0];                                                                                         // 7104
            }                                                                                                          // 7105
            case "s": if (item.length == 5) {                                                                          // 7106
                return [l, 1, 1, item[3], item[4]];                                                                    // 7107
            } else if (item.length == 3) {                                                                             // 7108
                return [l, 1, 1];                                                                                      // 7109
            } else {                                                                                                   // 7110
                return [l, 1];                                                                                         // 7111
            }                                                                                                          // 7112
        }                                                                                                              // 7113
    }                                                                                                                  // 7114
    function equaliseTransform(t1, t2, getBBox) {                                                                      // 7115
        t2 = Str(t2).replace(/\.{3}|\u2026/g, t1);                                                                     // 7116
        t1 = Snap.parseTransformString(t1) || [];                                                                      // 7117
        t2 = Snap.parseTransformString(t2) || [];                                                                      // 7118
        var maxlength = Math.max(t1.length, t2.length),                                                                // 7119
            from = [],                                                                                                 // 7120
            to = [],                                                                                                   // 7121
            i = 0, j, jj,                                                                                              // 7122
            tt1, tt2;                                                                                                  // 7123
        for (; i < maxlength; i++) {                                                                                   // 7124
            tt1 = t1[i] || getEmpty(t2[i]);                                                                            // 7125
            tt2 = t2[i] || getEmpty(tt1);                                                                              // 7126
            if ((tt1[0] != tt2[0]) ||                                                                                  // 7127
                (tt1[0].toLowerCase() == "r" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||                             // 7128
                (tt1[0].toLowerCase() == "s" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))                                // 7129
                ) {                                                                                                    // 7130
                    t1 = Snap._.transform2matrix(t1, getBBox());                                                       // 7131
                    t2 = Snap._.transform2matrix(t2, getBBox());                                                       // 7132
                    from = [["m", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];                                                // 7133
                    to = [["m", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];                                                  // 7134
                    break;                                                                                             // 7135
            }                                                                                                          // 7136
            from[i] = [];                                                                                              // 7137
            to[i] = [];                                                                                                // 7138
            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {                                          // 7139
                j in tt1 && (from[i][j] = tt1[j]);                                                                     // 7140
                j in tt2 && (to[i][j] = tt2[j]);                                                                       // 7141
            }                                                                                                          // 7142
        }                                                                                                              // 7143
        return {                                                                                                       // 7144
            from: path2array(from),                                                                                    // 7145
            to: path2array(to),                                                                                        // 7146
            f: getPath(from)                                                                                           // 7147
        };                                                                                                             // 7148
    }                                                                                                                  // 7149
    function getNumber(val) {                                                                                          // 7150
        return val;                                                                                                    // 7151
    }                                                                                                                  // 7152
    function getUnit(unit) {                                                                                           // 7153
        return function (val) {                                                                                        // 7154
            return +val.toFixed(3) + unit;                                                                             // 7155
        };                                                                                                             // 7156
    }                                                                                                                  // 7157
    function getViewBox(val) {                                                                                         // 7158
        return val.join(" ");                                                                                          // 7159
    }                                                                                                                  // 7160
    function getColour(clr) {                                                                                          // 7161
        return Snap.rgb(clr[0], clr[1], clr[2]);                                                                       // 7162
    }                                                                                                                  // 7163
    function getPath(path) {                                                                                           // 7164
        var k = 0, i, ii, j, jj, out, a, b = [];                                                                       // 7165
        for (i = 0, ii = path.length; i < ii; i++) {                                                                   // 7166
            out = "[";                                                                                                 // 7167
            a = ['"' + path[i][0] + '"'];                                                                              // 7168
            for (j = 1, jj = path[i].length; j < jj; j++) {                                                            // 7169
                a[j] = "val[" + (k++) + "]";                                                                           // 7170
            }                                                                                                          // 7171
            out += a + "]";                                                                                            // 7172
            b[i] = out;                                                                                                // 7173
        }                                                                                                              // 7174
        return Function("val", "return Snap.path.toString.call([" + b + "])");                                         // 7175
    }                                                                                                                  // 7176
    function path2array(path) {                                                                                        // 7177
        var out = [];                                                                                                  // 7178
        for (var i = 0, ii = path.length; i < ii; i++) {                                                               // 7179
            for (var j = 1, jj = path[i].length; j < jj; j++) {                                                        // 7180
                out.push(path[i][j]);                                                                                  // 7181
            }                                                                                                          // 7182
        }                                                                                                              // 7183
        return out;                                                                                                    // 7184
    }                                                                                                                  // 7185
    function isNumeric(obj) {                                                                                          // 7186
        return isFinite(parseFloat(obj));                                                                              // 7187
    }                                                                                                                  // 7188
    function arrayEqual(arr1, arr2) {                                                                                  // 7189
        if (!Snap.is(arr1, "array") || !Snap.is(arr2, "array")) {                                                      // 7190
            return false;                                                                                              // 7191
        }                                                                                                              // 7192
        return arr1.toString() == arr2.toString();                                                                     // 7193
    }                                                                                                                  // 7194
    Element.prototype.equal = function (name, b) {                                                                     // 7195
        return eve("snap.util.equal", this, name, b).firstDefined();                                                   // 7196
    };                                                                                                                 // 7197
    eve.on("snap.util.equal", function (name, b) {                                                                     // 7198
        var A, B, a = Str(this.attr(name) || ""),                                                                      // 7199
            el = this;                                                                                                 // 7200
        if (isNumeric(a) && isNumeric(b)) {                                                                            // 7201
            return {                                                                                                   // 7202
                from: parseFloat(a),                                                                                   // 7203
                to: parseFloat(b),                                                                                     // 7204
                f: getNumber                                                                                           // 7205
            };                                                                                                         // 7206
        }                                                                                                              // 7207
        if (names[name] == "colour") {                                                                                 // 7208
            A = Snap.color(a);                                                                                         // 7209
            B = Snap.color(b);                                                                                         // 7210
            return {                                                                                                   // 7211
                from: [A.r, A.g, A.b, A.opacity],                                                                      // 7212
                to: [B.r, B.g, B.b, B.opacity],                                                                        // 7213
                f: getColour                                                                                           // 7214
            };                                                                                                         // 7215
        }                                                                                                              // 7216
        if (name == "viewBox") {                                                                                       // 7217
            A = this.attr(name).vb.split(" ").map(Number);                                                             // 7218
            B = b.split(" ").map(Number);                                                                              // 7219
            return {                                                                                                   // 7220
                from: A,                                                                                               // 7221
                to: B,                                                                                                 // 7222
                f: getViewBox                                                                                          // 7223
            };                                                                                                         // 7224
        }                                                                                                              // 7225
        if (name == "transform" || name == "gradientTransform" || name == "patternTransform") {                        // 7226
            if (b instanceof Snap.Matrix) {                                                                            // 7227
                b = b.toTransformString();                                                                             // 7228
            }                                                                                                          // 7229
            if (!Snap._.rgTransform.test(b)) {                                                                         // 7230
                b = Snap._.svgTransform2string(b);                                                                     // 7231
            }                                                                                                          // 7232
            return equaliseTransform(a, b, function () {                                                               // 7233
                return el.getBBox(1);                                                                                  // 7234
            });                                                                                                        // 7235
        }                                                                                                              // 7236
        if (name == "d" || name == "path") {                                                                           // 7237
            A = Snap.path.toCubic(a, b);                                                                               // 7238
            return {                                                                                                   // 7239
                from: path2array(A[0]),                                                                                // 7240
                to: path2array(A[1]),                                                                                  // 7241
                f: getPath(A[0])                                                                                       // 7242
            };                                                                                                         // 7243
        }                                                                                                              // 7244
        if (name == "points") {                                                                                        // 7245
            A = Str(a).split(Snap._.separator);                                                                        // 7246
            B = Str(b).split(Snap._.separator);                                                                        // 7247
            return {                                                                                                   // 7248
                from: A,                                                                                               // 7249
                to: B,                                                                                                 // 7250
                f: function (val) { return val; }                                                                      // 7251
            };                                                                                                         // 7252
        }                                                                                                              // 7253
        var aUnit = a.match(reUnit),                                                                                   // 7254
            bUnit = Str(b).match(reUnit);                                                                              // 7255
        if (aUnit && arrayEqual(aUnit, bUnit)) {                                                                       // 7256
            return {                                                                                                   // 7257
                from: parseFloat(a),                                                                                   // 7258
                to: parseFloat(b),                                                                                     // 7259
                f: getUnit(aUnit)                                                                                      // 7260
            };                                                                                                         // 7261
        } else {                                                                                                       // 7262
            return {                                                                                                   // 7263
                from: this.asPX(name),                                                                                 // 7264
                to: this.asPX(name, b),                                                                                // 7265
                f: getNumber                                                                                           // 7266
            };                                                                                                         // 7267
        }                                                                                                              // 7268
    });                                                                                                                // 7269
});                                                                                                                    // 7270
                                                                                                                       // 7271
// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 7272
//                                                                                                                     // 7273
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 7274
// you may not use this file except in compliance with the License.                                                    // 7275
// You may obtain a copy of the License at                                                                             // 7276
//                                                                                                                     // 7277
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7278
//                                                                                                                     // 7279
// Unless required by applicable law or agreed to in writing, software                                                 // 7280
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 7281
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7282
// See the License for the specific language governing permissions and                                                 // 7283
// limitations under the License.                                                                                      // 7284
Snap.plugin(function (Snap, Element, Paper, glob) {                                                                    // 7285
    var elproto = Element.prototype,                                                                                   // 7286
    has = "hasOwnProperty",                                                                                            // 7287
    supportsTouch = "createTouch" in glob.doc,                                                                         // 7288
    events = [                                                                                                         // 7289
        "click", "dblclick", "mousedown", "mousemove", "mouseout",                                                     // 7290
        "mouseover", "mouseup", "touchstart", "touchmove", "touchend",                                                 // 7291
        "touchcancel"                                                                                                  // 7292
    ],                                                                                                                 // 7293
    touchMap = {                                                                                                       // 7294
        mousedown: "touchstart",                                                                                       // 7295
        mousemove: "touchmove",                                                                                        // 7296
        mouseup: "touchend"                                                                                            // 7297
    },                                                                                                                 // 7298
    getScroll = function (xy, el) {                                                                                    // 7299
        var name = xy == "y" ? "scrollTop" : "scrollLeft",                                                             // 7300
            doc = el && el.node ? el.node.ownerDocument : glob.doc;                                                    // 7301
        return doc[name in doc.documentElement ? "documentElement" : "body"][name];                                    // 7302
    },                                                                                                                 // 7303
    preventDefault = function () {                                                                                     // 7304
        this.returnValue = false;                                                                                      // 7305
    },                                                                                                                 // 7306
    preventTouch = function () {                                                                                       // 7307
        return this.originalEvent.preventDefault();                                                                    // 7308
    },                                                                                                                 // 7309
    stopPropagation = function () {                                                                                    // 7310
        this.cancelBubble = true;                                                                                      // 7311
    },                                                                                                                 // 7312
    stopTouch = function () {                                                                                          // 7313
        return this.originalEvent.stopPropagation();                                                                   // 7314
    },                                                                                                                 // 7315
    addEvent = function (obj, type, fn, element) {                                                                     // 7316
        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,                                        // 7317
            f = function (e) {                                                                                         // 7318
                var scrollY = getScroll("y", element),                                                                 // 7319
                    scrollX = getScroll("x", element);                                                                 // 7320
                if (supportsTouch && touchMap[has](type)) {                                                            // 7321
                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {                     // 7322
                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {             // 7323
                            var olde = e;                                                                              // 7324
                            e = e.targetTouches[i];                                                                    // 7325
                            e.originalEvent = olde;                                                                    // 7326
                            e.preventDefault = preventTouch;                                                           // 7327
                            e.stopPropagation = stopTouch;                                                             // 7328
                            break;                                                                                     // 7329
                        }                                                                                              // 7330
                    }                                                                                                  // 7331
                }                                                                                                      // 7332
                var x = e.clientX + scrollX,                                                                           // 7333
                    y = e.clientY + scrollY;                                                                           // 7334
                return fn.call(element, e, x, y);                                                                      // 7335
            };                                                                                                         // 7336
                                                                                                                       // 7337
        if (type !== realName) {                                                                                       // 7338
            obj.addEventListener(type, f, false);                                                                      // 7339
        }                                                                                                              // 7340
                                                                                                                       // 7341
        obj.addEventListener(realName, f, false);                                                                      // 7342
                                                                                                                       // 7343
        return function () {                                                                                           // 7344
            if (type !== realName) {                                                                                   // 7345
                obj.removeEventListener(type, f, false);                                                               // 7346
            }                                                                                                          // 7347
                                                                                                                       // 7348
            obj.removeEventListener(realName, f, false);                                                               // 7349
            return true;                                                                                               // 7350
        };                                                                                                             // 7351
    },                                                                                                                 // 7352
    drag = [],                                                                                                         // 7353
    dragMove = function (e) {                                                                                          // 7354
        var x = e.clientX,                                                                                             // 7355
            y = e.clientY,                                                                                             // 7356
            scrollY = getScroll("y"),                                                                                  // 7357
            scrollX = getScroll("x"),                                                                                  // 7358
            dragi,                                                                                                     // 7359
            j = drag.length;                                                                                           // 7360
        while (j--) {                                                                                                  // 7361
            dragi = drag[j];                                                                                           // 7362
            if (supportsTouch) {                                                                                       // 7363
                var i = e.touches && e.touches.length,                                                                 // 7364
                    touch;                                                                                             // 7365
                while (i--) {                                                                                          // 7366
                    touch = e.touches[i];                                                                              // 7367
                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {               // 7368
                        x = touch.clientX;                                                                             // 7369
                        y = touch.clientY;                                                                             // 7370
                        (e.originalEvent ? e.originalEvent : e).preventDefault();                                      // 7371
                        break;                                                                                         // 7372
                    }                                                                                                  // 7373
                }                                                                                                      // 7374
            } else {                                                                                                   // 7375
                e.preventDefault();                                                                                    // 7376
            }                                                                                                          // 7377
            var node = dragi.el.node,                                                                                  // 7378
                o,                                                                                                     // 7379
                next = node.nextSibling,                                                                               // 7380
                parent = node.parentNode,                                                                              // 7381
                display = node.style.display;                                                                          // 7382
            // glob.win.opera && parent.removeChild(node);                                                             // 7383
            // node.style.display = "none";                                                                            // 7384
            // o = dragi.el.paper.getElementByPoint(x, y);                                                             // 7385
            // node.style.display = display;                                                                           // 7386
            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));                  // 7387
            // o && eve("snap.drag.over." + dragi.el.id, dragi.el, o);                                                 // 7388
            x += scrollX;                                                                                              // 7389
            y += scrollY;                                                                                              // 7390
            eve("snap.drag.move." + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);
        }                                                                                                              // 7392
    },                                                                                                                 // 7393
    dragUp = function (e) {                                                                                            // 7394
        Snap.unmousemove(dragMove).unmouseup(dragUp);                                                                  // 7395
        var i = drag.length,                                                                                           // 7396
            dragi;                                                                                                     // 7397
        while (i--) {                                                                                                  // 7398
            dragi = drag[i];                                                                                           // 7399
            dragi.el._drag = {};                                                                                       // 7400
            eve("snap.drag.end." + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);
            eve.off("snap.drag.*." + dragi.el.id);                                                                     // 7402
        }                                                                                                              // 7403
        drag = [];                                                                                                     // 7404
    };                                                                                                                 // 7405
    /*\
     * Element.click                                                                                                   // 7407
     [ method ]                                                                                                        // 7408
     **                                                                                                                // 7409
     * Adds a click event handler to the element                                                                       // 7410
     - handler (function) handler for the event                                                                        // 7411
     = (object) @Element                                                                                               // 7412
    \*/                                                                                                                // 7413
    /*\
     * Element.unclick                                                                                                 // 7415
     [ method ]                                                                                                        // 7416
     **                                                                                                                // 7417
     * Removes a click event handler from the element                                                                  // 7418
     - handler (function) handler for the event                                                                        // 7419
     = (object) @Element                                                                                               // 7420
    \*/                                                                                                                // 7421
                                                                                                                       // 7422
    /*\
     * Element.dblclick                                                                                                // 7424
     [ method ]                                                                                                        // 7425
     **                                                                                                                // 7426
     * Adds a double click event handler to the element                                                                // 7427
     - handler (function) handler for the event                                                                        // 7428
     = (object) @Element                                                                                               // 7429
    \*/                                                                                                                // 7430
    /*\
     * Element.undblclick                                                                                              // 7432
     [ method ]                                                                                                        // 7433
     **                                                                                                                // 7434
     * Removes a double click event handler from the element                                                           // 7435
     - handler (function) handler for the event                                                                        // 7436
     = (object) @Element                                                                                               // 7437
    \*/                                                                                                                // 7438
                                                                                                                       // 7439
    /*\
     * Element.mousedown                                                                                               // 7441
     [ method ]                                                                                                        // 7442
     **                                                                                                                // 7443
     * Adds a mousedown event handler to the element                                                                   // 7444
     - handler (function) handler for the event                                                                        // 7445
     = (object) @Element                                                                                               // 7446
    \*/                                                                                                                // 7447
    /*\
     * Element.unmousedown                                                                                             // 7449
     [ method ]                                                                                                        // 7450
     **                                                                                                                // 7451
     * Removes a mousedown event handler from the element                                                              // 7452
     - handler (function) handler for the event                                                                        // 7453
     = (object) @Element                                                                                               // 7454
    \*/                                                                                                                // 7455
                                                                                                                       // 7456
    /*\
     * Element.mousemove                                                                                               // 7458
     [ method ]                                                                                                        // 7459
     **                                                                                                                // 7460
     * Adds a mousemove event handler to the element                                                                   // 7461
     - handler (function) handler for the event                                                                        // 7462
     = (object) @Element                                                                                               // 7463
    \*/                                                                                                                // 7464
    /*\
     * Element.unmousemove                                                                                             // 7466
     [ method ]                                                                                                        // 7467
     **                                                                                                                // 7468
     * Removes a mousemove event handler from the element                                                              // 7469
     - handler (function) handler for the event                                                                        // 7470
     = (object) @Element                                                                                               // 7471
    \*/                                                                                                                // 7472
                                                                                                                       // 7473
    /*\
     * Element.mouseout                                                                                                // 7475
     [ method ]                                                                                                        // 7476
     **                                                                                                                // 7477
     * Adds a mouseout event handler to the element                                                                    // 7478
     - handler (function) handler for the event                                                                        // 7479
     = (object) @Element                                                                                               // 7480
    \*/                                                                                                                // 7481
    /*\
     * Element.unmouseout                                                                                              // 7483
     [ method ]                                                                                                        // 7484
     **                                                                                                                // 7485
     * Removes a mouseout event handler from the element                                                               // 7486
     - handler (function) handler for the event                                                                        // 7487
     = (object) @Element                                                                                               // 7488
    \*/                                                                                                                // 7489
                                                                                                                       // 7490
    /*\
     * Element.mouseover                                                                                               // 7492
     [ method ]                                                                                                        // 7493
     **                                                                                                                // 7494
     * Adds a mouseover event handler to the element                                                                   // 7495
     - handler (function) handler for the event                                                                        // 7496
     = (object) @Element                                                                                               // 7497
    \*/                                                                                                                // 7498
    /*\
     * Element.unmouseover                                                                                             // 7500
     [ method ]                                                                                                        // 7501
     **                                                                                                                // 7502
     * Removes a mouseover event handler from the element                                                              // 7503
     - handler (function) handler for the event                                                                        // 7504
     = (object) @Element                                                                                               // 7505
    \*/                                                                                                                // 7506
                                                                                                                       // 7507
    /*\
     * Element.mouseup                                                                                                 // 7509
     [ method ]                                                                                                        // 7510
     **                                                                                                                // 7511
     * Adds a mouseup event handler to the element                                                                     // 7512
     - handler (function) handler for the event                                                                        // 7513
     = (object) @Element                                                                                               // 7514
    \*/                                                                                                                // 7515
    /*\
     * Element.unmouseup                                                                                               // 7517
     [ method ]                                                                                                        // 7518
     **                                                                                                                // 7519
     * Removes a mouseup event handler from the element                                                                // 7520
     - handler (function) handler for the event                                                                        // 7521
     = (object) @Element                                                                                               // 7522
    \*/                                                                                                                // 7523
                                                                                                                       // 7524
    /*\
     * Element.touchstart                                                                                              // 7526
     [ method ]                                                                                                        // 7527
     **                                                                                                                // 7528
     * Adds a touchstart event handler to the element                                                                  // 7529
     - handler (function) handler for the event                                                                        // 7530
     = (object) @Element                                                                                               // 7531
    \*/                                                                                                                // 7532
    /*\
     * Element.untouchstart                                                                                            // 7534
     [ method ]                                                                                                        // 7535
     **                                                                                                                // 7536
     * Removes a touchstart event handler from the element                                                             // 7537
     - handler (function) handler for the event                                                                        // 7538
     = (object) @Element                                                                                               // 7539
    \*/                                                                                                                // 7540
                                                                                                                       // 7541
    /*\
     * Element.touchmove                                                                                               // 7543
     [ method ]                                                                                                        // 7544
     **                                                                                                                // 7545
     * Adds a touchmove event handler to the element                                                                   // 7546
     - handler (function) handler for the event                                                                        // 7547
     = (object) @Element                                                                                               // 7548
    \*/                                                                                                                // 7549
    /*\
     * Element.untouchmove                                                                                             // 7551
     [ method ]                                                                                                        // 7552
     **                                                                                                                // 7553
     * Removes a touchmove event handler from the element                                                              // 7554
     - handler (function) handler for the event                                                                        // 7555
     = (object) @Element                                                                                               // 7556
    \*/                                                                                                                // 7557
                                                                                                                       // 7558
    /*\
     * Element.touchend                                                                                                // 7560
     [ method ]                                                                                                        // 7561
     **                                                                                                                // 7562
     * Adds a touchend event handler to the element                                                                    // 7563
     - handler (function) handler for the event                                                                        // 7564
     = (object) @Element                                                                                               // 7565
    \*/                                                                                                                // 7566
    /*\
     * Element.untouchend                                                                                              // 7568
     [ method ]                                                                                                        // 7569
     **                                                                                                                // 7570
     * Removes a touchend event handler from the element                                                               // 7571
     - handler (function) handler for the event                                                                        // 7572
     = (object) @Element                                                                                               // 7573
    \*/                                                                                                                // 7574
                                                                                                                       // 7575
    /*\
     * Element.touchcancel                                                                                             // 7577
     [ method ]                                                                                                        // 7578
     **                                                                                                                // 7579
     * Adds a touchcancel event handler to the element                                                                 // 7580
     - handler (function) handler for the event                                                                        // 7581
     = (object) @Element                                                                                               // 7582
    \*/                                                                                                                // 7583
    /*\
     * Element.untouchcancel                                                                                           // 7585
     [ method ]                                                                                                        // 7586
     **                                                                                                                // 7587
     * Removes a touchcancel event handler from the element                                                            // 7588
     - handler (function) handler for the event                                                                        // 7589
     = (object) @Element                                                                                               // 7590
    \*/                                                                                                                // 7591
    for (var i = events.length; i--;) {                                                                                // 7592
        (function (eventName) {                                                                                        // 7593
            Snap[eventName] = elproto[eventName] = function (fn, scope) {                                              // 7594
                if (Snap.is(fn, "function")) {                                                                         // 7595
                    this.events = this.events || [];                                                                   // 7596
                    this.events.push({                                                                                 // 7597
                        name: eventName,                                                                               // 7598
                        f: fn,                                                                                         // 7599
                        unbind: addEvent(this.node || document, eventName, fn, scope || this)                          // 7600
                    });                                                                                                // 7601
                } else {                                                                                               // 7602
                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {      // 7603
                        try {                                                                                          // 7604
                            this.events[i].f.call(this);                                                               // 7605
                        } catch (e) {}                                                                                 // 7606
                    }                                                                                                  // 7607
                }                                                                                                      // 7608
                return this;                                                                                           // 7609
            };                                                                                                         // 7610
            Snap["un" + eventName] =                                                                                   // 7611
            elproto["un" + eventName] = function (fn) {                                                                // 7612
                var events = this.events || [],                                                                        // 7613
                    l = events.length;                                                                                 // 7614
                while (l--) if (events[l].name == eventName &&                                                         // 7615
                               (events[l].f == fn || !fn)) {                                                           // 7616
                    events[l].unbind();                                                                                // 7617
                    events.splice(l, 1);                                                                               // 7618
                    !events.length && delete this.events;                                                              // 7619
                    return this;                                                                                       // 7620
                }                                                                                                      // 7621
                return this;                                                                                           // 7622
            };                                                                                                         // 7623
        })(events[i]);                                                                                                 // 7624
    }                                                                                                                  // 7625
    /*\
     * Element.hover                                                                                                   // 7627
     [ method ]                                                                                                        // 7628
     **                                                                                                                // 7629
     * Adds hover event handlers to the element                                                                        // 7630
     - f_in (function) handler for hover in                                                                            // 7631
     - f_out (function) handler for hover out                                                                          // 7632
     - icontext (object) #optional context for hover in handler                                                        // 7633
     - ocontext (object) #optional context for hover out handler                                                       // 7634
     = (object) @Element                                                                                               // 7635
    \*/                                                                                                                // 7636
    elproto.hover = function (f_in, f_out, scope_in, scope_out) {                                                      // 7637
        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);                                  // 7638
    };                                                                                                                 // 7639
    /*\
     * Element.unhover                                                                                                 // 7641
     [ method ]                                                                                                        // 7642
     **                                                                                                                // 7643
     * Removes hover event handlers from the element                                                                   // 7644
     - f_in (function) handler for hover in                                                                            // 7645
     - f_out (function) handler for hover out                                                                          // 7646
     = (object) @Element                                                                                               // 7647
    \*/                                                                                                                // 7648
    elproto.unhover = function (f_in, f_out) {                                                                         // 7649
        return this.unmouseover(f_in).unmouseout(f_out);                                                               // 7650
    };                                                                                                                 // 7651
    var draggable = [];                                                                                                // 7652
    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.                          // 7653
    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?                         // 7654
    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.                      // 7655
    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?
    /*\
     * Element.drag                                                                                                    // 7658
     [ method ]                                                                                                        // 7659
     **                                                                                                                // 7660
     * Adds event handlers for an element's drag gesture                                                               // 7661
     **                                                                                                                // 7662
     - onmove (function) handler for moving                                                                            // 7663
     - onstart (function) handler for drag start                                                                       // 7664
     - onend (function) handler for drag end                                                                           // 7665
     - mcontext (object) #optional context for moving handler                                                          // 7666
     - scontext (object) #optional context for drag start handler                                                      // 7667
     - econtext (object) #optional context for drag end handler                                                        // 7668
     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start,                                  // 7669
     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element         // 7670
     * `drag.over.<id>` fires as well.                                                                                 // 7671
     *                                                                                                                 // 7672
     * Start event and start handler are called in specified context or in context of the element with following parameters:
     o x (number) x position of the mouse                                                                              // 7674
     o y (number) y position of the mouse                                                                              // 7675
     o event (object) DOM event object                                                                                 // 7676
     * Move event and move handler are called in specified context or in context of the element with following parameters:
     o dx (number) shift by x from the start point                                                                     // 7678
     o dy (number) shift by y from the start point                                                                     // 7679
     o x (number) x position of the mouse                                                                              // 7680
     o y (number) y position of the mouse                                                                              // 7681
     o event (object) DOM event object                                                                                 // 7682
     * End event and end handler are called in specified context or in context of the element with following parameters:
     o event (object) DOM event object                                                                                 // 7684
     = (object) @Element                                                                                               // 7685
    \*/                                                                                                                // 7686
    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {                             // 7687
        var el = this;                                                                                                 // 7688
        if (!arguments.length) {                                                                                       // 7689
            var origTransform;                                                                                         // 7690
            return el.drag(function (dx, dy) {                                                                         // 7691
                this.attr({                                                                                            // 7692
                    transform: origTransform + (origTransform ? "T" : "t") + [dx, dy]                                  // 7693
                });                                                                                                    // 7694
            }, function () {                                                                                           // 7695
                origTransform = this.transform().local;                                                                // 7696
            });                                                                                                        // 7697
        }                                                                                                              // 7698
        function start(e, x, y) {                                                                                      // 7699
            (e.originalEvent || e).preventDefault();                                                                   // 7700
            el._drag.x = x;                                                                                            // 7701
            el._drag.y = y;                                                                                            // 7702
            el._drag.id = e.identifier;                                                                                // 7703
            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);                                                  // 7704
            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});               // 7705
            onstart && eve.on("snap.drag.start." + el.id, onstart);                                                    // 7706
            onmove && eve.on("snap.drag.move." + el.id, onmove);                                                       // 7707
            onend && eve.on("snap.drag.end." + el.id, onend);                                                          // 7708
            eve("snap.drag.start." + el.id, start_scope || move_scope || el, x, y, e);                                 // 7709
        }                                                                                                              // 7710
        function init(e, x, y) {                                                                                       // 7711
            eve("snap.draginit." + el.id, el, e, x, y);                                                                // 7712
        }                                                                                                              // 7713
        eve.on("snap.draginit." + el.id, start);                                                                       // 7714
        el._drag = {};                                                                                                 // 7715
        draggable.push({el: el, start: start, init: init});                                                            // 7716
        el.mousedown(init);                                                                                            // 7717
        return el;                                                                                                     // 7718
    };                                                                                                                 // 7719
    /*                                                                                                                 // 7720
     * Element.onDragOver                                                                                              // 7721
     [ method ]                                                                                                        // 7722
     **                                                                                                                // 7723
     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id) // 7724
     - f (function) handler for event, first argument would be the element you are dragging over                       // 7725
    \*/                                                                                                                // 7726
    // elproto.onDragOver = function (f) {                                                                             // 7727
    //     f ? eve.on("snap.drag.over." + this.id, f) : eve.unbind("snap.drag.over." + this.id);                       // 7728
    // };                                                                                                              // 7729
    /*\
     * Element.undrag                                                                                                  // 7731
     [ method ]                                                                                                        // 7732
     **                                                                                                                // 7733
     * Removes all drag event handlers from the given element                                                          // 7734
    \*/                                                                                                                // 7735
    elproto.undrag = function () {                                                                                     // 7736
        var i = draggable.length;                                                                                      // 7737
        while (i--) if (draggable[i].el == this) {                                                                     // 7738
            this.unmousedown(draggable[i].init);                                                                       // 7739
            draggable.splice(i, 1);                                                                                    // 7740
            eve.unbind("snap.drag.*." + this.id);                                                                      // 7741
            eve.unbind("snap.draginit." + this.id);                                                                    // 7742
        }                                                                                                              // 7743
        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);                                             // 7744
        return this;                                                                                                   // 7745
    };                                                                                                                 // 7746
});                                                                                                                    // 7747
                                                                                                                       // 7748
// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 7749
//                                                                                                                     // 7750
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 7751
// you may not use this file except in compliance with the License.                                                    // 7752
// You may obtain a copy of the License at                                                                             // 7753
//                                                                                                                     // 7754
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7755
//                                                                                                                     // 7756
// Unless required by applicable law or agreed to in writing, software                                                 // 7757
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 7758
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7759
// See the License for the specific language governing permissions and                                                 // 7760
// limitations under the License.                                                                                      // 7761
Snap.plugin(function (Snap, Element, Paper, glob) {                                                                    // 7762
    var elproto = Element.prototype,                                                                                   // 7763
        pproto = Paper.prototype,                                                                                      // 7764
        rgurl = /^\s*url\((.+)\)/,                                                                                     // 7765
        Str = String,                                                                                                  // 7766
        $ = Snap._.$;                                                                                                  // 7767
    Snap.filter = {};                                                                                                  // 7768
    /*\
     * Paper.filter                                                                                                    // 7770
     [ method ]                                                                                                        // 7771
     **                                                                                                                // 7772
     * Creates a `<filter>` element                                                                                    // 7773
     **                                                                                                                // 7774
     - filstr (string) SVG fragment of filter provided as a string                                                     // 7775
     = (object) @Element                                                                                               // 7776
     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.                      // 7777
     > Usage                                                                                                           // 7778
     | var f = paper.filter('<feGaussianBlur stdDeviation="2"/>'),                                                     // 7779
     |     c = paper.circle(10, 10, 10).attr({                                                                         // 7780
     |         filter: f                                                                                               // 7781
     |     });                                                                                                         // 7782
    \*/                                                                                                                // 7783
    pproto.filter = function (filstr) {                                                                                // 7784
        var paper = this;                                                                                              // 7785
        if (paper.type != "svg") {                                                                                     // 7786
            paper = paper.paper;                                                                                       // 7787
        }                                                                                                              // 7788
        var f = Snap.parse(Str(filstr)),                                                                               // 7789
            id = Snap._.id(),                                                                                          // 7790
            width = paper.node.offsetWidth,                                                                            // 7791
            height = paper.node.offsetHeight,                                                                          // 7792
            filter = $("filter");                                                                                      // 7793
        $(filter, {                                                                                                    // 7794
            id: id,                                                                                                    // 7795
            filterUnits: "userSpaceOnUse"                                                                              // 7796
        });                                                                                                            // 7797
        filter.appendChild(f.node);                                                                                    // 7798
        paper.defs.appendChild(filter);                                                                                // 7799
        return new Element(filter);                                                                                    // 7800
    };                                                                                                                 // 7801
                                                                                                                       // 7802
    eve.on("snap.util.getattr.filter", function () {                                                                   // 7803
        eve.stop();                                                                                                    // 7804
        var p = $(this.node, "filter");                                                                                // 7805
        if (p) {                                                                                                       // 7806
            var match = Str(p).match(rgurl);                                                                           // 7807
            return match && Snap.select(match[1]);                                                                     // 7808
        }                                                                                                              // 7809
    });                                                                                                                // 7810
    eve.on("snap.util.attr.filter", function (value) {                                                                 // 7811
        if (value instanceof Element && value.type == "filter") {                                                      // 7812
            eve.stop();                                                                                                // 7813
            var id = value.node.id;                                                                                    // 7814
            if (!id) {                                                                                                 // 7815
                $(value.node, {id: value.id});                                                                         // 7816
                id = value.id;                                                                                         // 7817
            }                                                                                                          // 7818
            $(this.node, {                                                                                             // 7819
                filter: Snap.url(id)                                                                                   // 7820
            });                                                                                                        // 7821
        }                                                                                                              // 7822
        if (!value || value == "none") {                                                                               // 7823
            eve.stop();                                                                                                // 7824
            this.node.removeAttribute("filter");                                                                       // 7825
        }                                                                                                              // 7826
    });                                                                                                                // 7827
    /*\
     * Snap.filter.blur                                                                                                // 7829
     [ method ]                                                                                                        // 7830
     **                                                                                                                // 7831
     * Returns an SVG markup string for the blur filter                                                                // 7832
     **                                                                                                                // 7833
     - x (number) amount of horizontal blur, in pixels                                                                 // 7834
     - y (number) #optional amount of vertical blur, in pixels                                                         // 7835
     = (string) filter representation                                                                                  // 7836
     > Usage                                                                                                           // 7837
     | var f = paper.filter(Snap.filter.blur(5, 10)),                                                                  // 7838
     |     c = paper.circle(10, 10, 10).attr({                                                                         // 7839
     |         filter: f                                                                                               // 7840
     |     });                                                                                                         // 7841
    \*/                                                                                                                // 7842
    Snap.filter.blur = function (x, y) {                                                                               // 7843
        if (x == null) {                                                                                               // 7844
            x = 2;                                                                                                     // 7845
        }                                                                                                              // 7846
        var def = y == null ? x : [x, y];                                                                              // 7847
        return Snap.format('\<feGaussianBlur stdDeviation="{def}"/>', {                                                // 7848
            def: def                                                                                                   // 7849
        });                                                                                                            // 7850
    };                                                                                                                 // 7851
    Snap.filter.blur.toString = function () {                                                                          // 7852
        return this();                                                                                                 // 7853
    };                                                                                                                 // 7854
    /*\
     * Snap.filter.shadow                                                                                              // 7856
     [ method ]                                                                                                        // 7857
     **                                                                                                                // 7858
     * Returns an SVG markup string for the shadow filter                                                              // 7859
     **                                                                                                                // 7860
     - dx (number) #optional horizontal shift of the shadow, in pixels                                                 // 7861
     - dy (number) #optional vertical shift of the shadow, in pixels                                                   // 7862
     - blur (number) #optional amount of blur                                                                          // 7863
     - color (string) #optional color of the shadow                                                                    // 7864
     - opacity (number) #optional `0..1` opacity of the shadow                                                         // 7865
     * or                                                                                                              // 7866
     - dx (number) #optional horizontal shift of the shadow, in pixels                                                 // 7867
     - dy (number) #optional vertical shift of the shadow, in pixels                                                   // 7868
     - color (string) #optional color of the shadow                                                                    // 7869
     - opacity (number) #optional `0..1` opacity of the shadow                                                         // 7870
     * which makes blur default to `4`. Or                                                                             // 7871
     - dx (number) #optional horizontal shift of the shadow, in pixels                                                 // 7872
     - dy (number) #optional vertical shift of the shadow, in pixels                                                   // 7873
     - opacity (number) #optional `0..1` opacity of the shadow                                                         // 7874
     = (string) filter representation                                                                                  // 7875
     > Usage                                                                                                           // 7876
     | var f = paper.filter(Snap.filter.shadow(0, 2, 3)),                                                              // 7877
     |     c = paper.circle(10, 10, 10).attr({                                                                         // 7878
     |         filter: f                                                                                               // 7879
     |     });                                                                                                         // 7880
    \*/                                                                                                                // 7881
    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {                                                     // 7882
        if (typeof blur == "string") {                                                                                 // 7883
            color = blur;                                                                                              // 7884
            opacity = color;                                                                                           // 7885
            blur = 4;                                                                                                  // 7886
        }                                                                                                              // 7887
        if (typeof color != "string") {                                                                                // 7888
            opacity = color;                                                                                           // 7889
            color = "#000";                                                                                            // 7890
        }                                                                                                              // 7891
        color = color || "#000";                                                                                       // 7892
        if (blur == null) {                                                                                            // 7893
            blur = 4;                                                                                                  // 7894
        }                                                                                                              // 7895
        if (opacity == null) {                                                                                         // 7896
            opacity = 1;                                                                                               // 7897
        }                                                                                                              // 7898
        if (dx == null) {                                                                                              // 7899
            dx = 0;                                                                                                    // 7900
            dy = 2;                                                                                                    // 7901
        }                                                                                                              // 7902
        if (dy == null) {                                                                                              // 7903
            dy = dx;                                                                                                   // 7904
        }                                                                                                              // 7905
        color = Snap.color(color);                                                                                     // 7906
        return Snap.format('<feGaussianBlur in="SourceAlpha" stdDeviation="{blur}"/><feOffset dx="{dx}" dy="{dy}" result="offsetblur"/><feFlood flood-color="{color}"/><feComposite in2="offsetblur" operator="in"/><feComponentTransfer><feFuncA type="linear" slope="{opacity}"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in="SourceGraphic"/></feMerge>', {
            color: color,                                                                                              // 7908
            dx: dx,                                                                                                    // 7909
            dy: dy,                                                                                                    // 7910
            blur: blur,                                                                                                // 7911
            opacity: opacity                                                                                           // 7912
        });                                                                                                            // 7913
    };                                                                                                                 // 7914
    Snap.filter.shadow.toString = function () {                                                                        // 7915
        return this();                                                                                                 // 7916
    };                                                                                                                 // 7917
    /*\
     * Snap.filter.grayscale                                                                                           // 7919
     [ method ]                                                                                                        // 7920
     **                                                                                                                // 7921
     * Returns an SVG markup string for the grayscale filter                                                           // 7922
     **                                                                                                                // 7923
     - amount (number) amount of filter (`0..1`)                                                                       // 7924
     = (string) filter representation                                                                                  // 7925
    \*/                                                                                                                // 7926
    Snap.filter.grayscale = function (amount) {                                                                        // 7927
        if (amount == null) {                                                                                          // 7928
            amount = 1;                                                                                                // 7929
        }                                                                                                              // 7930
        return Snap.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0"/>', {
            a: 0.2126 + 0.7874 * (1 - amount),                                                                         // 7932
            b: 0.7152 - 0.7152 * (1 - amount),                                                                         // 7933
            c: 0.0722 - 0.0722 * (1 - amount),                                                                         // 7934
            d: 0.2126 - 0.2126 * (1 - amount),                                                                         // 7935
            e: 0.7152 + 0.2848 * (1 - amount),                                                                         // 7936
            f: 0.0722 - 0.0722 * (1 - amount),                                                                         // 7937
            g: 0.2126 - 0.2126 * (1 - amount),                                                                         // 7938
            h: 0.0722 + 0.9278 * (1 - amount)                                                                          // 7939
        });                                                                                                            // 7940
    };                                                                                                                 // 7941
    Snap.filter.grayscale.toString = function () {                                                                     // 7942
        return this();                                                                                                 // 7943
    };                                                                                                                 // 7944
    /*\
     * Snap.filter.sepia                                                                                               // 7946
     [ method ]                                                                                                        // 7947
     **                                                                                                                // 7948
     * Returns an SVG markup string for the sepia filter                                                               // 7949
     **                                                                                                                // 7950
     - amount (number) amount of filter (`0..1`)                                                                       // 7951
     = (string) filter representation                                                                                  // 7952
    \*/                                                                                                                // 7953
    Snap.filter.sepia = function (amount) {                                                                            // 7954
        if (amount == null) {                                                                                          // 7955
            amount = 1;                                                                                                // 7956
        }                                                                                                              // 7957
        return Snap.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0"/>', {
            a: 0.393 + 0.607 * (1 - amount),                                                                           // 7959
            b: 0.769 - 0.769 * (1 - amount),                                                                           // 7960
            c: 0.189 - 0.189 * (1 - amount),                                                                           // 7961
            d: 0.349 - 0.349 * (1 - amount),                                                                           // 7962
            e: 0.686 + 0.314 * (1 - amount),                                                                           // 7963
            f: 0.168 - 0.168 * (1 - amount),                                                                           // 7964
            g: 0.272 - 0.272 * (1 - amount),                                                                           // 7965
            h: 0.534 - 0.534 * (1 - amount),                                                                           // 7966
            i: 0.131 + 0.869 * (1 - amount)                                                                            // 7967
        });                                                                                                            // 7968
    };                                                                                                                 // 7969
    Snap.filter.sepia.toString = function () {                                                                         // 7970
        return this();                                                                                                 // 7971
    };                                                                                                                 // 7972
    /*\
     * Snap.filter.saturate                                                                                            // 7974
     [ method ]                                                                                                        // 7975
     **                                                                                                                // 7976
     * Returns an SVG markup string for the saturate filter                                                            // 7977
     **                                                                                                                // 7978
     - amount (number) amount of filter (`0..1`)                                                                       // 7979
     = (string) filter representation                                                                                  // 7980
    \*/                                                                                                                // 7981
    Snap.filter.saturate = function (amount) {                                                                         // 7982
        if (amount == null) {                                                                                          // 7983
            amount = 1;                                                                                                // 7984
        }                                                                                                              // 7985
        return Snap.format('<feColorMatrix type="saturate" values="{amount}"/>', {                                     // 7986
            amount: 1 - amount                                                                                         // 7987
        });                                                                                                            // 7988
    };                                                                                                                 // 7989
    Snap.filter.saturate.toString = function () {                                                                      // 7990
        return this();                                                                                                 // 7991
    };                                                                                                                 // 7992
    /*\
     * Snap.filter.hueRotate                                                                                           // 7994
     [ method ]                                                                                                        // 7995
     **                                                                                                                // 7996
     * Returns an SVG markup string for the hue-rotate filter                                                          // 7997
     **                                                                                                                // 7998
     - angle (number) angle of rotation                                                                                // 7999
     = (string) filter representation                                                                                  // 8000
    \*/                                                                                                                // 8001
    Snap.filter.hueRotate = function (angle) {                                                                         // 8002
        angle = angle || 0;                                                                                            // 8003
        return Snap.format('<feColorMatrix type="hueRotate" values="{angle}"/>', {                                     // 8004
            angle: angle                                                                                               // 8005
        });                                                                                                            // 8006
    };                                                                                                                 // 8007
    Snap.filter.hueRotate.toString = function () {                                                                     // 8008
        return this();                                                                                                 // 8009
    };                                                                                                                 // 8010
    /*\
     * Snap.filter.invert                                                                                              // 8012
     [ method ]                                                                                                        // 8013
     **                                                                                                                // 8014
     * Returns an SVG markup string for the invert filter                                                              // 8015
     **                                                                                                                // 8016
     - amount (number) amount of filter (`0..1`)                                                                       // 8017
     = (string) filter representation                                                                                  // 8018
    \*/                                                                                                                // 8019
    Snap.filter.invert = function (amount) {                                                                           // 8020
        if (amount == null) {                                                                                          // 8021
            amount = 1;                                                                                                // 8022
        }                                                                                                              // 8023
//        <feColorMatrix type="matrix" values="-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0" color-interpolation-filters="sRGB"/>
        return Snap.format('<feComponentTransfer><feFuncR type="table" tableValues="{amount} {amount2}"/><feFuncG type="table" tableValues="{amount} {amount2}"/><feFuncB type="table" tableValues="{amount} {amount2}"/></feComponentTransfer>', {
            amount: amount,                                                                                            // 8026
            amount2: 1 - amount                                                                                        // 8027
        });                                                                                                            // 8028
    };                                                                                                                 // 8029
    Snap.filter.invert.toString = function () {                                                                        // 8030
        return this();                                                                                                 // 8031
    };                                                                                                                 // 8032
    /*\
     * Snap.filter.brightness                                                                                          // 8034
     [ method ]                                                                                                        // 8035
     **                                                                                                                // 8036
     * Returns an SVG markup string for the brightness filter                                                          // 8037
     **                                                                                                                // 8038
     - amount (number) amount of filter (`0..1`)                                                                       // 8039
     = (string) filter representation                                                                                  // 8040
    \*/                                                                                                                // 8041
    Snap.filter.brightness = function (amount) {                                                                       // 8042
        if (amount == null) {                                                                                          // 8043
            amount = 1;                                                                                                // 8044
        }                                                                                                              // 8045
        return Snap.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}"/><feFuncG type="linear" slope="{amount}"/><feFuncB type="linear" slope="{amount}"/></feComponentTransfer>', {
            amount: amount                                                                                             // 8047
        });                                                                                                            // 8048
    };                                                                                                                 // 8049
    Snap.filter.brightness.toString = function () {                                                                    // 8050
        return this();                                                                                                 // 8051
    };                                                                                                                 // 8052
    /*\
     * Snap.filter.contrast                                                                                            // 8054
     [ method ]                                                                                                        // 8055
     **                                                                                                                // 8056
     * Returns an SVG markup string for the contrast filter                                                            // 8057
     **                                                                                                                // 8058
     - amount (number) amount of filter (`0..1`)                                                                       // 8059
     = (string) filter representation                                                                                  // 8060
    \*/                                                                                                                // 8061
    Snap.filter.contrast = function (amount) {                                                                         // 8062
        if (amount == null) {                                                                                          // 8063
            amount = 1;                                                                                                // 8064
        }                                                                                                              // 8065
        return Snap.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}" intercept="{amount2}"/><feFuncG type="linear" slope="{amount}" intercept="{amount2}"/><feFuncB type="linear" slope="{amount}" intercept="{amount2}"/></feComponentTransfer>', {
            amount: amount,                                                                                            // 8067
            amount2: .5 - amount / 2                                                                                   // 8068
        });                                                                                                            // 8069
    };                                                                                                                 // 8070
    Snap.filter.contrast.toString = function () {                                                                      // 8071
        return this();                                                                                                 // 8072
    };                                                                                                                 // 8073
});                                                                                                                    // 8074
                                                                                                                       // 8075
// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.                                                 // 8076
//                                                                                                                     // 8077
// Licensed under the Apache License, Version 2.0 (the "License");                                                     // 8078
// you may not use this file except in compliance with the License.                                                    // 8079
// You may obtain a copy of the License at                                                                             // 8080
//                                                                                                                     // 8081
// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8082
//                                                                                                                     // 8083
// Unless required by applicable law or agreed to in writing, software                                                 // 8084
// distributed under the License is distributed on an "AS IS" BASIS,                                                   // 8085
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 8086
// See the License for the specific language governing permissions and                                                 // 8087
// limitations under the License.                                                                                      // 8088
Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {                                                          // 8089
    var box = Snap._.box,                                                                                              // 8090
        is = Snap.is,                                                                                                  // 8091
        firstLetter = /^[^a-z]*([tbmlrc])/i,                                                                           // 8092
        toString = function () {                                                                                       // 8093
            return "T" + this.dx + "," + this.dy;                                                                      // 8094
        };                                                                                                             // 8095
    /*\
     * Element.getAlign                                                                                                // 8097
     [ method ]                                                                                                        // 8098
     **                                                                                                                // 8099
     * Returns shift needed to align the element relatively to given element.                                          // 8100
     * If no elements specified, parent `<svg>` container will be used.                                                // 8101
     - el (object) @optional alignment element                                                                         // 8102
     - way (string) one of six values: `"top"`, `"middle"`, `"bottom"`, `"left"`, `"center"`, `"right"`                // 8103
     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string     // 8104
     > Usage                                                                                                           // 8105
     | el.transform(el.getAlign(el2, "top"));                                                                          // 8106
     * or                                                                                                              // 8107
     | var dy = el.getAlign(el2, "top").dy;                                                                            // 8108
    \*/                                                                                                                // 8109
    Element.prototype.getAlign = function (el, way) {                                                                  // 8110
        if (way == null && is(el, "string")) {                                                                         // 8111
            way = el;                                                                                                  // 8112
            el = null;                                                                                                 // 8113
        }                                                                                                              // 8114
        el = el || this.paper;                                                                                         // 8115
        var bx = el.getBBox ? el.getBBox() : box(el),                                                                  // 8116
            bb = this.getBBox(),                                                                                       // 8117
            out = {};                                                                                                  // 8118
        way = way && way.match(firstLetter);                                                                           // 8119
        way = way ? way[1].toLowerCase() : "c";                                                                        // 8120
        switch (way) {                                                                                                 // 8121
            case "t":                                                                                                  // 8122
                out.dx = 0;                                                                                            // 8123
                out.dy = bx.y - bb.y;                                                                                  // 8124
            break;                                                                                                     // 8125
            case "b":                                                                                                  // 8126
                out.dx = 0;                                                                                            // 8127
                out.dy = bx.y2 - bb.y2;                                                                                // 8128
            break;                                                                                                     // 8129
            case "m":                                                                                                  // 8130
                out.dx = 0;                                                                                            // 8131
                out.dy = bx.cy - bb.cy;                                                                                // 8132
            break;                                                                                                     // 8133
            case "l":                                                                                                  // 8134
                out.dx = bx.x - bb.x;                                                                                  // 8135
                out.dy = 0;                                                                                            // 8136
            break;                                                                                                     // 8137
            case "r":                                                                                                  // 8138
                out.dx = bx.x2 - bb.x2;                                                                                // 8139
                out.dy = 0;                                                                                            // 8140
            break;                                                                                                     // 8141
            default:                                                                                                   // 8142
                out.dx = bx.cx - bb.cx;                                                                                // 8143
                out.dy = 0;                                                                                            // 8144
            break;                                                                                                     // 8145
        }                                                                                                              // 8146
        out.toString = toString;                                                                                       // 8147
        return out;                                                                                                    // 8148
    };                                                                                                                 // 8149
    /*\
     * Element.align                                                                                                   // 8151
     [ method ]                                                                                                        // 8152
     **                                                                                                                // 8153
     * Aligns the element relatively to given one via transformation.                                                  // 8154
     * If no elements specified, parent `<svg>` container will be used.                                                // 8155
     - el (object) @optional alignment element                                                                         // 8156
     - way (string) one of six values: `"top"`, `"middle"`, `"bottom"`, `"left"`, `"center"`, `"right"`                // 8157
     = (object) this element                                                                                           // 8158
     > Usage                                                                                                           // 8159
     | el.align(el2, "top");                                                                                           // 8160
     * or                                                                                                              // 8161
     | el.align("middle");                                                                                             // 8162
    \*/                                                                                                                // 8163
    Element.prototype.align = function (el, way) {                                                                     // 8164
        return this.transform("..." + this.getAlign(el, way));                                                         // 8165
    };                                                                                                                 // 8166
});                                                                                                                    // 8167
                                                                                                                       // 8168
return Snap;                                                                                                           // 8169
}));                                                                                                                   // 8170
                                                                                                                       // 8171
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);

///////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['jeremy:snapsvg'] = {};

})();
