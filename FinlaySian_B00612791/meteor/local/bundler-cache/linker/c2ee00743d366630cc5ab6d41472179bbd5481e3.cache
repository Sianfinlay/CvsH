[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar res;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/jeremy_snapsvg/packages/jeremy_snapsvg.js                //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/jeremy:snapsvg/lib/dist/snap.svg.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Snap.svg 0.4.1                                                                                                      // 1\n//                                                                                                                     // 2\n// Copyright (c) 2013 – 2015 Adobe Systems Incorporated. All rights reserved.                                          // 3\n//                                                                                                                     // 4\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 5\n// you may not use this file except in compliance with the License.                                                    // 6\n// You may obtain a copy of the License at                                                                             // 7\n//                                                                                                                     // 8\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 9\n//                                                                                                                     // 10\n// Unless required by applicable law or agreed to in writing, software                                                 // 11\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 12\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 13\n// See the License for the specific language governing permissions and                                                 // 14\n// limitations under the License.                                                                                      // 15\n//                                                                                                                     // 16\n// build: 2015-04-13                                                                                                   // 17\n                                                                                                                       // 18\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 19\n//                                                                                                                     // 20\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 21\n// you may not use this file except in compliance with the License.                                                    // 22\n// You may obtain a copy of the License at                                                                             // 23\n//                                                                                                                     // 24\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 25\n//                                                                                                                     // 26\n// Unless required by applicable law or agreed to in writing, software                                                 // 27\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 28\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 29\n// See the License for the specific language governing permissions and                                                 // 30\n// limitations under the License.                                                                                      // 31\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.4.2 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n                                                                                                                       // 37\n(function (glob) {                                                                                                     // 38\n    var version = \"0.4.2\",                                                                                             // 39\n        has = \"hasOwnProperty\",                                                                                        // 40\n        separator = /[\\.\\/]/,                                                                                          // 41\n        comaseparator = /\\s*,\\s*/,                                                                                     // 42\n        wildcard = \"*\",                                                                                                // 43\n        fun = function () {},                                                                                          // 44\n        numsort = function (a, b) {                                                                                    // 45\n            return a - b;                                                                                              // 46\n        },                                                                                                             // 47\n        current_event,                                                                                                 // 48\n        stop,                                                                                                          // 49\n        events = {n: {}},                                                                                              // 50\n        firstDefined = function () {                                                                                   // 51\n            for (var i = 0, ii = this.length; i < ii; i++) {                                                           // 52\n                if (typeof this[i] != \"undefined\") {                                                                   // 53\n                    return this[i];                                                                                    // 54\n                }                                                                                                      // 55\n            }                                                                                                          // 56\n        },                                                                                                             // 57\n        lastDefined = function () {                                                                                    // 58\n            var i = this.length;                                                                                       // 59\n            while (--i) {                                                                                              // 60\n                if (typeof this[i] != \"undefined\") {                                                                   // 61\n                    return this[i];                                                                                    // 62\n                }                                                                                                      // 63\n            }                                                                                                          // 64\n        },                                                                                                             // 65\n    /*\\\n     * eve                                                                                                             // 67\n     [ method ]                                                                                                        // 68\n                                                                                                                       // 69\n     * Fires event with given `name`, given scope and other parameters.                                                // 70\n                                                                                                                       // 71\n     > Arguments                                                                                                       // 72\n                                                                                                                       // 73\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated                                           // 74\n     - scope (object) context for the event handlers                                                                   // 75\n     - varargs (...) the rest of arguments will be sent to event handlers                                              // 76\n                                                                                                                       // 77\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/                                                                                                                // 79\n        eve = function (name, scope) {                                                                                 // 80\n            name = String(name);                                                                                       // 81\n            var e = events,                                                                                            // 82\n                oldstop = stop,                                                                                        // 83\n                args = Array.prototype.slice.call(arguments, 2),                                                       // 84\n                listeners = eve.listeners(name),                                                                       // 85\n                z = 0,                                                                                                 // 86\n                f = false,                                                                                             // 87\n                l,                                                                                                     // 88\n                indexed = [],                                                                                          // 89\n                queue = {},                                                                                            // 90\n                out = [],                                                                                              // 91\n                ce = current_event,                                                                                    // 92\n                errors = [];                                                                                           // 93\n            out.firstDefined = firstDefined;                                                                           // 94\n            out.lastDefined = lastDefined;                                                                             // 95\n            current_event = name;                                                                                      // 96\n            stop = 0;                                                                                                  // 97\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {                        // 98\n                indexed.push(listeners[i].zIndex);                                                                     // 99\n                if (listeners[i].zIndex < 0) {                                                                         // 100\n                    queue[listeners[i].zIndex] = listeners[i];                                                         // 101\n                }                                                                                                      // 102\n            }                                                                                                          // 103\n            indexed.sort(numsort);                                                                                     // 104\n            while (indexed[z] < 0) {                                                                                   // 105\n                l = queue[indexed[z++]];                                                                               // 106\n                out.push(l.apply(scope, args));                                                                        // 107\n                if (stop) {                                                                                            // 108\n                    stop = oldstop;                                                                                    // 109\n                    return out;                                                                                        // 110\n                }                                                                                                      // 111\n            }                                                                                                          // 112\n            for (i = 0; i < ii; i++) {                                                                                 // 113\n                l = listeners[i];                                                                                      // 114\n                if (\"zIndex\" in l) {                                                                                   // 115\n                    if (l.zIndex == indexed[z]) {                                                                      // 116\n                        out.push(l.apply(scope, args));                                                                // 117\n                        if (stop) {                                                                                    // 118\n                            break;                                                                                     // 119\n                        }                                                                                              // 120\n                        do {                                                                                           // 121\n                            z++;                                                                                       // 122\n                            l = queue[indexed[z]];                                                                     // 123\n                            l && out.push(l.apply(scope, args));                                                       // 124\n                            if (stop) {                                                                                // 125\n                                break;                                                                                 // 126\n                            }                                                                                          // 127\n                        } while (l)                                                                                    // 128\n                    } else {                                                                                           // 129\n                        queue[l.zIndex] = l;                                                                           // 130\n                    }                                                                                                  // 131\n                } else {                                                                                               // 132\n                    out.push(l.apply(scope, args));                                                                    // 133\n                    if (stop) {                                                                                        // 134\n                        break;                                                                                         // 135\n                    }                                                                                                  // 136\n                }                                                                                                      // 137\n            }                                                                                                          // 138\n            stop = oldstop;                                                                                            // 139\n            current_event = ce;                                                                                        // 140\n            return out;                                                                                                // 141\n        };                                                                                                             // 142\n        // Undocumented. Debug only.                                                                                   // 143\n        eve._events = events;                                                                                          // 144\n    /*\\\n     * eve.listeners                                                                                                   // 146\n     [ method ]                                                                                                        // 147\n                                                                                                                       // 148\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.         // 149\n                                                                                                                       // 150\n     > Arguments                                                                                                       // 151\n                                                                                                                       // 152\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated                                             // 153\n                                                                                                                       // 154\n     = (array) array of event handlers                                                                                 // 155\n    \\*/                                                                                                                // 156\n    eve.listeners = function (name) {                                                                                  // 157\n        var names = name.split(separator),                                                                             // 158\n            e = events,                                                                                                // 159\n            item,                                                                                                      // 160\n            items,                                                                                                     // 161\n            k,                                                                                                         // 162\n            i,                                                                                                         // 163\n            ii,                                                                                                        // 164\n            j,                                                                                                         // 165\n            jj,                                                                                                        // 166\n            nes,                                                                                                       // 167\n            es = [e],                                                                                                  // 168\n            out = [];                                                                                                  // 169\n        for (i = 0, ii = names.length; i < ii; i++) {                                                                  // 170\n            nes = [];                                                                                                  // 171\n            for (j = 0, jj = es.length; j < jj; j++) {                                                                 // 172\n                e = es[j].n;                                                                                           // 173\n                items = [e[names[i]], e[wildcard]];                                                                    // 174\n                k = 2;                                                                                                 // 175\n                while (k--) {                                                                                          // 176\n                    item = items[k];                                                                                   // 177\n                    if (item) {                                                                                        // 178\n                        nes.push(item);                                                                                // 179\n                        out = out.concat(item.f || []);                                                                // 180\n                    }                                                                                                  // 181\n                }                                                                                                      // 182\n            }                                                                                                          // 183\n            es = nes;                                                                                                  // 184\n        }                                                                                                              // 185\n        return out;                                                                                                    // 186\n    };                                                                                                                 // 187\n                                                                                                                       // 188\n    /*\\\n     * eve.on                                                                                                          // 190\n     [ method ]                                                                                                        // 191\n     **                                                                                                                // 192\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:                         // 193\n     | eve.on(\"*.under.*\", f);                                                                                         // 194\n     | eve(\"mouse.under.floor\"); // triggers f                                                                         // 195\n     * Use @eve to trigger the listener.                                                                               // 196\n     **                                                                                                                // 197\n     > Arguments                                                                                                       // 198\n     **                                                                                                                // 199\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards                    // 200\n     - f (function) event handler function                                                                             // 201\n     **                                                                                                                // 202\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:                                                                                                        // 204\n     | eve.on(\"mouse\", eatIt)(2);                                                                                      // 205\n     | eve.on(\"mouse\", scream);                                                                                        // 206\n     | eve.on(\"mouse\", catchIt)(1);                                                                                    // 207\n     * This will ensure that `catchIt` function will be called before `eatIt`.                                         // 208\n     *                                                                                                                 // 209\n     * If you want to put your handler before non-indexed handlers, specify a negative value.                          // 210\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/                                                                                                                // 212\n    eve.on = function (name, f) {                                                                                      // 213\n        name = String(name);                                                                                           // 214\n        if (typeof f != \"function\") {                                                                                  // 215\n            return function () {};                                                                                     // 216\n        }                                                                                                              // 217\n        var names = name.split(comaseparator);                                                                         // 218\n        for (var i = 0, ii = names.length; i < ii; i++) {                                                              // 219\n            (function (name) {                                                                                         // 220\n                var names = name.split(separator),                                                                     // 221\n                    e = events,                                                                                        // 222\n                    exist;                                                                                             // 223\n                for (var i = 0, ii = names.length; i < ii; i++) {                                                      // 224\n                    e = e.n;                                                                                           // 225\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});                          // 226\n                }                                                                                                      // 227\n                e.f = e.f || [];                                                                                       // 228\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {                                           // 229\n                    exist = true;                                                                                      // 230\n                    break;                                                                                             // 231\n                }                                                                                                      // 232\n                !exist && e.f.push(f);                                                                                 // 233\n            }(names[i]));                                                                                              // 234\n        }                                                                                                              // 235\n        return function (zIndex) {                                                                                     // 236\n            if (+zIndex == +zIndex) {                                                                                  // 237\n                f.zIndex = +zIndex;                                                                                    // 238\n            }                                                                                                          // 239\n        };                                                                                                             // 240\n    };                                                                                                                 // 241\n    /*\\\n     * eve.f                                                                                                           // 243\n     [ method ]                                                                                                        // 244\n     **                                                                                                                // 245\n     * Returns function that will fire given event with optional arguments.                                            // 246\n     * Arguments that will be passed to the result function will be also                                               // 247\n     * concated to the list of final arguments.                                                                        // 248\n     | el.onclick = eve.f(\"click\", 1, 2);                                                                              // 249\n     | eve.on(\"click\", function (a, b, c) {                                                                            // 250\n     |     console.log(a, b, c); // 1, 2, [event object]                                                               // 251\n     | });                                                                                                             // 252\n     > Arguments                                                                                                       // 253\n     - event (string) event name                                                                                       // 254\n     - varargs (…) and any other arguments                                                                             // 255\n     = (function) possible event handler function                                                                      // 256\n    \\*/                                                                                                                // 257\n    eve.f = function (event) {                                                                                         // 258\n        var attrs = [].slice.call(arguments, 1);                                                                       // 259\n        return function () {                                                                                           // 260\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));                          // 261\n        };                                                                                                             // 262\n    };                                                                                                                 // 263\n    /*\\\n     * eve.stop                                                                                                        // 265\n     [ method ]                                                                                                        // 266\n     **                                                                                                                // 267\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.             // 268\n    \\*/                                                                                                                // 269\n    eve.stop = function () {                                                                                           // 270\n        stop = 1;                                                                                                      // 271\n    };                                                                                                                 // 272\n    /*\\\n     * eve.nt                                                                                                          // 274\n     [ method ]                                                                                                        // 275\n     **                                                                                                                // 276\n     * Could be used inside event handler to figure out actual name of the event.                                      // 277\n     **                                                                                                                // 278\n     > Arguments                                                                                                       // 279\n     **                                                                                                                // 280\n     - subname (string) #optional subname of the event                                                                 // 281\n     **                                                                                                                // 282\n     = (string) name of the event, if `subname` is not specified                                                       // 283\n     * or                                                                                                              // 284\n     = (boolean) `true`, if current event’s name contains `subname`                                                    // 285\n    \\*/                                                                                                                // 286\n    eve.nt = function (subname) {                                                                                      // 287\n        if (subname) {                                                                                                 // 288\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(current_event);                        // 289\n        }                                                                                                              // 290\n        return current_event;                                                                                          // 291\n    };                                                                                                                 // 292\n    /*\\\n     * eve.nts                                                                                                         // 294\n     [ method ]                                                                                                        // 295\n     **                                                                                                                // 296\n     * Could be used inside event handler to figure out actual name of the event.                                      // 297\n     **                                                                                                                // 298\n     **                                                                                                                // 299\n     = (array) names of the event                                                                                      // 300\n    \\*/                                                                                                                // 301\n    eve.nts = function () {                                                                                            // 302\n        return current_event.split(separator);                                                                         // 303\n    };                                                                                                                 // 304\n    /*\\\n     * eve.off                                                                                                         // 306\n     [ method ]                                                                                                        // 307\n     **                                                                                                                // 308\n     * Removes given function from the list of event listeners assigned to given name.                                 // 309\n     * If no arguments specified all the events will be cleared.                                                       // 310\n     **                                                                                                                // 311\n     > Arguments                                                                                                       // 312\n     **                                                                                                                // 313\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards                    // 314\n     - f (function) event handler function                                                                             // 315\n    \\*/                                                                                                                // 316\n    /*\\\n     * eve.unbind                                                                                                      // 318\n     [ method ]                                                                                                        // 319\n     **                                                                                                                // 320\n     * See @eve.off                                                                                                    // 321\n    \\*/                                                                                                                // 322\n    eve.off = eve.unbind = function (name, f) {                                                                        // 323\n        if (!name) {                                                                                                   // 324\n            eve._events = events = {n: {}};                                                                            // 325\n            return;                                                                                                    // 326\n        }                                                                                                              // 327\n        var names = name.split(comaseparator);                                                                         // 328\n        if (names.length > 1) {                                                                                        // 329\n            for (var i = 0, ii = names.length; i < ii; i++) {                                                          // 330\n                eve.off(names[i], f);                                                                                  // 331\n            }                                                                                                          // 332\n            return;                                                                                                    // 333\n        }                                                                                                              // 334\n        names = name.split(separator);                                                                                 // 335\n        var e,                                                                                                         // 336\n            key,                                                                                                       // 337\n            splice,                                                                                                    // 338\n            i, ii, j, jj,                                                                                              // 339\n            cur = [events];                                                                                            // 340\n        for (i = 0, ii = names.length; i < ii; i++) {                                                                  // 341\n            for (j = 0; j < cur.length; j += splice.length - 2) {                                                      // 342\n                splice = [j, 1];                                                                                       // 343\n                e = cur[j].n;                                                                                          // 344\n                if (names[i] != wildcard) {                                                                            // 345\n                    if (e[names[i]]) {                                                                                 // 346\n                        splice.push(e[names[i]]);                                                                      // 347\n                    }                                                                                                  // 348\n                } else {                                                                                               // 349\n                    for (key in e) if (e[has](key)) {                                                                  // 350\n                        splice.push(e[key]);                                                                           // 351\n                    }                                                                                                  // 352\n                }                                                                                                      // 353\n                cur.splice.apply(cur, splice);                                                                         // 354\n            }                                                                                                          // 355\n        }                                                                                                              // 356\n        for (i = 0, ii = cur.length; i < ii; i++) {                                                                    // 357\n            e = cur[i];                                                                                                // 358\n            while (e.n) {                                                                                              // 359\n                if (f) {                                                                                               // 360\n                    if (e.f) {                                                                                         // 361\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {                                   // 362\n                            e.f.splice(j, 1);                                                                          // 363\n                            break;                                                                                     // 364\n                        }                                                                                              // 365\n                        !e.f.length && delete e.f;                                                                     // 366\n                    }                                                                                                  // 367\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {                                                // 368\n                        var funcs = e.n[key].f;                                                                        // 369\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {                               // 370\n                            funcs.splice(j, 1);                                                                        // 371\n                            break;                                                                                     // 372\n                        }                                                                                              // 373\n                        !funcs.length && delete e.n[key].f;                                                            // 374\n                    }                                                                                                  // 375\n                } else {                                                                                               // 376\n                    delete e.f;                                                                                        // 377\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {                                                // 378\n                        delete e.n[key].f;                                                                             // 379\n                    }                                                                                                  // 380\n                }                                                                                                      // 381\n                e = e.n;                                                                                               // 382\n            }                                                                                                          // 383\n        }                                                                                                              // 384\n    };                                                                                                                 // 385\n    /*\\\n     * eve.once                                                                                                        // 387\n     [ method ]                                                                                                        // 388\n     **                                                                                                                // 389\n     * Binds given event handler with a given name to only run once then unbind itself.                                // 390\n     | eve.once(\"login\", f);                                                                                           // 391\n     | eve(\"login\"); // triggers f                                                                                     // 392\n     | eve(\"login\"); // no listeners                                                                                   // 393\n     * Use @eve to trigger the listener.                                                                               // 394\n     **                                                                                                                // 395\n     > Arguments                                                                                                       // 396\n     **                                                                                                                // 397\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards                    // 398\n     - f (function) event handler function                                                                             // 399\n     **                                                                                                                // 400\n     = (function) same return function as @eve.on                                                                      // 401\n    \\*/                                                                                                                // 402\n    eve.once = function (name, f) {                                                                                    // 403\n        var f2 = function () {                                                                                         // 404\n            eve.unbind(name, f2);                                                                                      // 405\n            return f.apply(this, arguments);                                                                           // 406\n        };                                                                                                             // 407\n        return eve.on(name, f2);                                                                                       // 408\n    };                                                                                                                 // 409\n    /*\\\n     * eve.version                                                                                                     // 411\n     [ property (string) ]                                                                                             // 412\n     **                                                                                                                // 413\n     * Current version of the library.                                                                                 // 414\n    \\*/                                                                                                                // 415\n    eve.version = version;                                                                                             // 416\n    eve.toString = function () {                                                                                       // 417\n        return \"You are running Eve \" + version;                                                                       // 418\n    };                                                                                                                 // 419\n    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : (typeof define === \"function\" && define.amd ? (define(\"eve\", [], function() { return eve; })) : (glob.eve = eve));\n})(this);                                                                                                              // 421\n                                                                                                                       // 422\n(function (glob, factory) {                                                                                            // 423\n    // AMD support                                                                                                     // 424\n    if (typeof define == \"function\" && define.amd) {                                                                   // 425\n        // Define as an anonymous module                                                                               // 426\n        define([\"eve\"], function (eve) {                                                                               // 427\n            return factory(glob, eve);                                                                                 // 428\n        });                                                                                                            // 429\n    } else if (typeof exports != 'undefined') {                                                                        // 430\n        // Next for Node.js or CommonJS                                                                                // 431\n        var eve = require('eve');                                                                                      // 432\n        module.exports = factory(glob, eve);                                                                           // 433\n    } else {                                                                                                           // 434\n        // Browser globals (glob is window)                                                                            // 435\n        // Snap adds itself to window                                                                                  // 436\n        factory(glob, glob.eve);                                                                                       // 437\n    }                                                                                                                  // 438\n}(window || this, function (window, eve) {                                                                             // 439\n                                                                                                                       // 440\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 441\n//                                                                                                                     // 442\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 443\n// you may not use this file except in compliance with the License.                                                    // 444\n// You may obtain a copy of the License at                                                                             // 445\n//                                                                                                                     // 446\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 447\n//                                                                                                                     // 448\n// Unless required by applicable law or agreed to in writing, software                                                 // 449\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 450\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 451\n// See the License for the specific language governing permissions and                                                 // 452\n// limitations under the License.                                                                                      // 453\nvar mina = (function (eve) {                                                                                           // 454\n    var animations = {},                                                                                               // 455\n    requestAnimFrame = window.requestAnimationFrame       ||                                                           // 456\n                       window.webkitRequestAnimationFrame ||                                                           // 457\n                       window.mozRequestAnimationFrame    ||                                                           // 458\n                       window.oRequestAnimationFrame      ||                                                           // 459\n                       window.msRequestAnimationFrame     ||                                                           // 460\n                       function (callback) {                                                                           // 461\n                           setTimeout(callback, 16);                                                                   // 462\n                       },                                                                                              // 463\n    isArray = Array.isArray || function (a) {                                                                          // 464\n        return a instanceof Array ||                                                                                   // 465\n            Object.prototype.toString.call(a) == \"[object Array]\";                                                     // 466\n    },                                                                                                                 // 467\n    idgen = 0,                                                                                                         // 468\n    idprefix = \"M\" + (+new Date).toString(36),                                                                         // 469\n    ID = function () {                                                                                                 // 470\n        return idprefix + (idgen++).toString(36);                                                                      // 471\n    },                                                                                                                 // 472\n    diff = function (a, b, A, B) {                                                                                     // 473\n        if (isArray(a)) {                                                                                              // 474\n            res = [];                                                                                                  // 475\n            for (var i = 0, ii = a.length; i < ii; i++) {                                                              // 476\n                res[i] = diff(a[i], b, A[i], B);                                                                       // 477\n            }                                                                                                          // 478\n            return res;                                                                                                // 479\n        }                                                                                                              // 480\n        var dif = (A - a) / (B - b);                                                                                   // 481\n        return function (bb) {                                                                                         // 482\n            return a + dif * (bb - b);                                                                                 // 483\n        };                                                                                                             // 484\n    },                                                                                                                 // 485\n    timer = Date.now || function () {                                                                                  // 486\n        return +new Date;                                                                                              // 487\n    },                                                                                                                 // 488\n    sta = function (val) {                                                                                             // 489\n        var a = this;                                                                                                  // 490\n        if (val == null) {                                                                                             // 491\n            return a.s;                                                                                                // 492\n        }                                                                                                              // 493\n        var ds = a.s - val;                                                                                            // 494\n        a.b += a.dur * ds;                                                                                             // 495\n        a.B += a.dur * ds;                                                                                             // 496\n        a.s = val;                                                                                                     // 497\n    },                                                                                                                 // 498\n    speed = function (val) {                                                                                           // 499\n        var a = this;                                                                                                  // 500\n        if (val == null) {                                                                                             // 501\n            return a.spd;                                                                                              // 502\n        }                                                                                                              // 503\n        a.spd = val;                                                                                                   // 504\n    },                                                                                                                 // 505\n    duration = function (val) {                                                                                        // 506\n        var a = this;                                                                                                  // 507\n        if (val == null) {                                                                                             // 508\n            return a.dur;                                                                                              // 509\n        }                                                                                                              // 510\n        a.s = a.s * val / a.dur;                                                                                       // 511\n        a.dur = val;                                                                                                   // 512\n    },                                                                                                                 // 513\n    stopit = function () {                                                                                             // 514\n        var a = this;                                                                                                  // 515\n        delete animations[a.id];                                                                                       // 516\n        a.update();                                                                                                    // 517\n        eve(\"mina.stop.\" + a.id, a);                                                                                   // 518\n    },                                                                                                                 // 519\n    pause = function () {                                                                                              // 520\n        var a = this;                                                                                                  // 521\n        if (a.pdif) {                                                                                                  // 522\n            return;                                                                                                    // 523\n        }                                                                                                              // 524\n        delete animations[a.id];                                                                                       // 525\n        a.update();                                                                                                    // 526\n        a.pdif = a.get() - a.b;                                                                                        // 527\n    },                                                                                                                 // 528\n    resume = function () {                                                                                             // 529\n        var a = this;                                                                                                  // 530\n        if (!a.pdif) {                                                                                                 // 531\n            return;                                                                                                    // 532\n        }                                                                                                              // 533\n        a.b = a.get() - a.pdif;                                                                                        // 534\n        delete a.pdif;                                                                                                 // 535\n        animations[a.id] = a;                                                                                          // 536\n    },                                                                                                                 // 537\n    update = function () {                                                                                             // 538\n        var a = this,                                                                                                  // 539\n            res;                                                                                                       // 540\n        if (isArray(a.start)) {                                                                                        // 541\n            res = [];                                                                                                  // 542\n            for (var j = 0, jj = a.start.length; j < jj; j++) {                                                        // 543\n                res[j] = +a.start[j] +                                                                                 // 544\n                    (a.end[j] - a.start[j]) * a.easing(a.s);                                                           // 545\n            }                                                                                                          // 546\n        } else {                                                                                                       // 547\n            res = +a.start + (a.end - a.start) * a.easing(a.s);                                                        // 548\n        }                                                                                                              // 549\n        a.set(res);                                                                                                    // 550\n    },                                                                                                                 // 551\n    frame = function () {                                                                                              // 552\n        var len = 0;                                                                                                   // 553\n        for (var i in animations) if (animations.hasOwnProperty(i)) {                                                  // 554\n            var a = animations[i],                                                                                     // 555\n                b = a.get(),                                                                                           // 556\n                res;                                                                                                   // 557\n            len++;                                                                                                     // 558\n            a.s = (b - a.b) / (a.dur / a.spd);                                                                         // 559\n            if (a.s >= 1) {                                                                                            // 560\n                delete animations[i];                                                                                  // 561\n                a.s = 1;                                                                                               // 562\n                len--;                                                                                                 // 563\n                (function (a) {                                                                                        // 564\n                    setTimeout(function () {                                                                           // 565\n                        eve(\"mina.finish.\" + a.id, a);                                                                 // 566\n                    });                                                                                                // 567\n                }(a));                                                                                                 // 568\n            }                                                                                                          // 569\n            a.update();                                                                                                // 570\n        }                                                                                                              // 571\n        len && requestAnimFrame(frame);                                                                                // 572\n    },                                                                                                                 // 573\n    /*\\\n     * mina                                                                                                            // 575\n     [ method ]                                                                                                        // 576\n     **                                                                                                                // 577\n     * Generic animation of numbers                                                                                    // 578\n     **                                                                                                                // 579\n     - a (number) start _slave_ number                                                                                 // 580\n     - A (number) end _slave_ number                                                                                   // 581\n     - b (number) start _master_ number (start time in general case)                                                   // 582\n     - B (number) end _master_ number (end time in gereal case)                                                        // 583\n     - get (function) getter of _master_ number (see @mina.time)                                                       // 584\n     - set (function) setter of _slave_ number                                                                         // 585\n     - easing (function) #optional easing function, default is @mina.linear                                            // 586\n     = (object) animation descriptor                                                                                   // 587\n     o {                                                                                                               // 588\n     o         id (string) animation id,                                                                               // 589\n     o         start (number) start _slave_ number,                                                                    // 590\n     o         end (number) end _slave_ number,                                                                        // 591\n     o         b (number) start _master_ number,                                                                       // 592\n     o         s (number) animation status (0..1),                                                                     // 593\n     o         dur (number) animation duration,                                                                        // 594\n     o         spd (number) animation speed,                                                                           // 595\n     o         get (function) getter of _master_ number (see @mina.time),                                              // 596\n     o         set (function) setter of _slave_ number,                                                                // 597\n     o         easing (function) easing function, default is @mina.linear,                                             // 598\n     o         status (function) status getter/setter,                                                                 // 599\n     o         speed (function) speed getter/setter,                                                                   // 600\n     o         duration (function) duration getter/setter,                                                             // 601\n     o         stop (function) animation stopper                                                                       // 602\n     o         pause (function) pauses the animation                                                                   // 603\n     o         resume (function) resumes the animation                                                                 // 604\n     o         update (function) calles setter with the right value of the animation                                   // 605\n     o }                                                                                                               // 606\n    \\*/                                                                                                                // 607\n    mina = function (a, A, b, B, get, set, easing) {                                                                   // 608\n        var anim = {                                                                                                   // 609\n            id: ID(),                                                                                                  // 610\n            start: a,                                                                                                  // 611\n            end: A,                                                                                                    // 612\n            b: b,                                                                                                      // 613\n            s: 0,                                                                                                      // 614\n            dur: B - b,                                                                                                // 615\n            spd: 1,                                                                                                    // 616\n            get: get,                                                                                                  // 617\n            set: set,                                                                                                  // 618\n            easing: easing || mina.linear,                                                                             // 619\n            status: sta,                                                                                               // 620\n            speed: speed,                                                                                              // 621\n            duration: duration,                                                                                        // 622\n            stop: stopit,                                                                                              // 623\n            pause: pause,                                                                                              // 624\n            resume: resume,                                                                                            // 625\n            update: update                                                                                             // 626\n        };                                                                                                             // 627\n        animations[anim.id] = anim;                                                                                    // 628\n        var len = 0, i;                                                                                                // 629\n        for (i in animations) if (animations.hasOwnProperty(i)) {                                                      // 630\n            len++;                                                                                                     // 631\n            if (len == 2) {                                                                                            // 632\n                break;                                                                                                 // 633\n            }                                                                                                          // 634\n        }                                                                                                              // 635\n        len == 1 && requestAnimFrame(frame);                                                                           // 636\n        return anim;                                                                                                   // 637\n    };                                                                                                                 // 638\n    /*\\\n     * mina.time                                                                                                       // 640\n     [ method ]                                                                                                        // 641\n     **                                                                                                                // 642\n     * Returns the current time. Equivalent to:                                                                        // 643\n     | function () {                                                                                                   // 644\n     |     return (new Date).getTime();                                                                                // 645\n     | }                                                                                                               // 646\n    \\*/                                                                                                                // 647\n    mina.time = timer;                                                                                                 // 648\n    /*\\\n     * mina.getById                                                                                                    // 650\n     [ method ]                                                                                                        // 651\n     **                                                                                                                // 652\n     * Returns an animation by its id                                                                                  // 653\n     - id (string) animation's id                                                                                      // 654\n     = (object) See @mina                                                                                              // 655\n    \\*/                                                                                                                // 656\n    mina.getById = function (id) {                                                                                     // 657\n        return animations[id] || null;                                                                                 // 658\n    };                                                                                                                 // 659\n                                                                                                                       // 660\n    /*\\\n     * mina.linear                                                                                                     // 662\n     [ method ]                                                                                                        // 663\n     **                                                                                                                // 664\n     * Default linear easing                                                                                           // 665\n     - n (number) input 0..1                                                                                           // 666\n     = (number) output 0..1                                                                                            // 667\n    \\*/                                                                                                                // 668\n    mina.linear = function (n) {                                                                                       // 669\n        return n;                                                                                                      // 670\n    };                                                                                                                 // 671\n    /*\\\n     * mina.easeout                                                                                                    // 673\n     [ method ]                                                                                                        // 674\n     **                                                                                                                // 675\n     * Easeout easing                                                                                                  // 676\n     - n (number) input 0..1                                                                                           // 677\n     = (number) output 0..1                                                                                            // 678\n    \\*/                                                                                                                // 679\n    mina.easeout = function (n) {                                                                                      // 680\n        return Math.pow(n, 1.7);                                                                                       // 681\n    };                                                                                                                 // 682\n    /*\\\n     * mina.easein                                                                                                     // 684\n     [ method ]                                                                                                        // 685\n     **                                                                                                                // 686\n     * Easein easing                                                                                                   // 687\n     - n (number) input 0..1                                                                                           // 688\n     = (number) output 0..1                                                                                            // 689\n    \\*/                                                                                                                // 690\n    mina.easein = function (n) {                                                                                       // 691\n        return Math.pow(n, .48);                                                                                       // 692\n    };                                                                                                                 // 693\n    /*\\\n     * mina.easeinout                                                                                                  // 695\n     [ method ]                                                                                                        // 696\n     **                                                                                                                // 697\n     * Easeinout easing                                                                                                // 698\n     - n (number) input 0..1                                                                                           // 699\n     = (number) output 0..1                                                                                            // 700\n    \\*/                                                                                                                // 701\n    mina.easeinout = function (n) {                                                                                    // 702\n        if (n == 1) {                                                                                                  // 703\n            return 1;                                                                                                  // 704\n        }                                                                                                              // 705\n        if (n == 0) {                                                                                                  // 706\n            return 0;                                                                                                  // 707\n        }                                                                                                              // 708\n        var q = .48 - n / 1.04,                                                                                        // 709\n            Q = Math.sqrt(.1734 + q * q),                                                                              // 710\n            x = Q - q,                                                                                                 // 711\n            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),                                                       // 712\n            y = -Q - q,                                                                                                // 713\n            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),                                                       // 714\n            t = X + Y + .5;                                                                                            // 715\n        return (1 - t) * 3 * t * t + t * t * t;                                                                        // 716\n    };                                                                                                                 // 717\n    /*\\\n     * mina.backin                                                                                                     // 719\n     [ method ]                                                                                                        // 720\n     **                                                                                                                // 721\n     * Backin easing                                                                                                   // 722\n     - n (number) input 0..1                                                                                           // 723\n     = (number) output 0..1                                                                                            // 724\n    \\*/                                                                                                                // 725\n    mina.backin = function (n) {                                                                                       // 726\n        if (n == 1) {                                                                                                  // 727\n            return 1;                                                                                                  // 728\n        }                                                                                                              // 729\n        var s = 1.70158;                                                                                               // 730\n        return n * n * ((s + 1) * n - s);                                                                              // 731\n    };                                                                                                                 // 732\n    /*\\\n     * mina.backout                                                                                                    // 734\n     [ method ]                                                                                                        // 735\n     **                                                                                                                // 736\n     * Backout easing                                                                                                  // 737\n     - n (number) input 0..1                                                                                           // 738\n     = (number) output 0..1                                                                                            // 739\n    \\*/                                                                                                                // 740\n    mina.backout = function (n) {                                                                                      // 741\n        if (n == 0) {                                                                                                  // 742\n            return 0;                                                                                                  // 743\n        }                                                                                                              // 744\n        n = n - 1;                                                                                                     // 745\n        var s = 1.70158;                                                                                               // 746\n        return n * n * ((s + 1) * n + s) + 1;                                                                          // 747\n    };                                                                                                                 // 748\n    /*\\\n     * mina.elastic                                                                                                    // 750\n     [ method ]                                                                                                        // 751\n     **                                                                                                                // 752\n     * Elastic easing                                                                                                  // 753\n     - n (number) input 0..1                                                                                           // 754\n     = (number) output 0..1                                                                                            // 755\n    \\*/                                                                                                                // 756\n    mina.elastic = function (n) {                                                                                      // 757\n        if (n == !!n) {                                                                                                // 758\n            return n;                                                                                                  // 759\n        }                                                                                                              // 760\n        return Math.pow(2, -10 * n) * Math.sin((n - .075) *                                                            // 761\n            (2 * Math.PI) / .3) + 1;                                                                                   // 762\n    };                                                                                                                 // 763\n    /*\\\n     * mina.bounce                                                                                                     // 765\n     [ method ]                                                                                                        // 766\n     **                                                                                                                // 767\n     * Bounce easing                                                                                                   // 768\n     - n (number) input 0..1                                                                                           // 769\n     = (number) output 0..1                                                                                            // 770\n    \\*/                                                                                                                // 771\n    mina.bounce = function (n) {                                                                                       // 772\n        var s = 7.5625,                                                                                                // 773\n            p = 2.75,                                                                                                  // 774\n            l;                                                                                                         // 775\n        if (n < (1 / p)) {                                                                                             // 776\n            l = s * n * n;                                                                                             // 777\n        } else {                                                                                                       // 778\n            if (n < (2 / p)) {                                                                                         // 779\n                n -= (1.5 / p);                                                                                        // 780\n                l = s * n * n + .75;                                                                                   // 781\n            } else {                                                                                                   // 782\n                if (n < (2.5 / p)) {                                                                                   // 783\n                    n -= (2.25 / p);                                                                                   // 784\n                    l = s * n * n + .9375;                                                                             // 785\n                } else {                                                                                               // 786\n                    n -= (2.625 / p);                                                                                  // 787\n                    l = s * n * n + .984375;                                                                           // 788\n                }                                                                                                      // 789\n            }                                                                                                          // 790\n        }                                                                                                              // 791\n        return l;                                                                                                      // 792\n    };                                                                                                                 // 793\n    window.mina = mina;                                                                                                // 794\n    return mina;                                                                                                       // 795\n})(typeof eve == \"undefined\" ? function () {} : eve);                                                                  // 796\n// Copyright (c) 2013 - 2015 Adobe Systems Incorporated. All rights reserved.                                          // 797\n//                                                                                                                     // 798\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 799\n// you may not use this file except in compliance with the License.                                                    // 800\n// You may obtain a copy of the License at                                                                             // 801\n//                                                                                                                     // 802\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 803\n//                                                                                                                     // 804\n// Unless required by applicable law or agreed to in writing, software                                                 // 805\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 806\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 807\n// See the License for the specific language governing permissions and                                                 // 808\n// limitations under the License.                                                                                      // 809\n                                                                                                                       // 810\nvar Snap = (function(root) {                                                                                           // 811\nSnap.version = \"0.4.0\";                                                                                                // 812\n/*\\\n * Snap                                                                                                                // 814\n [ method ]                                                                                                            // 815\n **                                                                                                                    // 816\n * Creates a drawing surface or wraps existing SVG element.                                                            // 817\n **                                                                                                                    // 818\n - width (number|string) width of surface                                                                              // 819\n - height (number|string) height of surface                                                                            // 820\n * or                                                                                                                  // 821\n - DOM (SVGElement) element to be wrapped into Snap structure                                                          // 822\n * or                                                                                                                  // 823\n - array (array) array of elements (will return set of elements)                                                       // 824\n * or                                                                                                                  // 825\n - query (string) CSS query selector                                                                                   // 826\n = (object) @Element                                                                                                   // 827\n\\*/                                                                                                                    // 828\nfunction Snap(w, h) {                                                                                                  // 829\n    if (w) {                                                                                                           // 830\n        if (w.nodeType) {                                                                                              // 831\n            return wrap(w);                                                                                            // 832\n        }                                                                                                              // 833\n        if (is(w, \"array\") && Snap.set) {                                                                              // 834\n            return Snap.set.apply(Snap, w);                                                                            // 835\n        }                                                                                                              // 836\n        if (w instanceof Element) {                                                                                    // 837\n            return w;                                                                                                  // 838\n        }                                                                                                              // 839\n        if (h == null) {                                                                                               // 840\n            w = glob.doc.querySelector(String(w));                                                                     // 841\n            return wrap(w);                                                                                            // 842\n        }                                                                                                              // 843\n    }                                                                                                                  // 844\n    w = w == null ? \"100%\" : w;                                                                                        // 845\n    h = h == null ? \"100%\" : h;                                                                                        // 846\n    return new Paper(w, h);                                                                                            // 847\n}                                                                                                                      // 848\nSnap.toString = function () {                                                                                          // 849\n    return \"Snap v\" + this.version;                                                                                    // 850\n};                                                                                                                     // 851\nSnap._ = {};                                                                                                           // 852\nvar glob = {                                                                                                           // 853\n    win: root.window,                                                                                                  // 854\n    doc: root.window.document                                                                                          // 855\n};                                                                                                                     // 856\nSnap._.glob = glob;                                                                                                    // 857\nvar has = \"hasOwnProperty\",                                                                                            // 858\n    Str = String,                                                                                                      // 859\n    toFloat = parseFloat,                                                                                              // 860\n    toInt = parseInt,                                                                                                  // 861\n    math = Math,                                                                                                       // 862\n    mmax = math.max,                                                                                                   // 863\n    mmin = math.min,                                                                                                   // 864\n    abs = math.abs,                                                                                                    // 865\n    pow = math.pow,                                                                                                    // 866\n    PI = math.PI,                                                                                                      // 867\n    round = math.round,                                                                                                // 868\n    E = \"\",                                                                                                            // 869\n    S = \" \",                                                                                                           // 870\n    objectToString = Object.prototype.toString,                                                                        // 871\n    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,                                                                           // 872\n    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,                                               // 874\n    reURLValue = /^url\\(#?([^)]+)\\)$/,                                                                                 // 875\n    separator = Snap._.separator = /[,\\s]+/,                                                                           // 876\n    whitespace = /[\\s]/g,                                                                                              // 877\n    commaSpaces = /[\\s]*,[\\s]*/,                                                                                       // 878\n    hsrg = {hs: 1, rg: 1},                                                                                             // 879\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,                                        // 880\n    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,                                          // 881\n    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\\\d+)?)[\\s]*,?[\\s]*/ig,                                                        // 882\n    idgen = 0,                                                                                                         // 883\n    idprefix = \"S\" + (+new Date).toString(36),                                                                         // 884\n    ID = function (el) {                                                                                               // 885\n        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);                                      // 886\n    },                                                                                                                 // 887\n    xlink = \"http://www.w3.org/1999/xlink\",                                                                            // 888\n    xmlns = \"http://www.w3.org/2000/svg\",                                                                              // 889\n    hub = {},                                                                                                          // 890\n    URL = Snap.url = function (url) {                                                                                  // 891\n        return \"url('#\" + url + \"')\";                                                                                  // 892\n    };                                                                                                                 // 893\n                                                                                                                       // 894\nfunction $(el, attr) {                                                                                                 // 895\n    if (attr) {                                                                                                        // 896\n        if (el == \"#text\") {                                                                                           // 897\n            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");                                            // 898\n        }                                                                                                              // 899\n        if (el == \"#comment\") {                                                                                        // 900\n            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");                                             // 901\n        }                                                                                                              // 902\n        if (typeof el == \"string\") {                                                                                   // 903\n            el = $(el);                                                                                                // 904\n        }                                                                                                              // 905\n        if (typeof attr == \"string\") {                                                                                 // 906\n            if (el.nodeType == 1) {                                                                                    // 907\n                if (attr.substring(0, 6) == \"xlink:\") {                                                                // 908\n                    return el.getAttributeNS(xlink, attr.substring(6));                                                // 909\n                }                                                                                                      // 910\n                if (attr.substring(0, 4) == \"xml:\") {                                                                  // 911\n                    return el.getAttributeNS(xmlns, attr.substring(4));                                                // 912\n                }                                                                                                      // 913\n                return el.getAttribute(attr);                                                                          // 914\n            } else if (attr == \"text\") {                                                                               // 915\n                return el.nodeValue;                                                                                   // 916\n            } else {                                                                                                   // 917\n                return null;                                                                                           // 918\n            }                                                                                                          // 919\n        }                                                                                                              // 920\n        if (el.nodeType == 1) {                                                                                        // 921\n            for (var key in attr) if (attr[has](key)) {                                                                // 922\n                var val = Str(attr[key]);                                                                              // 923\n                if (val) {                                                                                             // 924\n                    if (key.substring(0, 6) == \"xlink:\") {                                                             // 925\n                        el.setAttributeNS(xlink, key.substring(6), val);                                               // 926\n                    } else if (key.substring(0, 4) == \"xml:\") {                                                        // 927\n                        el.setAttributeNS(xmlns, key.substring(4), val);                                               // 928\n                    } else {                                                                                           // 929\n                        el.setAttribute(key, val);                                                                     // 930\n                    }                                                                                                  // 931\n                } else {                                                                                               // 932\n                    el.removeAttribute(key);                                                                           // 933\n                }                                                                                                      // 934\n            }                                                                                                          // 935\n        } else if (\"text\" in attr) {                                                                                   // 936\n            el.nodeValue = attr.text;                                                                                  // 937\n        }                                                                                                              // 938\n    } else {                                                                                                           // 939\n        el = glob.doc.createElementNS(xmlns, el);                                                                      // 940\n    }                                                                                                                  // 941\n    return el;                                                                                                         // 942\n}                                                                                                                      // 943\nSnap._.$ = $;                                                                                                          // 944\nSnap._.id = ID;                                                                                                        // 945\nfunction getAttrs(el) {                                                                                                // 946\n    var attrs = el.attributes,                                                                                         // 947\n        name,                                                                                                          // 948\n        out = {};                                                                                                      // 949\n    for (var i = 0; i < attrs.length; i++) {                                                                           // 950\n        if (attrs[i].namespaceURI == xlink) {                                                                          // 951\n            name = \"xlink:\";                                                                                           // 952\n        } else {                                                                                                       // 953\n            name = \"\";                                                                                                 // 954\n        }                                                                                                              // 955\n        name += attrs[i].name;                                                                                         // 956\n        out[name] = attrs[i].textContent;                                                                              // 957\n    }                                                                                                                  // 958\n    return out;                                                                                                        // 959\n}                                                                                                                      // 960\nfunction is(o, type) {                                                                                                 // 961\n    type = Str.prototype.toLowerCase.call(type);                                                                       // 962\n    if (type == \"finite\") {                                                                                            // 963\n        return isFinite(o);                                                                                            // 964\n    }                                                                                                                  // 965\n    if (type == \"array\" &&                                                                                             // 966\n        (o instanceof Array || Array.isArray && Array.isArray(o))) {                                                   // 967\n        return true;                                                                                                   // 968\n    }                                                                                                                  // 969\n    return  (type == \"null\" && o === null) ||                                                                          // 970\n            (type == typeof o && o !== null) ||                                                                        // 971\n            (type == \"object\" && o === Object(o)) ||                                                                   // 972\n            objectToString.call(o).slice(8, -1).toLowerCase() == type;                                                 // 973\n}                                                                                                                      // 974\n/*\\\n * Snap.format                                                                                                         // 976\n [ method ]                                                                                                            // 977\n **                                                                                                                    // 978\n * Replaces construction of type `{<name>}` to the corresponding argument                                              // 979\n **                                                                                                                    // 980\n - token (string) string to format                                                                                     // 981\n - json (object) object which properties are used as a replacement                                                     // 982\n = (string) formatted string                                                                                           // 983\n > Usage                                                                                                               // 984\n | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"                                                 // 985\n | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {                              // 986\n |     x: 10,                                                                                                          // 987\n |     y: 20,                                                                                                          // 988\n |     dim: {                                                                                                          // 989\n |         width: 40,                                                                                                  // 990\n |         height: 50,                                                                                                 // 991\n |         \"negative width\": -40                                                                                       // 992\n |     }                                                                                                               // 993\n | }));                                                                                                                // 994\n\\*/                                                                                                                    // 995\nSnap.format = (function () {                                                                                           // 996\n    var tokenRegex = /\\{([^\\}]+)\\}/g,                                                                                  // 997\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n        replacer = function (all, key, obj) {                                                                          // 999\n            var res = obj;                                                                                             // 1000\n            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {                            // 1001\n                name = name || quotedName;                                                                             // 1002\n                if (res) {                                                                                             // 1003\n                    if (name in res) {                                                                                 // 1004\n                        res = res[name];                                                                               // 1005\n                    }                                                                                                  // 1006\n                    typeof res == \"function\" && isFunc && (res = res());                                               // 1007\n                }                                                                                                      // 1008\n            });                                                                                                        // 1009\n            res = (res == null || res == obj ? all : res) + \"\";                                                        // 1010\n            return res;                                                                                                // 1011\n        };                                                                                                             // 1012\n    return function (str, obj) {                                                                                       // 1013\n        return Str(str).replace(tokenRegex, function (all, key) {                                                      // 1014\n            return replacer(all, key, obj);                                                                            // 1015\n        });                                                                                                            // 1016\n    };                                                                                                                 // 1017\n})();                                                                                                                  // 1018\nfunction clone(obj) {                                                                                                  // 1019\n    if (typeof obj == \"function\" || Object(obj) !== obj) {                                                             // 1020\n        return obj;                                                                                                    // 1021\n    }                                                                                                                  // 1022\n    var res = new obj.constructor;                                                                                     // 1023\n    for (var key in obj) if (obj[has](key)) {                                                                          // 1024\n        res[key] = clone(obj[key]);                                                                                    // 1025\n    }                                                                                                                  // 1026\n    return res;                                                                                                        // 1027\n}                                                                                                                      // 1028\nSnap._.clone = clone;                                                                                                  // 1029\nfunction repush(array, item) {                                                                                         // 1030\n    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {                                           // 1031\n        return array.push(array.splice(i, 1)[0]);                                                                      // 1032\n    }                                                                                                                  // 1033\n}                                                                                                                      // 1034\nfunction cacher(f, scope, postprocessor) {                                                                             // 1035\n    function newf() {                                                                                                  // 1036\n        var arg = Array.prototype.slice.call(arguments, 0),                                                            // 1037\n            args = arg.join(\"\\u2400\"),                                                                                 // 1038\n            cache = newf.cache = newf.cache || {},                                                                     // 1039\n            count = newf.count = newf.count || [];                                                                     // 1040\n        if (cache[has](args)) {                                                                                        // 1041\n            repush(count, args);                                                                                       // 1042\n            return postprocessor ? postprocessor(cache[args]) : cache[args];                                           // 1043\n        }                                                                                                              // 1044\n        count.length >= 1e3 && delete cache[count.shift()];                                                            // 1045\n        count.push(args);                                                                                              // 1046\n        cache[args] = f.apply(scope, arg);                                                                             // 1047\n        return postprocessor ? postprocessor(cache[args]) : cache[args];                                               // 1048\n    }                                                                                                                  // 1049\n    return newf;                                                                                                       // 1050\n}                                                                                                                      // 1051\nSnap._.cacher = cacher;                                                                                                // 1052\nfunction angle(x1, y1, x2, y2, x3, y3) {                                                                               // 1053\n    if (x3 == null) {                                                                                                  // 1054\n        var x = x1 - x2,                                                                                               // 1055\n            y = y1 - y2;                                                                                               // 1056\n        if (!x && !y) {                                                                                                // 1057\n            return 0;                                                                                                  // 1058\n        }                                                                                                              // 1059\n        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;                                                      // 1060\n    } else {                                                                                                           // 1061\n        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);                                                          // 1062\n    }                                                                                                                  // 1063\n}                                                                                                                      // 1064\nfunction rad(deg) {                                                                                                    // 1065\n    return deg % 360 * PI / 180;                                                                                       // 1066\n}                                                                                                                      // 1067\nfunction deg(rad) {                                                                                                    // 1068\n    return rad * 180 / PI % 360;                                                                                       // 1069\n}                                                                                                                      // 1070\nfunction x_y() {                                                                                                       // 1071\n    return this.x + S + this.y;                                                                                        // 1072\n}                                                                                                                      // 1073\nfunction x_y_w_h() {                                                                                                   // 1074\n    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;                                              // 1075\n}                                                                                                                      // 1076\n                                                                                                                       // 1077\n/*\\\n * Snap.rad                                                                                                            // 1079\n [ method ]                                                                                                            // 1080\n **                                                                                                                    // 1081\n * Transform angle to radians                                                                                          // 1082\n - deg (number) angle in degrees                                                                                       // 1083\n = (number) angle in radians                                                                                           // 1084\n\\*/                                                                                                                    // 1085\nSnap.rad = rad;                                                                                                        // 1086\n/*\\\n * Snap.deg                                                                                                            // 1088\n [ method ]                                                                                                            // 1089\n **                                                                                                                    // 1090\n * Transform angle to degrees                                                                                          // 1091\n - rad (number) angle in radians                                                                                       // 1092\n = (number) angle in degrees                                                                                           // 1093\n\\*/                                                                                                                    // 1094\nSnap.deg = deg;                                                                                                        // 1095\n/*\\\n * Snap.sin                                                                                                            // 1097\n [ method ]                                                                                                            // 1098\n **                                                                                                                    // 1099\n * Equivalent to `Math.sin()` only works with degrees, not radians.                                                    // 1100\n - angle (number) angle in degrees                                                                                     // 1101\n = (number) sin                                                                                                        // 1102\n\\*/                                                                                                                    // 1103\nSnap.sin = function (angle) {                                                                                          // 1104\n    return math.sin(Snap.rad(angle));                                                                                  // 1105\n};                                                                                                                     // 1106\n/*\\\n * Snap.tan                                                                                                            // 1108\n [ method ]                                                                                                            // 1109\n **                                                                                                                    // 1110\n * Equivalent to `Math.tan()` only works with degrees, not radians.                                                    // 1111\n - angle (number) angle in degrees                                                                                     // 1112\n = (number) tan                                                                                                        // 1113\n\\*/                                                                                                                    // 1114\nSnap.tan = function (angle) {                                                                                          // 1115\n    return math.tan(Snap.rad(angle));                                                                                  // 1116\n};                                                                                                                     // 1117\n/*\\\n * Snap.cos                                                                                                            // 1119\n [ method ]                                                                                                            // 1120\n **                                                                                                                    // 1121\n * Equivalent to `Math.cos()` only works with degrees, not radians.                                                    // 1122\n - angle (number) angle in degrees                                                                                     // 1123\n = (number) cos                                                                                                        // 1124\n\\*/                                                                                                                    // 1125\nSnap.cos = function (angle) {                                                                                          // 1126\n    return math.cos(Snap.rad(angle));                                                                                  // 1127\n};                                                                                                                     // 1128\n/*\\\n * Snap.asin                                                                                                           // 1130\n [ method ]                                                                                                            // 1131\n **                                                                                                                    // 1132\n * Equivalent to `Math.asin()` only works with degrees, not radians.                                                   // 1133\n - num (number) value                                                                                                  // 1134\n = (number) asin in degrees                                                                                            // 1135\n\\*/                                                                                                                    // 1136\nSnap.asin = function (num) {                                                                                           // 1137\n    return Snap.deg(math.asin(num));                                                                                   // 1138\n};                                                                                                                     // 1139\n/*\\\n * Snap.acos                                                                                                           // 1141\n [ method ]                                                                                                            // 1142\n **                                                                                                                    // 1143\n * Equivalent to `Math.acos()` only works with degrees, not radians.                                                   // 1144\n - num (number) value                                                                                                  // 1145\n = (number) acos in degrees                                                                                            // 1146\n\\*/                                                                                                                    // 1147\nSnap.acos = function (num) {                                                                                           // 1148\n    return Snap.deg(math.acos(num));                                                                                   // 1149\n};                                                                                                                     // 1150\n/*\\\n * Snap.atan                                                                                                           // 1152\n [ method ]                                                                                                            // 1153\n **                                                                                                                    // 1154\n * Equivalent to `Math.atan()` only works with degrees, not radians.                                                   // 1155\n - num (number) value                                                                                                  // 1156\n = (number) atan in degrees                                                                                            // 1157\n\\*/                                                                                                                    // 1158\nSnap.atan = function (num) {                                                                                           // 1159\n    return Snap.deg(math.atan(num));                                                                                   // 1160\n};                                                                                                                     // 1161\n/*\\\n * Snap.atan2                                                                                                          // 1163\n [ method ]                                                                                                            // 1164\n **                                                                                                                    // 1165\n * Equivalent to `Math.atan2()` only works with degrees, not radians.                                                  // 1166\n - num (number) value                                                                                                  // 1167\n = (number) atan2 in degrees                                                                                           // 1168\n\\*/                                                                                                                    // 1169\nSnap.atan2 = function (num) {                                                                                          // 1170\n    return Snap.deg(math.atan2(num));                                                                                  // 1171\n};                                                                                                                     // 1172\n/*\\\n * Snap.angle                                                                                                          // 1174\n [ method ]                                                                                                            // 1175\n **                                                                                                                    // 1176\n * Returns an angle between two or three points                                                                        // 1177\n > Parameters                                                                                                          // 1178\n - x1 (number) x coord of first point                                                                                  // 1179\n - y1 (number) y coord of first point                                                                                  // 1180\n - x2 (number) x coord of second point                                                                                 // 1181\n - y2 (number) y coord of second point                                                                                 // 1182\n - x3 (number) #optional x coord of third point                                                                        // 1183\n - y3 (number) #optional y coord of third point                                                                        // 1184\n = (number) angle in degrees                                                                                           // 1185\n\\*/                                                                                                                    // 1186\nSnap.angle = angle;                                                                                                    // 1187\n/*\\\n * Snap.len                                                                                                            // 1189\n [ method ]                                                                                                            // 1190\n **                                                                                                                    // 1191\n * Returns distance between two points                                                                                 // 1192\n > Parameters                                                                                                          // 1193\n - x1 (number) x coord of first point                                                                                  // 1194\n - y1 (number) y coord of first point                                                                                  // 1195\n - x2 (number) x coord of second point                                                                                 // 1196\n - y2 (number) y coord of second point                                                                                 // 1197\n = (number) distance                                                                                                   // 1198\n\\*/                                                                                                                    // 1199\nSnap.len = function (x1, y1, x2, y2) {                                                                                 // 1200\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));                                                                       // 1201\n};                                                                                                                     // 1202\n/*\\\n * Snap.len2                                                                                                           // 1204\n [ method ]                                                                                                            // 1205\n **                                                                                                                    // 1206\n * Returns squared distance between two points                                                                         // 1207\n > Parameters                                                                                                          // 1208\n - x1 (number) x coord of first point                                                                                  // 1209\n - y1 (number) y coord of first point                                                                                  // 1210\n - x2 (number) x coord of second point                                                                                 // 1211\n - y2 (number) y coord of second point                                                                                 // 1212\n = (number) distance                                                                                                   // 1213\n\\*/                                                                                                                    // 1214\nSnap.len2 = function (x1, y1, x2, y2) {                                                                                // 1215\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);                                                              // 1216\n};                                                                                                                     // 1217\n/*\\\n * Snap.closestPoint                                                                                                   // 1219\n [ method ]                                                                                                            // 1220\n **                                                                                                                    // 1221\n * Returns closest point to a given one on a given path.                                                               // 1222\n > Parameters                                                                                                          // 1223\n - path (Element) path element                                                                                         // 1224\n - x (number) x coord of a point                                                                                       // 1225\n - y (number) y coord of a point                                                                                       // 1226\n = (object) in format                                                                                                  // 1227\n {                                                                                                                     // 1228\n    x (number) x coord of the point on the path                                                                        // 1229\n    y (number) y coord of the point on the path                                                                        // 1230\n    length (number) length of the path to the point                                                                    // 1231\n    distance (number) distance from the given point to the path                                                        // 1232\n }                                                                                                                     // 1233\n\\*/                                                                                                                    // 1234\n// Copied from http://bl.ocks.org/mbostock/8027637                                                                     // 1235\nSnap.closestPoint = function (path, x, y) {                                                                            // 1236\n    function distance2(p) {                                                                                            // 1237\n        var dx = p.x - x,                                                                                              // 1238\n            dy = p.y - y;                                                                                              // 1239\n        return dx * dx + dy * dy;                                                                                      // 1240\n    }                                                                                                                  // 1241\n    var pathNode = path.node,                                                                                          // 1242\n        pathLength = pathNode.getTotalLength(),                                                                        // 1243\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,                                            // 1244\n        best,                                                                                                          // 1245\n        bestLength,                                                                                                    // 1246\n        bestDistance = Infinity;                                                                                       // 1247\n                                                                                                                       // 1248\n    // linear scan for coarse approximation                                                                            // 1249\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {                  // 1250\n        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {                 // 1251\n            best = scan, bestLength = scanLength, bestDistance = scanDistance;                                         // 1252\n        }                                                                                                              // 1253\n    }                                                                                                                  // 1254\n                                                                                                                       // 1255\n    // binary search for precise estimate                                                                              // 1256\n    precision *= .5;                                                                                                   // 1257\n    while (precision > .5) {                                                                                           // 1258\n        var before,                                                                                                    // 1259\n            after,                                                                                                     // 1260\n            beforeLength,                                                                                              // 1261\n            afterLength,                                                                                               // 1262\n            beforeDistance,                                                                                            // 1263\n            afterDistance;                                                                                             // 1264\n        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n            best = before, bestLength = beforeLength, bestDistance = beforeDistance;                                   // 1266\n        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n            best = after, bestLength = afterLength, bestDistance = afterDistance;                                      // 1268\n        } else {                                                                                                       // 1269\n            precision *= .5;                                                                                           // 1270\n        }                                                                                                              // 1271\n    }                                                                                                                  // 1272\n                                                                                                                       // 1273\n    best = {                                                                                                           // 1274\n        x: best.x,                                                                                                     // 1275\n        y: best.y,                                                                                                     // 1276\n        length: bestLength,                                                                                            // 1277\n        distance: Math.sqrt(bestDistance)                                                                              // 1278\n    };                                                                                                                 // 1279\n    return best;                                                                                                       // 1280\n}                                                                                                                      // 1281\n/*\\\n * Snap.is                                                                                                             // 1283\n [ method ]                                                                                                            // 1284\n **                                                                                                                    // 1285\n * Handy replacement for the `typeof` operator                                                                         // 1286\n - o (…) any object or primitive                                                                                       // 1287\n - type (string) name of the type, e.g., `string`, `function`, `number`, etc.                                          // 1288\n = (boolean) `true` if given value is of given type                                                                    // 1289\n\\*/                                                                                                                    // 1290\nSnap.is = is;                                                                                                          // 1291\n/*\\\n * Snap.snapTo                                                                                                         // 1293\n [ method ]                                                                                                            // 1294\n **                                                                                                                    // 1295\n * Snaps given value to given grid                                                                                     // 1296\n - values (array|number) given array of values or step of the grid                                                     // 1297\n - value (number) value to adjust                                                                                      // 1298\n - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.     // 1299\n = (number) adjusted value                                                                                             // 1300\n\\*/                                                                                                                    // 1301\nSnap.snapTo = function (values, value, tolerance) {                                                                    // 1302\n    tolerance = is(tolerance, \"finite\") ? tolerance : 10;                                                              // 1303\n    if (is(values, \"array\")) {                                                                                         // 1304\n        var i = values.length;                                                                                         // 1305\n        while (i--) if (abs(values[i] - value) <= tolerance) {                                                         // 1306\n            return values[i];                                                                                          // 1307\n        }                                                                                                              // 1308\n    } else {                                                                                                           // 1309\n        values = +values;                                                                                              // 1310\n        var rem = value % values;                                                                                      // 1311\n        if (rem < tolerance) {                                                                                         // 1312\n            return value - rem;                                                                                        // 1313\n        }                                                                                                              // 1314\n        if (rem > values - tolerance) {                                                                                // 1315\n            return value - rem + values;                                                                               // 1316\n        }                                                                                                              // 1317\n    }                                                                                                                  // 1318\n    return value;                                                                                                      // 1319\n};                                                                                                                     // 1320\n// Colour                                                                                                              // 1321\n/*\\\n * Snap.getRGB                                                                                                         // 1323\n [ method ]                                                                                                            // 1324\n **                                                                                                                    // 1325\n * Parses color string as RGB object                                                                                   // 1326\n - color (string) color string in one of the following formats:                                                        // 1327\n # <ul>                                                                                                                // 1328\n #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>                    // 1329\n #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>                              // 1330\n #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>                         // 1331\n #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>    // 1332\n #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>                                                           // 1333\n #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>          // 1334\n #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>                                                       // 1335\n #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li> // 1336\n #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>                                                           // 1337\n #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>                                                        // 1338\n #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>                                                       // 1339\n #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>                                                           // 1341\n #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>                                                        // 1342\n #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>                                                       // 1343\n # </ul>                                                                                                               // 1344\n * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.                                                           // 1345\n = (object) RGB object in the following format:                                                                        // 1346\n o {                                                                                                                   // 1347\n o     r (number) red,                                                                                                 // 1348\n o     g (number) green,                                                                                               // 1349\n o     b (number) blue,                                                                                                // 1350\n o     hex (string) color in HTML/CSS format: #••••••,                                                                 // 1351\n o     error (boolean) true if string can't be parsed                                                                  // 1352\n o }                                                                                                                   // 1353\n\\*/                                                                                                                    // 1354\nSnap.getRGB = cacher(function (colour) {                                                                               // 1355\n    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {                                                      // 1356\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};                                    // 1357\n    }                                                                                                                  // 1358\n    if (colour == \"none\") {                                                                                            // 1359\n        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};                                              // 1360\n    }                                                                                                                  // 1361\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));          // 1362\n    if (!colour) {                                                                                                     // 1363\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};                                    // 1364\n    }                                                                                                                  // 1365\n    var res,                                                                                                           // 1366\n        red,                                                                                                           // 1367\n        green,                                                                                                         // 1368\n        blue,                                                                                                          // 1369\n        opacity,                                                                                                       // 1370\n        t,                                                                                                             // 1371\n        values,                                                                                                        // 1372\n        rgb = colour.match(colourRegExp);                                                                              // 1373\n    if (rgb) {                                                                                                         // 1374\n        if (rgb[2]) {                                                                                                  // 1375\n            blue = toInt(rgb[2].substring(5), 16);                                                                     // 1376\n            green = toInt(rgb[2].substring(3, 5), 16);                                                                 // 1377\n            red = toInt(rgb[2].substring(1, 3), 16);                                                                   // 1378\n        }                                                                                                              // 1379\n        if (rgb[3]) {                                                                                                  // 1380\n            blue = toInt((t = rgb[3].charAt(3)) + t, 16);                                                              // 1381\n            green = toInt((t = rgb[3].charAt(2)) + t, 16);                                                             // 1382\n            red = toInt((t = rgb[3].charAt(1)) + t, 16);                                                               // 1383\n        }                                                                                                              // 1384\n        if (rgb[4]) {                                                                                                  // 1385\n            values = rgb[4].split(commaSpaces);                                                                        // 1386\n            red = toFloat(values[0]);                                                                                  // 1387\n            values[0].slice(-1) == \"%\" && (red *= 2.55);                                                               // 1388\n            green = toFloat(values[1]);                                                                                // 1389\n            values[1].slice(-1) == \"%\" && (green *= 2.55);                                                             // 1390\n            blue = toFloat(values[2]);                                                                                 // 1391\n            values[2].slice(-1) == \"%\" && (blue *= 2.55);                                                              // 1392\n            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));                              // 1393\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);                                               // 1394\n        }                                                                                                              // 1395\n        if (rgb[5]) {                                                                                                  // 1396\n            values = rgb[5].split(commaSpaces);                                                                        // 1397\n            red = toFloat(values[0]);                                                                                  // 1398\n            values[0].slice(-1) == \"%\" && (red /= 100);                                                                // 1399\n            green = toFloat(values[1]);                                                                                // 1400\n            values[1].slice(-1) == \"%\" && (green /= 100);                                                              // 1401\n            blue = toFloat(values[2]);                                                                                 // 1402\n            values[2].slice(-1) == \"%\" && (blue /= 100);                                                               // 1403\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);                           // 1404\n            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));                              // 1405\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);                                               // 1406\n            return Snap.hsb2rgb(red, green, blue, opacity);                                                            // 1407\n        }                                                                                                              // 1408\n        if (rgb[6]) {                                                                                                  // 1409\n            values = rgb[6].split(commaSpaces);                                                                        // 1410\n            red = toFloat(values[0]);                                                                                  // 1411\n            values[0].slice(-1) == \"%\" && (red /= 100);                                                                // 1412\n            green = toFloat(values[1]);                                                                                // 1413\n            values[1].slice(-1) == \"%\" && (green /= 100);                                                              // 1414\n            blue = toFloat(values[2]);                                                                                 // 1415\n            values[2].slice(-1) == \"%\" && (blue /= 100);                                                               // 1416\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);                           // 1417\n            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));                              // 1418\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);                                               // 1419\n            return Snap.hsl2rgb(red, green, blue, opacity);                                                            // 1420\n        }                                                                                                              // 1421\n        red = mmin(math.round(red), 255);                                                                              // 1422\n        green = mmin(math.round(green), 255);                                                                          // 1423\n        blue = mmin(math.round(blue), 255);                                                                            // 1424\n        opacity = mmin(mmax(opacity, 0), 1);                                                                           // 1425\n        rgb = {r: red, g: green, b: blue, toString: rgbtoString};                                                      // 1426\n        rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);                          // 1427\n        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;                                                             // 1428\n        return rgb;                                                                                                    // 1429\n    }                                                                                                                  // 1430\n    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};                                        // 1431\n}, Snap);                                                                                                              // 1432\n/*\\\n * Snap.hsb                                                                                                            // 1434\n [ method ]                                                                                                            // 1435\n **                                                                                                                    // 1436\n * Converts HSB values to a hex representation of the color                                                            // 1437\n - h (number) hue                                                                                                      // 1438\n - s (number) saturation                                                                                               // 1439\n - b (number) value or brightness                                                                                      // 1440\n = (string) hex representation of the color                                                                            // 1441\n\\*/                                                                                                                    // 1442\nSnap.hsb = cacher(function (h, s, b) {                                                                                 // 1443\n    return Snap.hsb2rgb(h, s, b).hex;                                                                                  // 1444\n});                                                                                                                    // 1445\n/*\\\n * Snap.hsl                                                                                                            // 1447\n [ method ]                                                                                                            // 1448\n **                                                                                                                    // 1449\n * Converts HSL values to a hex representation of the color                                                            // 1450\n - h (number) hue                                                                                                      // 1451\n - s (number) saturation                                                                                               // 1452\n - l (number) luminosity                                                                                               // 1453\n = (string) hex representation of the color                                                                            // 1454\n\\*/                                                                                                                    // 1455\nSnap.hsl = cacher(function (h, s, l) {                                                                                 // 1456\n    return Snap.hsl2rgb(h, s, l).hex;                                                                                  // 1457\n});                                                                                                                    // 1458\n/*\\\n * Snap.rgb                                                                                                            // 1460\n [ method ]                                                                                                            // 1461\n **                                                                                                                    // 1462\n * Converts RGB values to a hex representation of the color                                                            // 1463\n - r (number) red                                                                                                      // 1464\n - g (number) green                                                                                                    // 1465\n - b (number) blue                                                                                                     // 1466\n = (string) hex representation of the color                                                                            // 1467\n\\*/                                                                                                                    // 1468\nSnap.rgb = cacher(function (r, g, b, o) {                                                                              // 1469\n    if (is(o, \"finite\")) {                                                                                             // 1470\n        var round = math.round;                                                                                        // 1471\n        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";                                          // 1472\n    }                                                                                                                  // 1473\n    return \"#\" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);                                          // 1474\n});                                                                                                                    // 1475\nvar toHex = function (color) {                                                                                         // 1476\n    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],                       // 1477\n        red = \"rgb(255, 0, 0)\";                                                                                        // 1478\n    toHex = cacher(function (color) {                                                                                  // 1479\n        if (color.toLowerCase() == \"red\") {                                                                            // 1480\n            return red;                                                                                                // 1481\n        }                                                                                                              // 1482\n        i.style.color = red;                                                                                           // 1483\n        i.style.color = color;                                                                                         // 1484\n        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");                               // 1485\n        return out == red ? null : out;                                                                                // 1486\n    });                                                                                                                // 1487\n    return toHex(color);                                                                                               // 1488\n},                                                                                                                     // 1489\nhsbtoString = function () {                                                                                            // 1490\n    return \"hsb(\" + [this.h, this.s, this.b] + \")\";                                                                    // 1491\n},                                                                                                                     // 1492\nhsltoString = function () {                                                                                            // 1493\n    return \"hsl(\" + [this.h, this.s, this.l] + \")\";                                                                    // 1494\n},                                                                                                                     // 1495\nrgbtoString = function () {                                                                                            // 1496\n    return this.opacity == 1 || this.opacity == null ?                                                                 // 1497\n            this.hex :                                                                                                 // 1498\n            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";                                                    // 1499\n},                                                                                                                     // 1500\nprepareRGB = function (r, g, b) {                                                                                      // 1501\n    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {                                            // 1502\n        b = r.b;                                                                                                       // 1503\n        g = r.g;                                                                                                       // 1504\n        r = r.r;                                                                                                       // 1505\n    }                                                                                                                  // 1506\n    if (g == null && is(r, string)) {                                                                                  // 1507\n        var clr = Snap.getRGB(r);                                                                                      // 1508\n        r = clr.r;                                                                                                     // 1509\n        g = clr.g;                                                                                                     // 1510\n        b = clr.b;                                                                                                     // 1511\n    }                                                                                                                  // 1512\n    if (r > 1 || g > 1 || b > 1) {                                                                                     // 1513\n        r /= 255;                                                                                                      // 1514\n        g /= 255;                                                                                                      // 1515\n        b /= 255;                                                                                                      // 1516\n    }                                                                                                                  // 1517\n                                                                                                                       // 1518\n    return [r, g, b];                                                                                                  // 1519\n},                                                                                                                     // 1520\npackageRGB = function (r, g, b, o) {                                                                                   // 1521\n    r = math.round(r * 255);                                                                                           // 1522\n    g = math.round(g * 255);                                                                                           // 1523\n    b = math.round(b * 255);                                                                                           // 1524\n    var rgb = {                                                                                                        // 1525\n        r: r,                                                                                                          // 1526\n        g: g,                                                                                                          // 1527\n        b: b,                                                                                                          // 1528\n        opacity: is(o, \"finite\") ? o : 1,                                                                              // 1529\n        hex: Snap.rgb(r, g, b),                                                                                        // 1530\n        toString: rgbtoString                                                                                          // 1531\n    };                                                                                                                 // 1532\n    is(o, \"finite\") && (rgb.opacity = o);                                                                              // 1533\n    return rgb;                                                                                                        // 1534\n};                                                                                                                     // 1535\n/*\\\n * Snap.color                                                                                                          // 1537\n [ method ]                                                                                                            // 1538\n **                                                                                                                    // 1539\n * Parses the color string and returns an object featuring the color's component values                                // 1540\n - clr (string) color string in one of the supported formats (see @Snap.getRGB)                                        // 1541\n = (object) Combined RGB/HSB object in the following format:                                                           // 1542\n o {                                                                                                                   // 1543\n o     r (number) red,                                                                                                 // 1544\n o     g (number) green,                                                                                               // 1545\n o     b (number) blue,                                                                                                // 1546\n o     hex (string) color in HTML/CSS format: #••••••,                                                                 // 1547\n o     error (boolean) `true` if string can't be parsed,                                                               // 1548\n o     h (number) hue,                                                                                                 // 1549\n o     s (number) saturation,                                                                                          // 1550\n o     v (number) value (brightness),                                                                                  // 1551\n o     l (number) lightness                                                                                            // 1552\n o }                                                                                                                   // 1553\n\\*/                                                                                                                    // 1554\nSnap.color = function (clr) {                                                                                          // 1555\n    var rgb;                                                                                                           // 1556\n    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {                                                 // 1557\n        rgb = Snap.hsb2rgb(clr);                                                                                       // 1558\n        clr.r = rgb.r;                                                                                                 // 1559\n        clr.g = rgb.g;                                                                                                 // 1560\n        clr.b = rgb.b;                                                                                                 // 1561\n        clr.opacity = 1;                                                                                               // 1562\n        clr.hex = rgb.hex;                                                                                             // 1563\n    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {                                          // 1564\n        rgb = Snap.hsl2rgb(clr);                                                                                       // 1565\n        clr.r = rgb.r;                                                                                                 // 1566\n        clr.g = rgb.g;                                                                                                 // 1567\n        clr.b = rgb.b;                                                                                                 // 1568\n        clr.opacity = 1;                                                                                               // 1569\n        clr.hex = rgb.hex;                                                                                             // 1570\n    } else {                                                                                                           // 1571\n        if (is(clr, \"string\")) {                                                                                       // 1572\n            clr = Snap.getRGB(clr);                                                                                    // 1573\n        }                                                                                                              // 1574\n        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {                        // 1575\n            rgb = Snap.rgb2hsl(clr);                                                                                   // 1576\n            clr.h = rgb.h;                                                                                             // 1577\n            clr.s = rgb.s;                                                                                             // 1578\n            clr.l = rgb.l;                                                                                             // 1579\n            rgb = Snap.rgb2hsb(clr);                                                                                   // 1580\n            clr.v = rgb.b;                                                                                             // 1581\n        } else {                                                                                                       // 1582\n            clr = {hex: \"none\"};                                                                                       // 1583\n            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;                                                // 1584\n            clr.error = 1;                                                                                             // 1585\n        }                                                                                                              // 1586\n    }                                                                                                                  // 1587\n    clr.toString = rgbtoString;                                                                                        // 1588\n    return clr;                                                                                                        // 1589\n};                                                                                                                     // 1590\n/*\\\n * Snap.hsb2rgb                                                                                                        // 1592\n [ method ]                                                                                                            // 1593\n **                                                                                                                    // 1594\n * Converts HSB values to an RGB object                                                                                // 1595\n - h (number) hue                                                                                                      // 1596\n - s (number) saturation                                                                                               // 1597\n - v (number) value or brightness                                                                                      // 1598\n = (object) RGB object in the following format:                                                                        // 1599\n o {                                                                                                                   // 1600\n o     r (number) red,                                                                                                 // 1601\n o     g (number) green,                                                                                               // 1602\n o     b (number) blue,                                                                                                // 1603\n o     hex (string) color in HTML/CSS format: #••••••                                                                  // 1604\n o }                                                                                                                   // 1605\n\\*/                                                                                                                    // 1606\nSnap.hsb2rgb = function (h, s, v, o) {                                                                                 // 1607\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {                                                         // 1608\n        v = h.b;                                                                                                       // 1609\n        s = h.s;                                                                                                       // 1610\n        o = h.o;                                                                                                       // 1611\n        h = h.h;                                                                                                       // 1612\n    }                                                                                                                  // 1613\n    h *= 360;                                                                                                          // 1614\n    var R, G, B, X, C;                                                                                                 // 1615\n    h = (h % 360) / 60;                                                                                                // 1616\n    C = v * s;                                                                                                         // 1617\n    X = C * (1 - abs(h % 2 - 1));                                                                                      // 1618\n    R = G = B = v - C;                                                                                                 // 1619\n                                                                                                                       // 1620\n    h = ~~h;                                                                                                           // 1621\n    R += [C, X, 0, 0, X, C][h];                                                                                        // 1622\n    G += [X, C, C, X, 0, 0][h];                                                                                        // 1623\n    B += [0, 0, X, C, C, X][h];                                                                                        // 1624\n    return packageRGB(R, G, B, o);                                                                                     // 1625\n};                                                                                                                     // 1626\n/*\\\n * Snap.hsl2rgb                                                                                                        // 1628\n [ method ]                                                                                                            // 1629\n **                                                                                                                    // 1630\n * Converts HSL values to an RGB object                                                                                // 1631\n - h (number) hue                                                                                                      // 1632\n - s (number) saturation                                                                                               // 1633\n - l (number) luminosity                                                                                               // 1634\n = (object) RGB object in the following format:                                                                        // 1635\n o {                                                                                                                   // 1636\n o     r (number) red,                                                                                                 // 1637\n o     g (number) green,                                                                                               // 1638\n o     b (number) blue,                                                                                                // 1639\n o     hex (string) color in HTML/CSS format: #••••••                                                                  // 1640\n o }                                                                                                                   // 1641\n\\*/                                                                                                                    // 1642\nSnap.hsl2rgb = function (h, s, l, o) {                                                                                 // 1643\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {                                                         // 1644\n        l = h.l;                                                                                                       // 1645\n        s = h.s;                                                                                                       // 1646\n        h = h.h;                                                                                                       // 1647\n    }                                                                                                                  // 1648\n    if (h > 1 || s > 1 || l > 1) {                                                                                     // 1649\n        h /= 360;                                                                                                      // 1650\n        s /= 100;                                                                                                      // 1651\n        l /= 100;                                                                                                      // 1652\n    }                                                                                                                  // 1653\n    h *= 360;                                                                                                          // 1654\n    var R, G, B, X, C;                                                                                                 // 1655\n    h = (h % 360) / 60;                                                                                                // 1656\n    C = 2 * s * (l < .5 ? l : 1 - l);                                                                                  // 1657\n    X = C * (1 - abs(h % 2 - 1));                                                                                      // 1658\n    R = G = B = l - C / 2;                                                                                             // 1659\n                                                                                                                       // 1660\n    h = ~~h;                                                                                                           // 1661\n    R += [C, X, 0, 0, X, C][h];                                                                                        // 1662\n    G += [X, C, C, X, 0, 0][h];                                                                                        // 1663\n    B += [0, 0, X, C, C, X][h];                                                                                        // 1664\n    return packageRGB(R, G, B, o);                                                                                     // 1665\n};                                                                                                                     // 1666\n/*\\\n * Snap.rgb2hsb                                                                                                        // 1668\n [ method ]                                                                                                            // 1669\n **                                                                                                                    // 1670\n * Converts RGB values to an HSB object                                                                                // 1671\n - r (number) red                                                                                                      // 1672\n - g (number) green                                                                                                    // 1673\n - b (number) blue                                                                                                     // 1674\n = (object) HSB object in the following format:                                                                        // 1675\n o {                                                                                                                   // 1676\n o     h (number) hue,                                                                                                 // 1677\n o     s (number) saturation,                                                                                          // 1678\n o     b (number) brightness                                                                                           // 1679\n o }                                                                                                                   // 1680\n\\*/                                                                                                                    // 1681\nSnap.rgb2hsb = function (r, g, b) {                                                                                    // 1682\n    b = prepareRGB(r, g, b);                                                                                           // 1683\n    r = b[0];                                                                                                          // 1684\n    g = b[1];                                                                                                          // 1685\n    b = b[2];                                                                                                          // 1686\n                                                                                                                       // 1687\n    var H, S, V, C;                                                                                                    // 1688\n    V = mmax(r, g, b);                                                                                                 // 1689\n    C = V - mmin(r, g, b);                                                                                             // 1690\n    H = (C == 0 ? null :                                                                                               // 1691\n         V == r ? (g - b) / C :                                                                                        // 1692\n         V == g ? (b - r) / C + 2 :                                                                                    // 1693\n                  (r - g) / C + 4                                                                                      // 1694\n        );                                                                                                             // 1695\n    H = ((H + 360) % 6) * 60 / 360;                                                                                    // 1696\n    S = C == 0 ? 0 : C / V;                                                                                            // 1697\n    return {h: H, s: S, b: V, toString: hsbtoString};                                                                  // 1698\n};                                                                                                                     // 1699\n/*\\\n * Snap.rgb2hsl                                                                                                        // 1701\n [ method ]                                                                                                            // 1702\n **                                                                                                                    // 1703\n * Converts RGB values to an HSL object                                                                                // 1704\n - r (number) red                                                                                                      // 1705\n - g (number) green                                                                                                    // 1706\n - b (number) blue                                                                                                     // 1707\n = (object) HSL object in the following format:                                                                        // 1708\n o {                                                                                                                   // 1709\n o     h (number) hue,                                                                                                 // 1710\n o     s (number) saturation,                                                                                          // 1711\n o     l (number) luminosity                                                                                           // 1712\n o }                                                                                                                   // 1713\n\\*/                                                                                                                    // 1714\nSnap.rgb2hsl = function (r, g, b) {                                                                                    // 1715\n    b = prepareRGB(r, g, b);                                                                                           // 1716\n    r = b[0];                                                                                                          // 1717\n    g = b[1];                                                                                                          // 1718\n    b = b[2];                                                                                                          // 1719\n                                                                                                                       // 1720\n    var H, S, L, M, m, C;                                                                                              // 1721\n    M = mmax(r, g, b);                                                                                                 // 1722\n    m = mmin(r, g, b);                                                                                                 // 1723\n    C = M - m;                                                                                                         // 1724\n    H = (C == 0 ? null :                                                                                               // 1725\n         M == r ? (g - b) / C :                                                                                        // 1726\n         M == g ? (b - r) / C + 2 :                                                                                    // 1727\n                  (r - g) / C + 4);                                                                                    // 1728\n    H = ((H + 360) % 6) * 60 / 360;                                                                                    // 1729\n    L = (M + m) / 2;                                                                                                   // 1730\n    S = (C == 0 ? 0 :                                                                                                  // 1731\n         L < .5 ? C / (2 * L) :                                                                                        // 1732\n                  C / (2 - 2 * L));                                                                                    // 1733\n    return {h: H, s: S, l: L, toString: hsltoString};                                                                  // 1734\n};                                                                                                                     // 1735\n                                                                                                                       // 1736\n// Transformations                                                                                                     // 1737\n/*\\\n * Snap.parsePathString                                                                                                // 1739\n [ method ]                                                                                                            // 1740\n **                                                                                                                    // 1741\n * Utility method                                                                                                      // 1742\n **                                                                                                                    // 1743\n * Parses given path string into an array of arrays of path segments                                                   // 1744\n - pathString (string|array) path string or array of segments (in the last case it is returned straight away)          // 1745\n = (array) array of segments                                                                                           // 1746\n\\*/                                                                                                                    // 1747\nSnap.parsePathString = function (pathString) {                                                                         // 1748\n    if (!pathString) {                                                                                                 // 1749\n        return null;                                                                                                   // 1750\n    }                                                                                                                  // 1751\n    var pth = Snap.path(pathString);                                                                                   // 1752\n    if (pth.arr) {                                                                                                     // 1753\n        return Snap.path.clone(pth.arr);                                                                               // 1754\n    }                                                                                                                  // 1755\n                                                                                                                       // 1756\n    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},                  // 1757\n        data = [];                                                                                                     // 1758\n    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption                                   // 1759\n        data = Snap.path.clone(pathString);                                                                            // 1760\n    }                                                                                                                  // 1761\n    if (!data.length) {                                                                                                // 1762\n        Str(pathString).replace(pathCommand, function (a, b, c) {                                                      // 1763\n            var params = [],                                                                                           // 1764\n                name = b.toLowerCase();                                                                                // 1765\n            c.replace(pathValues, function (a, b) {                                                                    // 1766\n                b && params.push(+b);                                                                                  // 1767\n            });                                                                                                        // 1768\n            if (name == \"m\" && params.length > 2) {                                                                    // 1769\n                data.push([b].concat(params.splice(0, 2)));                                                            // 1770\n                name = \"l\";                                                                                            // 1771\n                b = b == \"m\" ? \"l\" : \"L\";                                                                              // 1772\n            }                                                                                                          // 1773\n            if (name == \"o\" && params.length == 1) {                                                                   // 1774\n                data.push([b, params[0]]);                                                                             // 1775\n            }                                                                                                          // 1776\n            if (name == \"r\") {                                                                                         // 1777\n                data.push([b].concat(params));                                                                         // 1778\n            } else while (params.length >= paramCounts[name]) {                                                        // 1779\n                data.push([b].concat(params.splice(0, paramCounts[name])));                                            // 1780\n                if (!paramCounts[name]) {                                                                              // 1781\n                    break;                                                                                             // 1782\n                }                                                                                                      // 1783\n            }                                                                                                          // 1784\n        });                                                                                                            // 1785\n    }                                                                                                                  // 1786\n    data.toString = Snap.path.toString;                                                                                // 1787\n    pth.arr = Snap.path.clone(data);                                                                                   // 1788\n    return data;                                                                                                       // 1789\n};                                                                                                                     // 1790\n/*\\\n * Snap.parseTransformString                                                                                           // 1792\n [ method ]                                                                                                            // 1793\n **                                                                                                                    // 1794\n * Utility method                                                                                                      // 1795\n **                                                                                                                    // 1796\n * Parses given transform string into an array of transformations                                                      // 1797\n - TString (string|array) transform string or array of transformations (in the last case it is returned straight away) // 1798\n = (array) array of transformations                                                                                    // 1799\n\\*/                                                                                                                    // 1800\nvar parseTransformString = Snap.parseTransformString = function (TString) {                                            // 1801\n    if (!TString) {                                                                                                    // 1802\n        return null;                                                                                                   // 1803\n    }                                                                                                                  // 1804\n    var paramCounts = {r: 3, s: 4, t: 2, m: 6},                                                                        // 1805\n        data = [];                                                                                                     // 1806\n    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption                                         // 1807\n        data = Snap.path.clone(TString);                                                                               // 1808\n    }                                                                                                                  // 1809\n    if (!data.length) {                                                                                                // 1810\n        Str(TString).replace(tCommand, function (a, b, c) {                                                            // 1811\n            var params = [],                                                                                           // 1812\n                name = b.toLowerCase();                                                                                // 1813\n            c.replace(pathValues, function (a, b) {                                                                    // 1814\n                b && params.push(+b);                                                                                  // 1815\n            });                                                                                                        // 1816\n            data.push([b].concat(params));                                                                             // 1817\n        });                                                                                                            // 1818\n    }                                                                                                                  // 1819\n    data.toString = Snap.path.toString;                                                                                // 1820\n    return data;                                                                                                       // 1821\n};                                                                                                                     // 1822\nfunction svgTransform2string(tstr) {                                                                                   // 1823\n    var res = [];                                                                                                      // 1824\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {                                    // 1825\n        params = params.split(/\\s*,\\s*|\\s+/);                                                                          // 1826\n        if (name == \"rotate\" && params.length == 1) {                                                                  // 1827\n            params.push(0, 0);                                                                                         // 1828\n        }                                                                                                              // 1829\n        if (name == \"scale\") {                                                                                         // 1830\n            if (params.length > 2) {                                                                                   // 1831\n                params = params.slice(0, 2);                                                                           // 1832\n            } else if (params.length == 2) {                                                                           // 1833\n                params.push(0, 0);                                                                                     // 1834\n            }                                                                                                          // 1835\n            if (params.length == 1) {                                                                                  // 1836\n                params.push(params[0], 0, 0);                                                                          // 1837\n            }                                                                                                          // 1838\n        }                                                                                                              // 1839\n        if (name == \"skewX\") {                                                                                         // 1840\n            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);                                                  // 1841\n        } else if (name == \"skewY\") {                                                                                  // 1842\n            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);                                                  // 1843\n        } else {                                                                                                       // 1844\n            res.push([name.charAt(0)].concat(params));                                                                 // 1845\n        }                                                                                                              // 1846\n        return all;                                                                                                    // 1847\n    });                                                                                                                // 1848\n    return res;                                                                                                        // 1849\n}                                                                                                                      // 1850\nSnap._.svgTransform2string = svgTransform2string;                                                                      // 1851\nSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;                                                                            // 1852\nfunction transform2matrix(tstr, bbox) {                                                                                // 1853\n    var tdata = parseTransformString(tstr),                                                                            // 1854\n        m = new Snap.Matrix;                                                                                           // 1855\n    if (tdata) {                                                                                                       // 1856\n        for (var i = 0, ii = tdata.length; i < ii; i++) {                                                              // 1857\n            var t = tdata[i],                                                                                          // 1858\n                tlen = t.length,                                                                                       // 1859\n                command = Str(t[0]).toLowerCase(),                                                                     // 1860\n                absolute = t[0] != command,                                                                            // 1861\n                inver = absolute ? m.invert() : 0,                                                                     // 1862\n                x1,                                                                                                    // 1863\n                y1,                                                                                                    // 1864\n                x2,                                                                                                    // 1865\n                y2,                                                                                                    // 1866\n                bb;                                                                                                    // 1867\n            if (command == \"t\" && tlen == 2){                                                                          // 1868\n                m.translate(t[1], 0);                                                                                  // 1869\n            } else if (command == \"t\" && tlen == 3) {                                                                  // 1870\n                if (absolute) {                                                                                        // 1871\n                    x1 = inver.x(0, 0);                                                                                // 1872\n                    y1 = inver.y(0, 0);                                                                                // 1873\n                    x2 = inver.x(t[1], t[2]);                                                                          // 1874\n                    y2 = inver.y(t[1], t[2]);                                                                          // 1875\n                    m.translate(x2 - x1, y2 - y1);                                                                     // 1876\n                } else {                                                                                               // 1877\n                    m.translate(t[1], t[2]);                                                                           // 1878\n                }                                                                                                      // 1879\n            } else if (command == \"r\") {                                                                               // 1880\n                if (tlen == 2) {                                                                                       // 1881\n                    bb = bb || bbox;                                                                                   // 1882\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);                                         // 1883\n                } else if (tlen == 4) {                                                                                // 1884\n                    if (absolute) {                                                                                    // 1885\n                        x2 = inver.x(t[2], t[3]);                                                                      // 1886\n                        y2 = inver.y(t[2], t[3]);                                                                      // 1887\n                        m.rotate(t[1], x2, y2);                                                                        // 1888\n                    } else {                                                                                           // 1889\n                        m.rotate(t[1], t[2], t[3]);                                                                    // 1890\n                    }                                                                                                  // 1891\n                }                                                                                                      // 1892\n            } else if (command == \"s\") {                                                                               // 1893\n                if (tlen == 2 || tlen == 3) {                                                                          // 1894\n                    bb = bb || bbox;                                                                                   // 1895\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);                             // 1896\n                } else if (tlen == 4) {                                                                                // 1897\n                    if (absolute) {                                                                                    // 1898\n                        x2 = inver.x(t[2], t[3]);                                                                      // 1899\n                        y2 = inver.y(t[2], t[3]);                                                                      // 1900\n                        m.scale(t[1], t[1], x2, y2);                                                                   // 1901\n                    } else {                                                                                           // 1902\n                        m.scale(t[1], t[1], t[2], t[3]);                                                               // 1903\n                    }                                                                                                  // 1904\n                } else if (tlen == 5) {                                                                                // 1905\n                    if (absolute) {                                                                                    // 1906\n                        x2 = inver.x(t[3], t[4]);                                                                      // 1907\n                        y2 = inver.y(t[3], t[4]);                                                                      // 1908\n                        m.scale(t[1], t[2], x2, y2);                                                                   // 1909\n                    } else {                                                                                           // 1910\n                        m.scale(t[1], t[2], t[3], t[4]);                                                               // 1911\n                    }                                                                                                  // 1912\n                }                                                                                                      // 1913\n            } else if (command == \"m\" && tlen == 7) {                                                                  // 1914\n                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);                                                             // 1915\n            }                                                                                                          // 1916\n        }                                                                                                              // 1917\n    }                                                                                                                  // 1918\n    return m;                                                                                                          // 1919\n}                                                                                                                      // 1920\nSnap._.transform2matrix = transform2matrix;                                                                            // 1921\nSnap._unit2px = unit2px;                                                                                               // 1922\nvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?                                                 // 1923\n    function (a, b) {                                                                                                  // 1924\n        var adown = a.nodeType == 9 ? a.documentElement : a,                                                           // 1925\n            bup = b && b.parentNode;                                                                                   // 1926\n            return a == bup || !!(bup && bup.nodeType == 1 && (                                                        // 1927\n                adown.contains ?                                                                                       // 1928\n                    adown.contains(bup) :                                                                              // 1929\n                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16                                   // 1930\n            ));                                                                                                        // 1931\n    } :                                                                                                                // 1932\n    function (a, b) {                                                                                                  // 1933\n        if (b) {                                                                                                       // 1934\n            while (b) {                                                                                                // 1935\n                b = b.parentNode;                                                                                      // 1936\n                if (b == a) {                                                                                          // 1937\n                    return true;                                                                                       // 1938\n                }                                                                                                      // 1939\n            }                                                                                                          // 1940\n        }                                                                                                              // 1941\n        return false;                                                                                                  // 1942\n    };                                                                                                                 // 1943\nfunction getSomeDefs(el) {                                                                                             // 1944\n    var p = (el.node.ownerSVGElement && wrap(el.node.ownerSVGElement)) ||                                              // 1945\n            (el.node.parentNode && wrap(el.node.parentNode)) ||                                                        // 1946\n            Snap.select(\"svg\") ||                                                                                      // 1947\n            Snap(0, 0),                                                                                                // 1948\n        pdefs = p.select(\"defs\"),                                                                                      // 1949\n        defs  = pdefs == null ? false : pdefs.node;                                                                    // 1950\n    if (!defs) {                                                                                                       // 1951\n        defs = make(\"defs\", p.node).node;                                                                              // 1952\n    }                                                                                                                  // 1953\n    return defs;                                                                                                       // 1954\n}                                                                                                                      // 1955\nfunction getSomeSVG(el) {                                                                                              // 1956\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");                             // 1957\n}                                                                                                                      // 1958\nSnap._.getSomeDefs = getSomeDefs;                                                                                      // 1959\nSnap._.getSomeSVG = getSomeSVG;                                                                                        // 1960\nfunction unit2px(el, name, value) {                                                                                    // 1961\n    var svg = getSomeSVG(el).node,                                                                                     // 1962\n        out = {},                                                                                                      // 1963\n        mgr = svg.querySelector(\".svg---mgr\");                                                                         // 1964\n    if (!mgr) {                                                                                                        // 1965\n        mgr = $(\"rect\");                                                                                               // 1966\n        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});                         // 1967\n        svg.appendChild(mgr);                                                                                          // 1968\n    }                                                                                                                  // 1969\n    function getW(val) {                                                                                               // 1970\n        if (val == null) {                                                                                             // 1971\n            return E;                                                                                                  // 1972\n        }                                                                                                              // 1973\n        if (val == +val) {                                                                                             // 1974\n            return val;                                                                                                // 1975\n        }                                                                                                              // 1976\n        $(mgr, {width: val});                                                                                          // 1977\n        try {                                                                                                          // 1978\n            return mgr.getBBox().width;                                                                                // 1979\n        } catch (e) {                                                                                                  // 1980\n            return 0;                                                                                                  // 1981\n        }                                                                                                              // 1982\n    }                                                                                                                  // 1983\n    function getH(val) {                                                                                               // 1984\n        if (val == null) {                                                                                             // 1985\n            return E;                                                                                                  // 1986\n        }                                                                                                              // 1987\n        if (val == +val) {                                                                                             // 1988\n            return val;                                                                                                // 1989\n        }                                                                                                              // 1990\n        $(mgr, {height: val});                                                                                         // 1991\n        try {                                                                                                          // 1992\n            return mgr.getBBox().height;                                                                               // 1993\n        } catch (e) {                                                                                                  // 1994\n            return 0;                                                                                                  // 1995\n        }                                                                                                              // 1996\n    }                                                                                                                  // 1997\n    function set(nam, f) {                                                                                             // 1998\n        if (name == null) {                                                                                            // 1999\n            out[nam] = f(el.attr(nam) || 0);                                                                           // 2000\n        } else if (nam == name) {                                                                                      // 2001\n            out = f(value == null ? el.attr(nam) || 0 : value);                                                        // 2002\n        }                                                                                                              // 2003\n    }                                                                                                                  // 2004\n    switch (el.type) {                                                                                                 // 2005\n        case \"rect\":                                                                                                   // 2006\n            set(\"rx\", getW);                                                                                           // 2007\n            set(\"ry\", getH);                                                                                           // 2008\n        case \"image\":                                                                                                  // 2009\n            set(\"width\", getW);                                                                                        // 2010\n            set(\"height\", getH);                                                                                       // 2011\n        case \"text\":                                                                                                   // 2012\n            set(\"x\", getW);                                                                                            // 2013\n            set(\"y\", getH);                                                                                            // 2014\n        break;                                                                                                         // 2015\n        case \"circle\":                                                                                                 // 2016\n            set(\"cx\", getW);                                                                                           // 2017\n            set(\"cy\", getH);                                                                                           // 2018\n            set(\"r\", getW);                                                                                            // 2019\n        break;                                                                                                         // 2020\n        case \"ellipse\":                                                                                                // 2021\n            set(\"cx\", getW);                                                                                           // 2022\n            set(\"cy\", getH);                                                                                           // 2023\n            set(\"rx\", getW);                                                                                           // 2024\n            set(\"ry\", getH);                                                                                           // 2025\n        break;                                                                                                         // 2026\n        case \"line\":                                                                                                   // 2027\n            set(\"x1\", getW);                                                                                           // 2028\n            set(\"x2\", getW);                                                                                           // 2029\n            set(\"y1\", getH);                                                                                           // 2030\n            set(\"y2\", getH);                                                                                           // 2031\n        break;                                                                                                         // 2032\n        case \"marker\":                                                                                                 // 2033\n            set(\"refX\", getW);                                                                                         // 2034\n            set(\"markerWidth\", getW);                                                                                  // 2035\n            set(\"refY\", getH);                                                                                         // 2036\n            set(\"markerHeight\", getH);                                                                                 // 2037\n        break;                                                                                                         // 2038\n        case \"radialGradient\":                                                                                         // 2039\n            set(\"fx\", getW);                                                                                           // 2040\n            set(\"fy\", getH);                                                                                           // 2041\n        break;                                                                                                         // 2042\n        case \"tspan\":                                                                                                  // 2043\n            set(\"dx\", getW);                                                                                           // 2044\n            set(\"dy\", getH);                                                                                           // 2045\n        break;                                                                                                         // 2046\n        default:                                                                                                       // 2047\n            set(name, getW);                                                                                           // 2048\n    }                                                                                                                  // 2049\n    svg.removeChild(mgr);                                                                                              // 2050\n    return out;                                                                                                        // 2051\n}                                                                                                                      // 2052\n/*\\\n * Snap.select                                                                                                         // 2054\n [ method ]                                                                                                            // 2055\n **                                                                                                                    // 2056\n * Wraps a DOM element specified by CSS selector as @Element                                                           // 2057\n - query (string) CSS selector of the element                                                                          // 2058\n = (Element) the current element                                                                                       // 2059\n\\*/                                                                                                                    // 2060\nSnap.select = function (query) {                                                                                       // 2061\n    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");                                                                  // 2062\n    return wrap(glob.doc.querySelector(query));                                                                        // 2063\n};                                                                                                                     // 2064\n/*\\\n * Snap.selectAll                                                                                                      // 2066\n [ method ]                                                                                                            // 2067\n **                                                                                                                    // 2068\n * Wraps DOM elements specified by CSS selector as set or array of @Element                                            // 2069\n - query (string) CSS selector of the element                                                                          // 2070\n = (Element) the current element                                                                                       // 2071\n\\*/                                                                                                                    // 2072\nSnap.selectAll = function (query) {                                                                                    // 2073\n    var nodelist = glob.doc.querySelectorAll(query),                                                                   // 2074\n        set = (Snap.set || Array)();                                                                                   // 2075\n    for (var i = 0; i < nodelist.length; i++) {                                                                        // 2076\n        set.push(wrap(nodelist[i]));                                                                                   // 2077\n    }                                                                                                                  // 2078\n    return set;                                                                                                        // 2079\n};                                                                                                                     // 2080\n                                                                                                                       // 2081\nfunction add2group(list) {                                                                                             // 2082\n    if (!is(list, \"array\")) {                                                                                          // 2083\n        list = Array.prototype.slice.call(arguments, 0);                                                               // 2084\n    }                                                                                                                  // 2085\n    var i = 0,                                                                                                         // 2086\n        j = 0,                                                                                                         // 2087\n        node = this.node;                                                                                              // 2088\n    while (this[i]) delete this[i++];                                                                                  // 2089\n    for (i = 0; i < list.length; i++) {                                                                                // 2090\n        if (list[i].type == \"set\") {                                                                                   // 2091\n            list[i].forEach(function (el) {                                                                            // 2092\n                node.appendChild(el.node);                                                                             // 2093\n            });                                                                                                        // 2094\n        } else {                                                                                                       // 2095\n            node.appendChild(list[i].node);                                                                            // 2096\n        }                                                                                                              // 2097\n    }                                                                                                                  // 2098\n    var children = node.childNodes;                                                                                    // 2099\n    for (i = 0; i < children.length; i++) {                                                                            // 2100\n        this[j++] = wrap(children[i]);                                                                                 // 2101\n    }                                                                                                                  // 2102\n    return this;                                                                                                       // 2103\n}                                                                                                                      // 2104\n// Hub garbage collector every 10s                                                                                     // 2105\nsetInterval(function () {                                                                                              // 2106\n    for (var key in hub) if (hub[has](key)) {                                                                          // 2107\n        var el = hub[key],                                                                                             // 2108\n            node = el.node;                                                                                            // 2109\n        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n            delete hub[key];                                                                                           // 2111\n        }                                                                                                              // 2112\n    }                                                                                                                  // 2113\n}, 1e4);                                                                                                               // 2114\nfunction Element(el) {                                                                                                 // 2115\n    if (el.snap in hub) {                                                                                              // 2116\n        return hub[el.snap];                                                                                           // 2117\n    }                                                                                                                  // 2118\n    var svg;                                                                                                           // 2119\n    try {                                                                                                              // 2120\n        svg = el.ownerSVGElement;                                                                                      // 2121\n    } catch(e) {}                                                                                                      // 2122\n    /*\\\n     * Element.node                                                                                                    // 2124\n     [ property (object) ]                                                                                             // 2125\n     **                                                                                                                // 2126\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.                  // 2127\n     > Usage                                                                                                           // 2128\n     | // draw a circle at coordinate 10,10 with radius of 10                                                          // 2129\n     | var c = paper.circle(10, 10, 10);                                                                               // 2130\n     | c.node.onclick = function () {                                                                                  // 2131\n     |     c.attr(\"fill\", \"red\");                                                                                      // 2132\n     | };                                                                                                              // 2133\n    \\*/                                                                                                                // 2134\n    this.node = el;                                                                                                    // 2135\n    if (svg) {                                                                                                         // 2136\n        this.paper = new Paper(svg);                                                                                   // 2137\n    }                                                                                                                  // 2138\n    /*\\\n     * Element.type                                                                                                    // 2140\n     [ property (string) ]                                                                                             // 2141\n     **                                                                                                                // 2142\n     * SVG tag name of the given element.                                                                              // 2143\n    \\*/                                                                                                                // 2144\n    this.type = el.tagName || el.nodeName;                                                                             // 2145\n    var id = this.id = ID(this);                                                                                       // 2146\n    this.anims = {};                                                                                                   // 2147\n    this._ = {                                                                                                         // 2148\n        transform: []                                                                                                  // 2149\n    };                                                                                                                 // 2150\n    el.snap = id;                                                                                                      // 2151\n    hub[id] = this;                                                                                                    // 2152\n    if (this.type == \"g\") {                                                                                            // 2153\n        this.add = add2group;                                                                                          // 2154\n    }                                                                                                                  // 2155\n    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {                                                         // 2156\n        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {                                        // 2157\n            this[method] = Paper.prototype[method];                                                                    // 2158\n        }                                                                                                              // 2159\n    }                                                                                                                  // 2160\n}                                                                                                                      // 2161\n   /*\\\n     * Element.attr                                                                                                    // 2163\n     [ method ]                                                                                                        // 2164\n     **                                                                                                                // 2165\n     * Gets or sets given attributes of the element.                                                                   // 2166\n     **                                                                                                                // 2167\n     - params (object) contains key-value pairs of attributes you want to set                                          // 2168\n     * or                                                                                                              // 2169\n     - param (string) name of the attribute                                                                            // 2170\n     = (Element) the current element                                                                                   // 2171\n     * or                                                                                                              // 2172\n     = (string) value of attribute                                                                                     // 2173\n     > Usage                                                                                                           // 2174\n     | el.attr({                                                                                                       // 2175\n     |     fill: \"#fc0\",                                                                                               // 2176\n     |     stroke: \"#000\",                                                                                             // 2177\n     |     strokeWidth: 2, // CamelCase...                                                                             // 2178\n     |     \"fill-opacity\": 0.5, // or dash-separated names                                                             // 2179\n     |     width: \"*=2\" // prefixed values                                                                             // 2180\n     | });                                                                                                             // 2181\n     | console.log(el.attr(\"fill\")); // #fc0                                                                           // 2182\n     * Prefixed values in format `\"+=10\"` supported. All four operations                                               // 2183\n     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`                                     // 2184\n     * and `-`: `\"+=2em\"`.                                                                                             // 2185\n    \\*/                                                                                                                // 2186\n    Element.prototype.attr = function (params, value) {                                                                // 2187\n        var el = this,                                                                                                 // 2188\n            node = el.node;                                                                                            // 2189\n        if (!params) {                                                                                                 // 2190\n            if (node.nodeType != 1) {                                                                                  // 2191\n                return {                                                                                               // 2192\n                    text: node.nodeValue                                                                               // 2193\n                };                                                                                                     // 2194\n            }                                                                                                          // 2195\n            var attr = node.attributes,                                                                                // 2196\n                out = {};                                                                                              // 2197\n            for (var i = 0, ii = attr.length; i < ii; i++) {                                                           // 2198\n                out[attr[i].nodeName] = attr[i].nodeValue;                                                             // 2199\n            }                                                                                                          // 2200\n            return out;                                                                                                // 2201\n        }                                                                                                              // 2202\n        if (is(params, \"string\")) {                                                                                    // 2203\n            if (arguments.length > 1) {                                                                                // 2204\n                var json = {};                                                                                         // 2205\n                json[params] = value;                                                                                  // 2206\n                params = json;                                                                                         // 2207\n            } else {                                                                                                   // 2208\n                return eve(\"snap.util.getattr.\" + params, el).firstDefined();                                          // 2209\n            }                                                                                                          // 2210\n        }                                                                                                              // 2211\n        for (var att in params) {                                                                                      // 2212\n            if (params[has](att)) {                                                                                    // 2213\n                eve(\"snap.util.attr.\" + att, el, params[att]);                                                         // 2214\n            }                                                                                                          // 2215\n        }                                                                                                              // 2216\n        return el;                                                                                                     // 2217\n    };                                                                                                                 // 2218\n/*\\\n * Snap.parse                                                                                                          // 2220\n [ method ]                                                                                                            // 2221\n **                                                                                                                    // 2222\n * Parses SVG fragment and converts it into a @Fragment                                                                // 2223\n **                                                                                                                    // 2224\n - svg (string) SVG string                                                                                             // 2225\n = (Fragment) the @Fragment                                                                                            // 2226\n\\*/                                                                                                                    // 2227\nSnap.parse = function (svg) {                                                                                          // 2228\n    var f = glob.doc.createDocumentFragment(),                                                                         // 2229\n        full = true,                                                                                                   // 2230\n        div = glob.doc.createElement(\"div\");                                                                           // 2231\n    svg = Str(svg);                                                                                                    // 2232\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {                                                                           // 2233\n        svg = \"<svg>\" + svg + \"</svg>\";                                                                                // 2234\n        full = false;                                                                                                  // 2235\n    }                                                                                                                  // 2236\n    div.innerHTML = svg;                                                                                               // 2237\n    svg = div.getElementsByTagName(\"svg\")[0];                                                                          // 2238\n    if (svg) {                                                                                                         // 2239\n        if (full) {                                                                                                    // 2240\n            f = svg;                                                                                                   // 2241\n        } else {                                                                                                       // 2242\n            while (svg.firstChild) {                                                                                   // 2243\n                f.appendChild(svg.firstChild);                                                                         // 2244\n            }                                                                                                          // 2245\n        }                                                                                                              // 2246\n    }                                                                                                                  // 2247\n    return new Fragment(f);                                                                                            // 2248\n};                                                                                                                     // 2249\nfunction Fragment(frag) {                                                                                              // 2250\n    this.node = frag;                                                                                                  // 2251\n}                                                                                                                      // 2252\n/*\\\n * Snap.fragment                                                                                                       // 2254\n [ method ]                                                                                                            // 2255\n **                                                                                                                    // 2256\n * Creates a DOM fragment from a given list of elements or strings                                                     // 2257\n **                                                                                                                    // 2258\n - varargs (…) SVG string                                                                                              // 2259\n = (Fragment) the @Fragment                                                                                            // 2260\n\\*/                                                                                                                    // 2261\nSnap.fragment = function () {                                                                                          // 2262\n    var args = Array.prototype.slice.call(arguments, 0),                                                               // 2263\n        f = glob.doc.createDocumentFragment();                                                                         // 2264\n    for (var i = 0, ii = args.length; i < ii; i++) {                                                                   // 2265\n        var item = args[i];                                                                                            // 2266\n        if (item.node && item.node.nodeType) {                                                                         // 2267\n            f.appendChild(item.node);                                                                                  // 2268\n        }                                                                                                              // 2269\n        if (item.nodeType) {                                                                                           // 2270\n            f.appendChild(item);                                                                                       // 2271\n        }                                                                                                              // 2272\n        if (typeof item == \"string\") {                                                                                 // 2273\n            f.appendChild(Snap.parse(item).node);                                                                      // 2274\n        }                                                                                                              // 2275\n    }                                                                                                                  // 2276\n    return new Fragment(f);                                                                                            // 2277\n};                                                                                                                     // 2278\n                                                                                                                       // 2279\nfunction make(name, parent) {                                                                                          // 2280\n    var res = $(name);                                                                                                 // 2281\n    parent.appendChild(res);                                                                                           // 2282\n    var el = wrap(res);                                                                                                // 2283\n    return el;                                                                                                         // 2284\n}                                                                                                                      // 2285\nfunction Paper(w, h) {                                                                                                 // 2286\n    var res,                                                                                                           // 2287\n        desc,                                                                                                          // 2288\n        defs,                                                                                                          // 2289\n        proto = Paper.prototype;                                                                                       // 2290\n    if (w && w.tagName == \"svg\") {                                                                                     // 2291\n        if (w.snap in hub) {                                                                                           // 2292\n            return hub[w.snap];                                                                                        // 2293\n        }                                                                                                              // 2294\n        var doc = w.ownerDocument;                                                                                     // 2295\n        res = new Element(w);                                                                                          // 2296\n        desc = w.getElementsByTagName(\"desc\")[0];                                                                      // 2297\n        defs = w.getElementsByTagName(\"defs\")[0];                                                                      // 2298\n        if (!desc) {                                                                                                   // 2299\n            desc = $(\"desc\");                                                                                          // 2300\n            desc.appendChild(doc.createTextNode(\"Created with Snap\"));                                                 // 2301\n            res.node.appendChild(desc);                                                                                // 2302\n        }                                                                                                              // 2303\n        if (!defs) {                                                                                                   // 2304\n            defs = $(\"defs\");                                                                                          // 2305\n            res.node.appendChild(defs);                                                                                // 2306\n        }                                                                                                              // 2307\n        res.defs = defs;                                                                                               // 2308\n        for (var key in proto) if (proto[has](key)) {                                                                  // 2309\n            res[key] = proto[key];                                                                                     // 2310\n        }                                                                                                              // 2311\n        res.paper = res.root = res;                                                                                    // 2312\n    } else {                                                                                                           // 2313\n        res = make(\"svg\", glob.doc.body);                                                                              // 2314\n        $(res.node, {                                                                                                  // 2315\n            height: h,                                                                                                 // 2316\n            version: 1.1,                                                                                              // 2317\n            width: w,                                                                                                  // 2318\n            xmlns: xmlns                                                                                               // 2319\n        });                                                                                                            // 2320\n    }                                                                                                                  // 2321\n    return res;                                                                                                        // 2322\n}                                                                                                                      // 2323\nfunction wrap(dom) {                                                                                                   // 2324\n    if (!dom) {                                                                                                        // 2325\n        return dom;                                                                                                    // 2326\n    }                                                                                                                  // 2327\n    if (dom instanceof Element || dom instanceof Fragment) {                                                           // 2328\n        return dom;                                                                                                    // 2329\n    }                                                                                                                  // 2330\n    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {                                                           // 2331\n        return new Paper(dom);                                                                                         // 2332\n    }                                                                                                                  // 2333\n    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {                         // 2334\n        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);                                          // 2335\n    }                                                                                                                  // 2336\n    return new Element(dom);                                                                                           // 2337\n}                                                                                                                      // 2338\n                                                                                                                       // 2339\nSnap._.make = make;                                                                                                    // 2340\nSnap._.wrap = wrap;                                                                                                    // 2341\n/*\\\n * Paper.el                                                                                                            // 2343\n [ method ]                                                                                                            // 2344\n **                                                                                                                    // 2345\n * Creates an element on paper with a given name and no attributes                                                     // 2346\n **                                                                                                                    // 2347\n - name (string) tag name                                                                                              // 2348\n - attr (object) attributes                                                                                            // 2349\n = (Element) the current element                                                                                       // 2350\n > Usage                                                                                                               // 2351\n | var c = paper.circle(10, 10, 10); // is the same as...                                                              // 2352\n | var c = paper.el(\"circle\").attr({                                                                                   // 2353\n |     cx: 10,                                                                                                         // 2354\n |     cy: 10,                                                                                                         // 2355\n |     r: 10                                                                                                           // 2356\n | });                                                                                                                 // 2357\n | // and the same as                                                                                                  // 2358\n | var c = paper.el(\"circle\", {                                                                                        // 2359\n |     cx: 10,                                                                                                         // 2360\n |     cy: 10,                                                                                                         // 2361\n |     r: 10                                                                                                           // 2362\n | });                                                                                                                 // 2363\n\\*/                                                                                                                    // 2364\nPaper.prototype.el = function (name, attr) {                                                                           // 2365\n    var el = make(name, this.node);                                                                                    // 2366\n    attr && el.attr(attr);                                                                                             // 2367\n    return el;                                                                                                         // 2368\n};                                                                                                                     // 2369\n/*\\\n * Element.children                                                                                                    // 2371\n [ method ]                                                                                                            // 2372\n **                                                                                                                    // 2373\n * Returns array of all the children of the element.                                                                   // 2374\n = (array) array of Elements                                                                                           // 2375\n\\*/                                                                                                                    // 2376\nElement.prototype.children = function () {                                                                             // 2377\n    var out = [],                                                                                                      // 2378\n        ch = this.node.childNodes;                                                                                     // 2379\n    for (var i = 0, ii = ch.length; i < ii; i++) {                                                                     // 2380\n        out[i] = Snap(ch[i]);                                                                                          // 2381\n    }                                                                                                                  // 2382\n    return out;                                                                                                        // 2383\n};                                                                                                                     // 2384\nfunction jsonFiller(root, o) {                                                                                         // 2385\n    for (var i = 0, ii = root.length; i < ii; i++) {                                                                   // 2386\n        var item = {                                                                                                   // 2387\n                type: root[i].type,                                                                                    // 2388\n                attr: root[i].attr()                                                                                   // 2389\n            },                                                                                                         // 2390\n            children = root[i].children();                                                                             // 2391\n        o.push(item);                                                                                                  // 2392\n        if (children.length) {                                                                                         // 2393\n            jsonFiller(children, item.childNodes = []);                                                                // 2394\n        }                                                                                                              // 2395\n    }                                                                                                                  // 2396\n}                                                                                                                      // 2397\n/*\\\n * Element.toJSON                                                                                                      // 2399\n [ method ]                                                                                                            // 2400\n **                                                                                                                    // 2401\n * Returns object representation of the given element and all its children.                                            // 2402\n = (object) in format                                                                                                  // 2403\n o {                                                                                                                   // 2404\n o     type (string) this.type,                                                                                        // 2405\n o     attr (object) attributes map,                                                                                   // 2406\n o     childNodes (array) optional array of children in the same format                                                // 2407\n o }                                                                                                                   // 2408\n\\*/                                                                                                                    // 2409\nElement.prototype.toJSON = function () {                                                                               // 2410\n    var out = [];                                                                                                      // 2411\n    jsonFiller([this], out);                                                                                           // 2412\n    return out[0];                                                                                                     // 2413\n};                                                                                                                     // 2414\n// default                                                                                                             // 2415\neve.on(\"snap.util.getattr\", function () {                                                                              // 2416\n    var att = eve.nt();                                                                                                // 2417\n    att = att.substring(att.lastIndexOf(\".\") + 1);                                                                     // 2418\n    var css = att.replace(/[A-Z]/g, function (letter) {                                                                // 2419\n        return \"-\" + letter.toLowerCase();                                                                             // 2420\n    });                                                                                                                // 2421\n    if (cssAttr[has](css)) {                                                                                           // 2422\n        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);            // 2423\n    } else {                                                                                                           // 2424\n        return $(this.node, att);                                                                                      // 2425\n    }                                                                                                                  // 2426\n});                                                                                                                    // 2427\nvar cssAttr = {                                                                                                        // 2428\n    \"alignment-baseline\": 0,                                                                                           // 2429\n    \"baseline-shift\": 0,                                                                                               // 2430\n    \"clip\": 0,                                                                                                         // 2431\n    \"clip-path\": 0,                                                                                                    // 2432\n    \"clip-rule\": 0,                                                                                                    // 2433\n    \"color\": 0,                                                                                                        // 2434\n    \"color-interpolation\": 0,                                                                                          // 2435\n    \"color-interpolation-filters\": 0,                                                                                  // 2436\n    \"color-profile\": 0,                                                                                                // 2437\n    \"color-rendering\": 0,                                                                                              // 2438\n    \"cursor\": 0,                                                                                                       // 2439\n    \"direction\": 0,                                                                                                    // 2440\n    \"display\": 0,                                                                                                      // 2441\n    \"dominant-baseline\": 0,                                                                                            // 2442\n    \"enable-background\": 0,                                                                                            // 2443\n    \"fill\": 0,                                                                                                         // 2444\n    \"fill-opacity\": 0,                                                                                                 // 2445\n    \"fill-rule\": 0,                                                                                                    // 2446\n    \"filter\": 0,                                                                                                       // 2447\n    \"flood-color\": 0,                                                                                                  // 2448\n    \"flood-opacity\": 0,                                                                                                // 2449\n    \"font\": 0,                                                                                                         // 2450\n    \"font-family\": 0,                                                                                                  // 2451\n    \"font-size\": 0,                                                                                                    // 2452\n    \"font-size-adjust\": 0,                                                                                             // 2453\n    \"font-stretch\": 0,                                                                                                 // 2454\n    \"font-style\": 0,                                                                                                   // 2455\n    \"font-variant\": 0,                                                                                                 // 2456\n    \"font-weight\": 0,                                                                                                  // 2457\n    \"glyph-orientation-horizontal\": 0,                                                                                 // 2458\n    \"glyph-orientation-vertical\": 0,                                                                                   // 2459\n    \"image-rendering\": 0,                                                                                              // 2460\n    \"kerning\": 0,                                                                                                      // 2461\n    \"letter-spacing\": 0,                                                                                               // 2462\n    \"lighting-color\": 0,                                                                                               // 2463\n    \"marker\": 0,                                                                                                       // 2464\n    \"marker-end\": 0,                                                                                                   // 2465\n    \"marker-mid\": 0,                                                                                                   // 2466\n    \"marker-start\": 0,                                                                                                 // 2467\n    \"mask\": 0,                                                                                                         // 2468\n    \"opacity\": 0,                                                                                                      // 2469\n    \"overflow\": 0,                                                                                                     // 2470\n    \"pointer-events\": 0,                                                                                               // 2471\n    \"shape-rendering\": 0,                                                                                              // 2472\n    \"stop-color\": 0,                                                                                                   // 2473\n    \"stop-opacity\": 0,                                                                                                 // 2474\n    \"stroke\": 0,                                                                                                       // 2475\n    \"stroke-dasharray\": 0,                                                                                             // 2476\n    \"stroke-dashoffset\": 0,                                                                                            // 2477\n    \"stroke-linecap\": 0,                                                                                               // 2478\n    \"stroke-linejoin\": 0,                                                                                              // 2479\n    \"stroke-miterlimit\": 0,                                                                                            // 2480\n    \"stroke-opacity\": 0,                                                                                               // 2481\n    \"stroke-width\": 0,                                                                                                 // 2482\n    \"text-anchor\": 0,                                                                                                  // 2483\n    \"text-decoration\": 0,                                                                                              // 2484\n    \"text-rendering\": 0,                                                                                               // 2485\n    \"unicode-bidi\": 0,                                                                                                 // 2486\n    \"visibility\": 0,                                                                                                   // 2487\n    \"word-spacing\": 0,                                                                                                 // 2488\n    \"writing-mode\": 0                                                                                                  // 2489\n};                                                                                                                     // 2490\n                                                                                                                       // 2491\neve.on(\"snap.util.attr\", function (value) {                                                                            // 2492\n    var att = eve.nt(),                                                                                                // 2493\n        attr = {};                                                                                                     // 2494\n    att = att.substring(att.lastIndexOf(\".\") + 1);                                                                     // 2495\n    attr[att] = value;                                                                                                 // 2496\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {                                                        // 2497\n            return letter.toUpperCase();                                                                               // 2498\n        }),                                                                                                            // 2499\n        css = att.replace(/[A-Z]/g, function (letter) {                                                                // 2500\n            return \"-\" + letter.toLowerCase();                                                                         // 2501\n        });                                                                                                            // 2502\n    if (cssAttr[has](css)) {                                                                                           // 2503\n        this.node.style[style] = value == null ? E : value;                                                            // 2504\n    } else {                                                                                                           // 2505\n        $(this.node, attr);                                                                                            // 2506\n    }                                                                                                                  // 2507\n});                                                                                                                    // 2508\n(function (proto) {}(Paper.prototype));                                                                                // 2509\n                                                                                                                       // 2510\n// simple ajax                                                                                                         // 2511\n/*\\\n * Snap.ajax                                                                                                           // 2513\n [ method ]                                                                                                            // 2514\n **                                                                                                                    // 2515\n * Simple implementation of Ajax                                                                                       // 2516\n **                                                                                                                    // 2517\n - url (string) URL                                                                                                    // 2518\n - postData (object|string) data for post request                                                                      // 2519\n - callback (function) callback                                                                                        // 2520\n - scope (object) #optional scope of callback                                                                          // 2521\n * or                                                                                                                  // 2522\n - url (string) URL                                                                                                    // 2523\n - callback (function) callback                                                                                        // 2524\n - scope (object) #optional scope of callback                                                                          // 2525\n = (XMLHttpRequest) the XMLHttpRequest object, just in case                                                            // 2526\n\\*/                                                                                                                    // 2527\nSnap.ajax = function (url, postData, callback, scope){                                                                 // 2528\n    var req = new XMLHttpRequest,                                                                                      // 2529\n        id = ID();                                                                                                     // 2530\n    if (req) {                                                                                                         // 2531\n        if (is(postData, \"function\")) {                                                                                // 2532\n            scope = callback;                                                                                          // 2533\n            callback = postData;                                                                                       // 2534\n            postData = null;                                                                                           // 2535\n        } else if (is(postData, \"object\")) {                                                                           // 2536\n            var pd = [];                                                                                               // 2537\n            for (var key in postData) if (postData.hasOwnProperty(key)) {                                              // 2538\n                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));                            // 2539\n            }                                                                                                          // 2540\n            postData = pd.join(\"&\");                                                                                   // 2541\n        }                                                                                                              // 2542\n        req.open((postData ? \"POST\" : \"GET\"), url, true);                                                              // 2543\n        if (postData) {                                                                                                // 2544\n            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");                                                // 2545\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");                                 // 2546\n        }                                                                                                              // 2547\n        if (callback) {                                                                                                // 2548\n            eve.once(\"snap.ajax.\" + id + \".0\", callback);                                                              // 2549\n            eve.once(\"snap.ajax.\" + id + \".200\", callback);                                                            // 2550\n            eve.once(\"snap.ajax.\" + id + \".304\", callback);                                                            // 2551\n        }                                                                                                              // 2552\n        req.onreadystatechange = function() {                                                                          // 2553\n            if (req.readyState != 4) return;                                                                           // 2554\n            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);                                                     // 2555\n        };                                                                                                             // 2556\n        if (req.readyState == 4) {                                                                                     // 2557\n            return req;                                                                                                // 2558\n        }                                                                                                              // 2559\n        req.send(postData);                                                                                            // 2560\n        return req;                                                                                                    // 2561\n    }                                                                                                                  // 2562\n};                                                                                                                     // 2563\n/*\\\n * Snap.load                                                                                                           // 2565\n [ method ]                                                                                                            // 2566\n **                                                                                                                    // 2567\n * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)                                      // 2568\n **                                                                                                                    // 2569\n - url (string) URL                                                                                                    // 2570\n - callback (function) callback                                                                                        // 2571\n - scope (object) #optional scope of callback                                                                          // 2572\n\\*/                                                                                                                    // 2573\nSnap.load = function (url, callback, scope) {                                                                          // 2574\n    Snap.ajax(url, function (req) {                                                                                    // 2575\n        var f = Snap.parse(req.responseText);                                                                          // 2576\n        scope ? callback.call(scope, f) : callback(f);                                                                 // 2577\n    });                                                                                                                // 2578\n};                                                                                                                     // 2579\nvar getOffset = function (elem) {                                                                                      // 2580\n    var box = elem.getBoundingClientRect(),                                                                            // 2581\n        doc = elem.ownerDocument,                                                                                      // 2582\n        body = doc.body,                                                                                               // 2583\n        docElem = doc.documentElement,                                                                                 // 2584\n        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0, // 2585\n        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,                     // 2586\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;                   // 2587\n    return {                                                                                                           // 2588\n        y: top,                                                                                                        // 2589\n        x: left                                                                                                        // 2590\n    };                                                                                                                 // 2591\n};                                                                                                                     // 2592\n/*\\\n * Snap.getElementByPoint                                                                                              // 2594\n [ method ]                                                                                                            // 2595\n **                                                                                                                    // 2596\n * Returns you topmost element under given point.                                                                      // 2597\n **                                                                                                                    // 2598\n = (object) Snap element object                                                                                        // 2599\n - x (number) x coordinate from the top left corner of the window                                                      // 2600\n - y (number) y coordinate from the top left corner of the window                                                      // 2601\n > Usage                                                                                                               // 2602\n | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});                                                      // 2603\n\\*/                                                                                                                    // 2604\nSnap.getElementByPoint = function (x, y) {                                                                             // 2605\n    var paper = this,                                                                                                  // 2606\n        svg = paper.canvas,                                                                                            // 2607\n        target = glob.doc.elementFromPoint(x, y);                                                                      // 2608\n    if (glob.win.opera && target.tagName == \"svg\") {                                                                   // 2609\n        var so = getOffset(target),                                                                                    // 2610\n            sr = target.createSVGRect();                                                                               // 2611\n        sr.x = x - so.x;                                                                                               // 2612\n        sr.y = y - so.y;                                                                                               // 2613\n        sr.width = sr.height = 1;                                                                                      // 2614\n        var hits = target.getIntersectionList(sr, null);                                                               // 2615\n        if (hits.length) {                                                                                             // 2616\n            target = hits[hits.length - 1];                                                                            // 2617\n        }                                                                                                              // 2618\n    }                                                                                                                  // 2619\n    if (!target) {                                                                                                     // 2620\n        return null;                                                                                                   // 2621\n    }                                                                                                                  // 2622\n    return wrap(target);                                                                                               // 2623\n};                                                                                                                     // 2624\n/*\\\n * Snap.plugin                                                                                                         // 2626\n [ method ]                                                                                                            // 2627\n **                                                                                                                    // 2628\n * Let you write plugins. You pass in a function with five arguments, like this:                                       // 2629\n | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {                                                     // 2630\n |     Snap.newmethod = function () {};                                                                                // 2631\n |     Element.prototype.newmethod = function () {};                                                                   // 2632\n |     Paper.prototype.newmethod = function () {};                                                                     // 2633\n | });                                                                                                                 // 2634\n * Inside the function you have access to all main objects (and their                                                  // 2635\n * prototypes). This allow you to extend anything you want.                                                            // 2636\n **                                                                                                                    // 2637\n - f (function) your plugin body                                                                                       // 2638\n\\*/                                                                                                                    // 2639\nSnap.plugin = function (f) {                                                                                           // 2640\n    f(Snap, Element, Paper, glob, Fragment);                                                                           // 2641\n};                                                                                                                     // 2642\nglob.win.Snap = Snap;                                                                                                  // 2643\nreturn Snap;                                                                                                           // 2644\n}(window || this));                                                                                                    // 2645\n                                                                                                                       // 2646\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 2647\n//                                                                                                                     // 2648\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 2649\n// you may not use this file except in compliance with the License.                                                    // 2650\n// You may obtain a copy of the License at                                                                             // 2651\n//                                                                                                                     // 2652\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 2653\n//                                                                                                                     // 2654\n// Unless required by applicable law or agreed to in writing, software                                                 // 2655\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 2656\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2657\n// See the License for the specific language governing permissions and                                                 // 2658\n// limitations under the License.                                                                                      // 2659\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {                                                          // 2660\n    var elproto = Element.prototype,                                                                                   // 2661\n        is = Snap.is,                                                                                                  // 2662\n        Str = String,                                                                                                  // 2663\n        unit2px = Snap._unit2px,                                                                                       // 2664\n        $ = Snap._.$,                                                                                                  // 2665\n        make = Snap._.make,                                                                                            // 2666\n        getSomeDefs = Snap._.getSomeDefs,                                                                              // 2667\n        has = \"hasOwnProperty\",                                                                                        // 2668\n        wrap = Snap._.wrap;                                                                                            // 2669\n    /*\\\n     * Element.getBBox                                                                                                 // 2671\n     [ method ]                                                                                                        // 2672\n     **                                                                                                                // 2673\n     * Returns the bounding box descriptor for the given element                                                       // 2674\n     **                                                                                                                // 2675\n     = (object) bounding box descriptor:                                                                               // 2676\n     o {                                                                                                               // 2677\n     o     cx: (number) x of the center,                                                                               // 2678\n     o     cy: (number) x of the center,                                                                               // 2679\n     o     h: (number) height,                                                                                         // 2680\n     o     height: (number) height,                                                                                    // 2681\n     o     path: (string) path command for the box,                                                                    // 2682\n     o     r0: (number) radius of a circle that fully encloses the box,                                                // 2683\n     o     r1: (number) radius of the smallest circle that can be enclosed,                                            // 2684\n     o     r2: (number) radius of the largest circle that can be enclosed,                                             // 2685\n     o     vb: (string) box as a viewbox command,                                                                      // 2686\n     o     w: (number) width,                                                                                          // 2687\n     o     width: (number) width,                                                                                      // 2688\n     o     x2: (number) x of the right side,                                                                           // 2689\n     o     x: (number) x of the left side,                                                                             // 2690\n     o     y2: (number) y of the bottom edge,                                                                          // 2691\n     o     y: (number) y of the top edge                                                                               // 2692\n     o }                                                                                                               // 2693\n    \\*/                                                                                                                // 2694\n    elproto.getBBox = function (isWithoutTransform) {                                                                  // 2695\n        if (!Snap.Matrix || !Snap.path) {                                                                              // 2696\n            return this.node.getBBox();                                                                                // 2697\n        }                                                                                                              // 2698\n        var el = this,                                                                                                 // 2699\n            m = new Snap.Matrix;                                                                                       // 2700\n        if (el.removed) {                                                                                              // 2701\n            return Snap._.box();                                                                                       // 2702\n        }                                                                                                              // 2703\n        while (el.type == \"use\") {                                                                                     // 2704\n            if (!isWithoutTransform) {                                                                                 // 2705\n                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));                 // 2706\n            }                                                                                                          // 2707\n            if (el.original) {                                                                                         // 2708\n                el = el.original;                                                                                      // 2709\n            } else {                                                                                                   // 2710\n                var href = el.attr(\"xlink:href\");                                                                      // 2711\n                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));        // 2712\n            }                                                                                                          // 2713\n        }                                                                                                              // 2714\n        var _ = el._,                                                                                                  // 2715\n            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;                                                // 2716\n        try {                                                                                                          // 2717\n            if (isWithoutTransform) {                                                                                  // 2718\n                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n                return Snap._.box(_.bboxwt);                                                                           // 2720\n            } else {                                                                                                   // 2721\n                el.realPath = pathfinder(el);                                                                          // 2722\n                el.matrix = el.transform().localMatrix;                                                                // 2723\n                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));                              // 2724\n                return Snap._.box(_.bbox);                                                                             // 2725\n            }                                                                                                          // 2726\n        } catch (e) {                                                                                                  // 2727\n            // Firefox doesn’t give you bbox of hidden element                                                         // 2728\n            return Snap._.box();                                                                                       // 2729\n        }                                                                                                              // 2730\n    };                                                                                                                 // 2731\n    var propString = function () {                                                                                     // 2732\n        return this.string;                                                                                            // 2733\n    };                                                                                                                 // 2734\n    function extractTransform(el, tstr) {                                                                              // 2735\n        if (tstr == null) {                                                                                            // 2736\n            var doReturn = true;                                                                                       // 2737\n            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {                                          // 2738\n                tstr = el.node.getAttribute(\"gradientTransform\");                                                      // 2739\n            } else if (el.type == \"pattern\") {                                                                         // 2740\n                tstr = el.node.getAttribute(\"patternTransform\");                                                       // 2741\n            } else {                                                                                                   // 2742\n                tstr = el.node.getAttribute(\"transform\");                                                              // 2743\n            }                                                                                                          // 2744\n            if (!tstr) {                                                                                               // 2745\n                return new Snap.Matrix;                                                                                // 2746\n            }                                                                                                          // 2747\n            tstr = Snap._.svgTransform2string(tstr);                                                                   // 2748\n        } else {                                                                                                       // 2749\n            if (!Snap._.rgTransform.test(tstr)) {                                                                      // 2750\n                tstr = Snap._.svgTransform2string(tstr);                                                               // 2751\n            } else {                                                                                                   // 2752\n                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || \"\");                                       // 2753\n            }                                                                                                          // 2754\n            if (is(tstr, \"array\")) {                                                                                   // 2755\n                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);                                          // 2756\n            }                                                                                                          // 2757\n            el._.transform = tstr;                                                                                     // 2758\n        }                                                                                                              // 2759\n        var m = Snap._.transform2matrix(tstr, el.getBBox(1));                                                          // 2760\n        if (doReturn) {                                                                                                // 2761\n            return m;                                                                                                  // 2762\n        } else {                                                                                                       // 2763\n            el.matrix = m;                                                                                             // 2764\n        }                                                                                                              // 2765\n    }                                                                                                                  // 2766\n    /*\\\n     * Element.transform                                                                                               // 2768\n     [ method ]                                                                                                        // 2769\n     **                                                                                                                // 2770\n     * Gets or sets transformation of the element                                                                      // 2771\n     **                                                                                                                // 2772\n     - tstr (string) transform string in Snap or SVG format                                                            // 2773\n     = (Element) the current element                                                                                   // 2774\n     * or                                                                                                              // 2775\n     = (object) transformation descriptor:                                                                             // 2776\n     o {                                                                                                               // 2777\n     o     string (string) transform string,                                                                           // 2778\n     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,                      // 2779\n     o     localMatrix (Matrix) matrix of transformations applied only to the element,                                 // 2780\n     o     diffMatrix (Matrix) matrix of difference between global and local transformations,                          // 2781\n     o     global (string) global transformation as string,                                                            // 2782\n     o     local (string) local transformation as string,                                                              // 2783\n     o     toString (function) returns `string` property                                                               // 2784\n     o }                                                                                                               // 2785\n    \\*/                                                                                                                // 2786\n    elproto.transform = function (tstr) {                                                                              // 2787\n        var _ = this._;                                                                                                // 2788\n        if (tstr == null) {                                                                                            // 2789\n            var papa = this,                                                                                           // 2790\n                global = new Snap.Matrix(this.node.getCTM()),                                                          // 2791\n                local = extractTransform(this),                                                                        // 2792\n                ms = [local],                                                                                          // 2793\n                m = new Snap.Matrix,                                                                                   // 2794\n                i,                                                                                                     // 2795\n                localString = local.toTransformString(),                                                               // 2796\n                string = Str(local) == Str(this.matrix) ?                                                              // 2797\n                            Str(_.transform) : localString;                                                            // 2798\n            while (papa.type != \"svg\" && (papa = papa.parent())) {                                                     // 2799\n                ms.push(extractTransform(papa));                                                                       // 2800\n            }                                                                                                          // 2801\n            i = ms.length;                                                                                             // 2802\n            while (i--) {                                                                                              // 2803\n                m.add(ms[i]);                                                                                          // 2804\n            }                                                                                                          // 2805\n            return {                                                                                                   // 2806\n                string: string,                                                                                        // 2807\n                globalMatrix: global,                                                                                  // 2808\n                totalMatrix: m,                                                                                        // 2809\n                localMatrix: local,                                                                                    // 2810\n                diffMatrix: global.clone().add(local.invert()),                                                        // 2811\n                global: global.toTransformString(),                                                                    // 2812\n                total: m.toTransformString(),                                                                          // 2813\n                local: localString,                                                                                    // 2814\n                toString: propString                                                                                   // 2815\n            };                                                                                                         // 2816\n        }                                                                                                              // 2817\n        if (tstr instanceof Snap.Matrix) {                                                                             // 2818\n            this.matrix = tstr;                                                                                        // 2819\n            this._.transform = tstr.toTransformString();                                                               // 2820\n        } else {                                                                                                       // 2821\n            extractTransform(this, tstr);                                                                              // 2822\n        }                                                                                                              // 2823\n                                                                                                                       // 2824\n        if (this.node) {                                                                                               // 2825\n            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {                                      // 2826\n                $(this.node, {gradientTransform: this.matrix});                                                        // 2827\n            } else if (this.type == \"pattern\") {                                                                       // 2828\n                $(this.node, {patternTransform: this.matrix});                                                         // 2829\n            } else {                                                                                                   // 2830\n                $(this.node, {transform: this.matrix});                                                                // 2831\n            }                                                                                                          // 2832\n        }                                                                                                              // 2833\n                                                                                                                       // 2834\n        return this;                                                                                                   // 2835\n    };                                                                                                                 // 2836\n    /*\\\n     * Element.parent                                                                                                  // 2838\n     [ method ]                                                                                                        // 2839\n     **                                                                                                                // 2840\n     * Returns the element's parent                                                                                    // 2841\n     **                                                                                                                // 2842\n     = (Element) the parent element                                                                                    // 2843\n    \\*/                                                                                                                // 2844\n    elproto.parent = function () {                                                                                     // 2845\n        return wrap(this.node.parentNode);                                                                             // 2846\n    };                                                                                                                 // 2847\n    /*\\\n     * Element.append                                                                                                  // 2849\n     [ method ]                                                                                                        // 2850\n     **                                                                                                                // 2851\n     * Appends the given element to current one                                                                        // 2852\n     **                                                                                                                // 2853\n     - el (Element|Set) element to append                                                                              // 2854\n     = (Element) the parent element                                                                                    // 2855\n    \\*/                                                                                                                // 2856\n    /*\\\n     * Element.add                                                                                                     // 2858\n     [ method ]                                                                                                        // 2859\n     **                                                                                                                // 2860\n     * See @Element.append                                                                                             // 2861\n    \\*/                                                                                                                // 2862\n    elproto.append = elproto.add = function (el) {                                                                     // 2863\n        if (el) {                                                                                                      // 2864\n            if (el.type == \"set\") {                                                                                    // 2865\n                var it = this;                                                                                         // 2866\n                el.forEach(function (el) {                                                                             // 2867\n                    it.add(el);                                                                                        // 2868\n                });                                                                                                    // 2869\n                return this;                                                                                           // 2870\n            }                                                                                                          // 2871\n            el = wrap(el);                                                                                             // 2872\n            this.node.appendChild(el.node);                                                                            // 2873\n            el.paper = this.paper;                                                                                     // 2874\n        }                                                                                                              // 2875\n        return this;                                                                                                   // 2876\n    };                                                                                                                 // 2877\n    /*\\\n     * Element.appendTo                                                                                                // 2879\n     [ method ]                                                                                                        // 2880\n     **                                                                                                                // 2881\n     * Appends the current element to the given one                                                                    // 2882\n     **                                                                                                                // 2883\n     - el (Element) parent element to append to                                                                        // 2884\n     = (Element) the child element                                                                                     // 2885\n    \\*/                                                                                                                // 2886\n    elproto.appendTo = function (el) {                                                                                 // 2887\n        if (el) {                                                                                                      // 2888\n            el = wrap(el);                                                                                             // 2889\n            el.append(this);                                                                                           // 2890\n        }                                                                                                              // 2891\n        return this;                                                                                                   // 2892\n    };                                                                                                                 // 2893\n    /*\\\n     * Element.prepend                                                                                                 // 2895\n     [ method ]                                                                                                        // 2896\n     **                                                                                                                // 2897\n     * Prepends the given element to the current one                                                                   // 2898\n     **                                                                                                                // 2899\n     - el (Element) element to prepend                                                                                 // 2900\n     = (Element) the parent element                                                                                    // 2901\n    \\*/                                                                                                                // 2902\n    elproto.prepend = function (el) {                                                                                  // 2903\n        if (el) {                                                                                                      // 2904\n            if (el.type == \"set\") {                                                                                    // 2905\n                var it = this,                                                                                         // 2906\n                    first;                                                                                             // 2907\n                el.forEach(function (el) {                                                                             // 2908\n                    if (first) {                                                                                       // 2909\n                        first.after(el);                                                                               // 2910\n                    } else {                                                                                           // 2911\n                        it.prepend(el);                                                                                // 2912\n                    }                                                                                                  // 2913\n                    first = el;                                                                                        // 2914\n                });                                                                                                    // 2915\n                return this;                                                                                           // 2916\n            }                                                                                                          // 2917\n            el = wrap(el);                                                                                             // 2918\n            var parent = el.parent();                                                                                  // 2919\n            this.node.insertBefore(el.node, this.node.firstChild);                                                     // 2920\n            this.add && this.add();                                                                                    // 2921\n            el.paper = this.paper;                                                                                     // 2922\n            this.parent() && this.parent().add();                                                                      // 2923\n            parent && parent.add();                                                                                    // 2924\n        }                                                                                                              // 2925\n        return this;                                                                                                   // 2926\n    };                                                                                                                 // 2927\n    /*\\\n     * Element.prependTo                                                                                               // 2929\n     [ method ]                                                                                                        // 2930\n     **                                                                                                                // 2931\n     * Prepends the current element to the given one                                                                   // 2932\n     **                                                                                                                // 2933\n     - el (Element) parent element to prepend to                                                                       // 2934\n     = (Element) the child element                                                                                     // 2935\n    \\*/                                                                                                                // 2936\n    elproto.prependTo = function (el) {                                                                                // 2937\n        el = wrap(el);                                                                                                 // 2938\n        el.prepend(this);                                                                                              // 2939\n        return this;                                                                                                   // 2940\n    };                                                                                                                 // 2941\n    /*\\\n     * Element.before                                                                                                  // 2943\n     [ method ]                                                                                                        // 2944\n     **                                                                                                                // 2945\n     * Inserts given element before the current one                                                                    // 2946\n     **                                                                                                                // 2947\n     - el (Element) element to insert                                                                                  // 2948\n     = (Element) the parent element                                                                                    // 2949\n    \\*/                                                                                                                // 2950\n    elproto.before = function (el) {                                                                                   // 2951\n        if (el.type == \"set\") {                                                                                        // 2952\n            var it = this;                                                                                             // 2953\n            el.forEach(function (el) {                                                                                 // 2954\n                var parent = el.parent();                                                                              // 2955\n                it.node.parentNode.insertBefore(el.node, it.node);                                                     // 2956\n                parent && parent.add();                                                                                // 2957\n            });                                                                                                        // 2958\n            this.parent().add();                                                                                       // 2959\n            return this;                                                                                               // 2960\n        }                                                                                                              // 2961\n        el = wrap(el);                                                                                                 // 2962\n        var parent = el.parent();                                                                                      // 2963\n        this.node.parentNode.insertBefore(el.node, this.node);                                                         // 2964\n        this.parent() && this.parent().add();                                                                          // 2965\n        parent && parent.add();                                                                                        // 2966\n        el.paper = this.paper;                                                                                         // 2967\n        return this;                                                                                                   // 2968\n    };                                                                                                                 // 2969\n    /*\\\n     * Element.after                                                                                                   // 2971\n     [ method ]                                                                                                        // 2972\n     **                                                                                                                // 2973\n     * Inserts given element after the current one                                                                     // 2974\n     **                                                                                                                // 2975\n     - el (Element) element to insert                                                                                  // 2976\n     = (Element) the parent element                                                                                    // 2977\n    \\*/                                                                                                                // 2978\n    elproto.after = function (el) {                                                                                    // 2979\n        el = wrap(el);                                                                                                 // 2980\n        var parent = el.parent();                                                                                      // 2981\n        if (this.node.nextSibling) {                                                                                   // 2982\n            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);                                         // 2983\n        } else {                                                                                                       // 2984\n            this.node.parentNode.appendChild(el.node);                                                                 // 2985\n        }                                                                                                              // 2986\n        this.parent() && this.parent().add();                                                                          // 2987\n        parent && parent.add();                                                                                        // 2988\n        el.paper = this.paper;                                                                                         // 2989\n        return this;                                                                                                   // 2990\n    };                                                                                                                 // 2991\n    /*\\\n     * Element.insertBefore                                                                                            // 2993\n     [ method ]                                                                                                        // 2994\n     **                                                                                                                // 2995\n     * Inserts the element after the given one                                                                         // 2996\n     **                                                                                                                // 2997\n     - el (Element) element next to whom insert to                                                                     // 2998\n     = (Element) the parent element                                                                                    // 2999\n    \\*/                                                                                                                // 3000\n    elproto.insertBefore = function (el) {                                                                             // 3001\n        el = wrap(el);                                                                                                 // 3002\n        var parent = this.parent();                                                                                    // 3003\n        el.node.parentNode.insertBefore(this.node, el.node);                                                           // 3004\n        this.paper = el.paper;                                                                                         // 3005\n        parent && parent.add();                                                                                        // 3006\n        el.parent() && el.parent().add();                                                                              // 3007\n        return this;                                                                                                   // 3008\n    };                                                                                                                 // 3009\n    /*\\\n     * Element.insertAfter                                                                                             // 3011\n     [ method ]                                                                                                        // 3012\n     **                                                                                                                // 3013\n     * Inserts the element after the given one                                                                         // 3014\n     **                                                                                                                // 3015\n     - el (Element) element next to whom insert to                                                                     // 3016\n     = (Element) the parent element                                                                                    // 3017\n    \\*/                                                                                                                // 3018\n    elproto.insertAfter = function (el) {                                                                              // 3019\n        el = wrap(el);                                                                                                 // 3020\n        var parent = this.parent();                                                                                    // 3021\n        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);                                               // 3022\n        this.paper = el.paper;                                                                                         // 3023\n        parent && parent.add();                                                                                        // 3024\n        el.parent() && el.parent().add();                                                                              // 3025\n        return this;                                                                                                   // 3026\n    };                                                                                                                 // 3027\n    /*\\\n     * Element.remove                                                                                                  // 3029\n     [ method ]                                                                                                        // 3030\n     **                                                                                                                // 3031\n     * Removes element from the DOM                                                                                    // 3032\n     = (Element) the detached element                                                                                  // 3033\n    \\*/                                                                                                                // 3034\n    elproto.remove = function () {                                                                                     // 3035\n        var parent = this.parent();                                                                                    // 3036\n        this.node.parentNode && this.node.parentNode.removeChild(this.node);                                           // 3037\n        delete this.paper;                                                                                             // 3038\n        this.removed = true;                                                                                           // 3039\n        parent && parent.add();                                                                                        // 3040\n        return this;                                                                                                   // 3041\n    };                                                                                                                 // 3042\n    /*\\\n     * Element.select                                                                                                  // 3044\n     [ method ]                                                                                                        // 3045\n     **                                                                                                                // 3046\n     * Gathers the nested @Element matching the given set of CSS selectors                                             // 3047\n     **                                                                                                                // 3048\n     - query (string) CSS selector                                                                                     // 3049\n     = (Element) result of query selection                                                                             // 3050\n    \\*/                                                                                                                // 3051\n    elproto.select = function (query) {                                                                                // 3052\n        return wrap(this.node.querySelector(query));                                                                   // 3053\n    };                                                                                                                 // 3054\n    /*\\\n     * Element.selectAll                                                                                               // 3056\n     [ method ]                                                                                                        // 3057\n     **                                                                                                                // 3058\n     * Gathers nested @Element objects matching the given set of CSS selectors                                         // 3059\n     **                                                                                                                // 3060\n     - query (string) CSS selector                                                                                     // 3061\n     = (Set|array) result of query selection                                                                           // 3062\n    \\*/                                                                                                                // 3063\n    elproto.selectAll = function (query) {                                                                             // 3064\n        var nodelist = this.node.querySelectorAll(query),                                                              // 3065\n            set = (Snap.set || Array)();                                                                               // 3066\n        for (var i = 0; i < nodelist.length; i++) {                                                                    // 3067\n            set.push(wrap(nodelist[i]));                                                                               // 3068\n        }                                                                                                              // 3069\n        return set;                                                                                                    // 3070\n    };                                                                                                                 // 3071\n    /*\\\n     * Element.asPX                                                                                                    // 3073\n     [ method ]                                                                                                        // 3074\n     **                                                                                                                // 3075\n     * Returns given attribute of the element as a `px` value (not %, em, etc.)                                        // 3076\n     **                                                                                                                // 3077\n     - attr (string) attribute name                                                                                    // 3078\n     - value (string) #optional attribute value                                                                        // 3079\n     = (Element) result of query selection                                                                             // 3080\n    \\*/                                                                                                                // 3081\n    elproto.asPX = function (attr, value) {                                                                            // 3082\n        if (value == null) {                                                                                           // 3083\n            value = this.attr(attr);                                                                                   // 3084\n        }                                                                                                              // 3085\n        return +unit2px(this, attr, value);                                                                            // 3086\n    };                                                                                                                 // 3087\n    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n    /*\\\n     * Element.use                                                                                                     // 3090\n     [ method ]                                                                                                        // 3091\n     **                                                                                                                // 3092\n     * Creates a `<use>` element linked to the current element                                                         // 3093\n     **                                                                                                                // 3094\n     = (Element) the `<use>` element                                                                                   // 3095\n    \\*/                                                                                                                // 3096\n    elproto.use = function () {                                                                                        // 3097\n        var use,                                                                                                       // 3098\n            id = this.node.id;                                                                                         // 3099\n        if (!id) {                                                                                                     // 3100\n            id = this.id;                                                                                              // 3101\n            $(this.node, {                                                                                             // 3102\n                id: id                                                                                                 // 3103\n            });                                                                                                        // 3104\n        }                                                                                                              // 3105\n        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||                                          // 3106\n            this.type == \"pattern\") {                                                                                  // 3107\n            use = make(this.type, this.node.parentNode);                                                               // 3108\n        } else {                                                                                                       // 3109\n            use = make(\"use\", this.node.parentNode);                                                                   // 3110\n        }                                                                                                              // 3111\n        $(use.node, {                                                                                                  // 3112\n            \"xlink:href\": \"#\" + id                                                                                     // 3113\n        });                                                                                                            // 3114\n        use.original = this;                                                                                           // 3115\n        return use;                                                                                                    // 3116\n    };                                                                                                                 // 3117\n    function fixids(el) {                                                                                              // 3118\n        var els = el.selectAll(\"*\"),                                                                                   // 3119\n            it,                                                                                                        // 3120\n            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,                                                                       // 3121\n            ids = [],                                                                                                  // 3122\n            uses = {};                                                                                                 // 3123\n        function urltest(it, name) {                                                                                   // 3124\n            var val = $(it.node, name);                                                                                // 3125\n            val = val && val.match(url);                                                                               // 3126\n            val = val && val[2];                                                                                       // 3127\n            if (val && val.charAt() == \"#\") {                                                                          // 3128\n                val = val.substring(1);                                                                                // 3129\n            } else {                                                                                                   // 3130\n                return;                                                                                                // 3131\n            }                                                                                                          // 3132\n            if (val) {                                                                                                 // 3133\n                uses[val] = (uses[val] || []).concat(function (id) {                                                   // 3134\n                    var attr = {};                                                                                     // 3135\n                    attr[name] = URL(id);                                                                              // 3136\n                    $(it.node, attr);                                                                                  // 3137\n                });                                                                                                    // 3138\n            }                                                                                                          // 3139\n        }                                                                                                              // 3140\n        function linktest(it) {                                                                                        // 3141\n            var val = $(it.node, \"xlink:href\");                                                                        // 3142\n            if (val && val.charAt() == \"#\") {                                                                          // 3143\n                val = val.substring(1);                                                                                // 3144\n            } else {                                                                                                   // 3145\n                return;                                                                                                // 3146\n            }                                                                                                          // 3147\n            if (val) {                                                                                                 // 3148\n                uses[val] = (uses[val] || []).concat(function (id) {                                                   // 3149\n                    it.attr(\"xlink:href\", \"#\" + id);                                                                   // 3150\n                });                                                                                                    // 3151\n            }                                                                                                          // 3152\n        }                                                                                                              // 3153\n        for (var i = 0, ii = els.length; i < ii; i++) {                                                                // 3154\n            it = els[i];                                                                                               // 3155\n            urltest(it, \"fill\");                                                                                       // 3156\n            urltest(it, \"stroke\");                                                                                     // 3157\n            urltest(it, \"filter\");                                                                                     // 3158\n            urltest(it, \"mask\");                                                                                       // 3159\n            urltest(it, \"clip-path\");                                                                                  // 3160\n            linktest(it);                                                                                              // 3161\n            var oldid = $(it.node, \"id\");                                                                              // 3162\n            if (oldid) {                                                                                               // 3163\n                $(it.node, {id: it.id});                                                                               // 3164\n                ids.push({                                                                                             // 3165\n                    old: oldid,                                                                                        // 3166\n                    id: it.id                                                                                          // 3167\n                });                                                                                                    // 3168\n            }                                                                                                          // 3169\n        }                                                                                                              // 3170\n        for (i = 0, ii = ids.length; i < ii; i++) {                                                                    // 3171\n            var fs = uses[ids[i].old];                                                                                 // 3172\n            if (fs) {                                                                                                  // 3173\n                for (var j = 0, jj = fs.length; j < jj; j++) {                                                         // 3174\n                    fs[j](ids[i].id);                                                                                  // 3175\n                }                                                                                                      // 3176\n            }                                                                                                          // 3177\n        }                                                                                                              // 3178\n    }                                                                                                                  // 3179\n    /*\\\n     * Element.clone                                                                                                   // 3181\n     [ method ]                                                                                                        // 3182\n     **                                                                                                                // 3183\n     * Creates a clone of the element and inserts it after the element                                                 // 3184\n     **                                                                                                                // 3185\n     = (Element) the clone                                                                                             // 3186\n    \\*/                                                                                                                // 3187\n    elproto.clone = function () {                                                                                      // 3188\n        var clone = wrap(this.node.cloneNode(true));                                                                   // 3189\n        if ($(clone.node, \"id\")) {                                                                                     // 3190\n            $(clone.node, {id: clone.id});                                                                             // 3191\n        }                                                                                                              // 3192\n        fixids(clone);                                                                                                 // 3193\n        clone.insertAfter(this);                                                                                       // 3194\n        return clone;                                                                                                  // 3195\n    };                                                                                                                 // 3196\n    /*\\\n     * Element.toDefs                                                                                                  // 3198\n     [ method ]                                                                                                        // 3199\n     **                                                                                                                // 3200\n     * Moves element to the shared `<defs>` area                                                                       // 3201\n     **                                                                                                                // 3202\n     = (Element) the element                                                                                           // 3203\n    \\*/                                                                                                                // 3204\n    elproto.toDefs = function () {                                                                                     // 3205\n        var defs = getSomeDefs(this);                                                                                  // 3206\n        defs.appendChild(this.node);                                                                                   // 3207\n        return this;                                                                                                   // 3208\n    };                                                                                                                 // 3209\n    /*\\\n     * Element.toPattern                                                                                               // 3211\n     [ method ]                                                                                                        // 3212\n     **                                                                                                                // 3213\n     * Creates a `<pattern>` element from the current element                                                          // 3214\n     **                                                                                                                // 3215\n     * To create a pattern you have to specify the pattern rect:                                                       // 3216\n     - x (string|number)                                                                                               // 3217\n     - y (string|number)                                                                                               // 3218\n     - width (string|number)                                                                                           // 3219\n     - height (string|number)                                                                                          // 3220\n     = (Element) the `<pattern>` element                                                                               // 3221\n     * You can use pattern later on as an argument for `fill` attribute:                                               // 3222\n     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({                                                    // 3223\n     |         fill: \"none\",                                                                                           // 3224\n     |         stroke: \"#bada55\",                                                                                      // 3225\n     |         strokeWidth: 5                                                                                          // 3226\n     |     }).pattern(0, 0, 10, 10),                                                                                   // 3227\n     |     c = paper.circle(200, 200, 100);                                                                            // 3228\n     | c.attr({                                                                                                        // 3229\n     |     fill: p                                                                                                     // 3230\n     | });                                                                                                             // 3231\n    \\*/                                                                                                                // 3232\n    elproto.pattern = elproto.toPattern = function (x, y, width, height) {                                             // 3233\n        var p = make(\"pattern\", getSomeDefs(this));                                                                    // 3234\n        if (x == null) {                                                                                               // 3235\n            x = this.getBBox();                                                                                        // 3236\n        }                                                                                                              // 3237\n        if (is(x, \"object\") && \"x\" in x) {                                                                             // 3238\n            y = x.y;                                                                                                   // 3239\n            width = x.width;                                                                                           // 3240\n            height = x.height;                                                                                         // 3241\n            x = x.x;                                                                                                   // 3242\n        }                                                                                                              // 3243\n        $(p.node, {                                                                                                    // 3244\n            x: x,                                                                                                      // 3245\n            y: y,                                                                                                      // 3246\n            width: width,                                                                                              // 3247\n            height: height,                                                                                            // 3248\n            patternUnits: \"userSpaceOnUse\",                                                                            // 3249\n            id: p.id,                                                                                                  // 3250\n            viewBox: [x, y, width, height].join(\" \")                                                                   // 3251\n        });                                                                                                            // 3252\n        p.node.appendChild(this.node);                                                                                 // 3253\n        return p;                                                                                                      // 3254\n    };                                                                                                                 // 3255\n// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n    /*\\\n     * Element.marker                                                                                                  // 3259\n     [ method ]                                                                                                        // 3260\n     **                                                                                                                // 3261\n     * Creates a `<marker>` element from the current element                                                           // 3262\n     **                                                                                                                // 3263\n     * To create a marker you have to specify the bounding rect and reference point:                                   // 3264\n     - x (number)                                                                                                      // 3265\n     - y (number)                                                                                                      // 3266\n     - width (number)                                                                                                  // 3267\n     - height (number)                                                                                                 // 3268\n     - refX (number)                                                                                                   // 3269\n     - refY (number)                                                                                                   // 3270\n     = (Element) the `<marker>` element                                                                                // 3271\n     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n    \\*/                                                                                                                // 3273\n    // TODO add usage for markers                                                                                      // 3274\n    elproto.marker = function (x, y, width, height, refX, refY) {                                                      // 3275\n        var p = make(\"marker\", getSomeDefs(this));                                                                     // 3276\n        if (x == null) {                                                                                               // 3277\n            x = this.getBBox();                                                                                        // 3278\n        }                                                                                                              // 3279\n        if (is(x, \"object\") && \"x\" in x) {                                                                             // 3280\n            y = x.y;                                                                                                   // 3281\n            width = x.width;                                                                                           // 3282\n            height = x.height;                                                                                         // 3283\n            refX = x.refX || x.cx;                                                                                     // 3284\n            refY = x.refY || x.cy;                                                                                     // 3285\n            x = x.x;                                                                                                   // 3286\n        }                                                                                                              // 3287\n        $(p.node, {                                                                                                    // 3288\n            viewBox: [x, y, width, height].join(\" \"),                                                                  // 3289\n            markerWidth: width,                                                                                        // 3290\n            markerHeight: height,                                                                                      // 3291\n            orient: \"auto\",                                                                                            // 3292\n            refX: refX || 0,                                                                                           // 3293\n            refY: refY || 0,                                                                                           // 3294\n            id: p.id                                                                                                   // 3295\n        });                                                                                                            // 3296\n        p.node.appendChild(this.node);                                                                                 // 3297\n        return p;                                                                                                      // 3298\n    };                                                                                                                 // 3299\n    // animation                                                                                                       // 3300\n    function slice(from, to, f) {                                                                                      // 3301\n        return function (arr) {                                                                                        // 3302\n            var res = arr.slice(from, to);                                                                             // 3303\n            if (res.length == 1) {                                                                                     // 3304\n                res = res[0];                                                                                          // 3305\n            }                                                                                                          // 3306\n            return f ? f(res) : res;                                                                                   // 3307\n        };                                                                                                             // 3308\n    }                                                                                                                  // 3309\n    var Animation = function (attr, ms, easing, callback) {                                                            // 3310\n        if (typeof easing == \"function\" && !easing.length) {                                                           // 3311\n            callback = easing;                                                                                         // 3312\n            easing = mina.linear;                                                                                      // 3313\n        }                                                                                                              // 3314\n        this.attr = attr;                                                                                              // 3315\n        this.dur = ms;                                                                                                 // 3316\n        easing && (this.easing = easing);                                                                              // 3317\n        callback && (this.callback = callback);                                                                        // 3318\n    };                                                                                                                 // 3319\n    Snap._.Animation = Animation;                                                                                      // 3320\n    /*\\\n     * Snap.animation                                                                                                  // 3322\n     [ method ]                                                                                                        // 3323\n     **                                                                                                                // 3324\n     * Creates an animation object                                                                                     // 3325\n     **                                                                                                                // 3326\n     - attr (object) attributes of final destination                                                                   // 3327\n     - duration (number) duration of the animation, in milliseconds                                                    // 3328\n     - easing (function) #optional one of easing functions of @mina or custom one                                      // 3329\n     - callback (function) #optional callback function that fires when animation ends                                  // 3330\n     = (object) animation object                                                                                       // 3331\n    \\*/                                                                                                                // 3332\n    Snap.animation = function (attr, ms, easing, callback) {                                                           // 3333\n        return new Animation(attr, ms, easing, callback);                                                              // 3334\n    };                                                                                                                 // 3335\n    /*\\\n     * Element.inAnim                                                                                                  // 3337\n     [ method ]                                                                                                        // 3338\n     **                                                                                                                // 3339\n     * Returns a set of animations that may be able to manipulate the current element                                  // 3340\n     **                                                                                                                // 3341\n     = (object) in format:                                                                                             // 3342\n     o {                                                                                                               // 3343\n     o     anim (object) animation object,                                                                             // 3344\n     o     mina (object) @mina object,                                                                                 // 3345\n     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,                     // 3346\n     o     status (function) gets or sets the status of the animation,                                                 // 3347\n     o     stop (function) stops the animation                                                                         // 3348\n     o }                                                                                                               // 3349\n    \\*/                                                                                                                // 3350\n    elproto.inAnim = function () {                                                                                     // 3351\n        var el = this,                                                                                                 // 3352\n            res = [];                                                                                                  // 3353\n        for (var id in el.anims) if (el.anims[has](id)) {                                                              // 3354\n            (function (a) {                                                                                            // 3355\n                res.push({                                                                                             // 3356\n                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),                                       // 3357\n                    mina: a,                                                                                           // 3358\n                    curStatus: a.status(),                                                                             // 3359\n                    status: function (val) {                                                                           // 3360\n                        return a.status(val);                                                                          // 3361\n                    },                                                                                                 // 3362\n                    stop: function () {                                                                                // 3363\n                        a.stop();                                                                                      // 3364\n                    }                                                                                                  // 3365\n                });                                                                                                    // 3366\n            }(el.anims[id]));                                                                                          // 3367\n        }                                                                                                              // 3368\n        return res;                                                                                                    // 3369\n    };                                                                                                                 // 3370\n    /*\\\n     * Snap.animate                                                                                                    // 3372\n     [ method ]                                                                                                        // 3373\n     **                                                                                                                // 3374\n     * Runs generic animation of one number into another with a caring function                                        // 3375\n     **                                                                                                                // 3376\n     - from (number|array) number or array of numbers                                                                  // 3377\n     - to (number|array) number or array of numbers                                                                    // 3378\n     - setter (function) caring function that accepts one number argument                                              // 3379\n     - duration (number) duration, in milliseconds                                                                     // 3380\n     - easing (function) #optional easing function from @mina or custom                                                // 3381\n     - callback (function) #optional callback function to execute when animation ends                                  // 3382\n     = (object) animation object in @mina format                                                                       // 3383\n     o {                                                                                                               // 3384\n     o     id (string) animation id, consider it read-only,                                                            // 3385\n     o     duration (function) gets or sets the duration of the animation,                                             // 3386\n     o     easing (function) easing,                                                                                   // 3387\n     o     speed (function) gets or sets the speed of the animation,                                                   // 3388\n     o     status (function) gets or sets the status of the animation,                                                 // 3389\n     o     stop (function) stops the animation                                                                         // 3390\n     o }                                                                                                               // 3391\n     | var rect = Snap().rect(0, 0, 10, 10);                                                                           // 3392\n     | Snap.animate(0, 10, function (val) {                                                                            // 3393\n     |     rect.attr({                                                                                                 // 3394\n     |         x: val                                                                                                  // 3395\n     |     });                                                                                                         // 3396\n     | }, 1000);                                                                                                       // 3397\n     | // in given context is equivalent to                                                                            // 3398\n     | rect.animate({x: 10}, 1000);                                                                                    // 3399\n    \\*/                                                                                                                // 3400\n    Snap.animate = function (from, to, setter, ms, easing, callback) {                                                 // 3401\n        if (typeof easing == \"function\" && !easing.length) {                                                           // 3402\n            callback = easing;                                                                                         // 3403\n            easing = mina.linear;                                                                                      // 3404\n        }                                                                                                              // 3405\n        var now = mina.time(),                                                                                         // 3406\n            anim = mina(from, to, now, now + ms, mina.time, setter, easing);                                           // 3407\n        callback && eve.once(\"mina.finish.\" + anim.id, callback);                                                      // 3408\n        return anim;                                                                                                   // 3409\n    };                                                                                                                 // 3410\n    /*\\\n     * Element.stop                                                                                                    // 3412\n     [ method ]                                                                                                        // 3413\n     **                                                                                                                // 3414\n     * Stops all the animations for the current element                                                                // 3415\n     **                                                                                                                // 3416\n     = (Element) the current element                                                                                   // 3417\n    \\*/                                                                                                                // 3418\n    elproto.stop = function () {                                                                                       // 3419\n        var anims = this.inAnim();                                                                                     // 3420\n        for (var i = 0, ii = anims.length; i < ii; i++) {                                                              // 3421\n            anims[i].stop();                                                                                           // 3422\n        }                                                                                                              // 3423\n        return this;                                                                                                   // 3424\n    };                                                                                                                 // 3425\n    /*\\\n     * Element.animate                                                                                                 // 3427\n     [ method ]                                                                                                        // 3428\n     **                                                                                                                // 3429\n     * Animates the given attributes of the element                                                                    // 3430\n     **                                                                                                                // 3431\n     - attrs (object) key-value pairs of destination attributes                                                        // 3432\n     - duration (number) duration of the animation in milliseconds                                                     // 3433\n     - easing (function) #optional easing function from @mina or custom                                                // 3434\n     - callback (function) #optional callback function that executes when the animation ends                           // 3435\n     = (Element) the current element                                                                                   // 3436\n    \\*/                                                                                                                // 3437\n    elproto.animate = function (attrs, ms, easing, callback) {                                                         // 3438\n        if (typeof easing == \"function\" && !easing.length) {                                                           // 3439\n            callback = easing;                                                                                         // 3440\n            easing = mina.linear;                                                                                      // 3441\n        }                                                                                                              // 3442\n        if (attrs instanceof Animation) {                                                                              // 3443\n            callback = attrs.callback;                                                                                 // 3444\n            easing = attrs.easing;                                                                                     // 3445\n            ms = attrs.dur;                                                                                            // 3446\n            attrs = attrs.attr;                                                                                        // 3447\n        }                                                                                                              // 3448\n        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,                                                        // 3449\n            el = this;                                                                                                 // 3450\n        for (var key in attrs) if (attrs[has](key)) {                                                                  // 3451\n            if (el.equal) {                                                                                            // 3452\n                eq = el.equal(key, Str(attrs[key]));                                                                   // 3453\n                from = eq.from;                                                                                        // 3454\n                to = eq.to;                                                                                            // 3455\n                f = eq.f;                                                                                              // 3456\n            } else {                                                                                                   // 3457\n                from = +el.attr(key);                                                                                  // 3458\n                to = +attrs[key];                                                                                      // 3459\n            }                                                                                                          // 3460\n            var len = is(from, \"array\") ? from.length : 1;                                                             // 3461\n            keys[key] = slice(fkeys.length, fkeys.length + len, f);                                                    // 3462\n            fkeys = fkeys.concat(from);                                                                                // 3463\n            tkeys = tkeys.concat(to);                                                                                  // 3464\n        }                                                                                                              // 3465\n        var now = mina.time(),                                                                                         // 3466\n            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {                                       // 3467\n                var attr = {};                                                                                         // 3468\n                for (var key in keys) if (keys[has](key)) {                                                            // 3469\n                    attr[key] = keys[key](val);                                                                        // 3470\n                }                                                                                                      // 3471\n                el.attr(attr);                                                                                         // 3472\n            }, easing);                                                                                                // 3473\n        el.anims[anim.id] = anim;                                                                                      // 3474\n        anim._attrs = attrs;                                                                                           // 3475\n        anim._callback = callback;                                                                                     // 3476\n        eve(\"snap.animcreated.\" + el.id, anim);                                                                        // 3477\n        eve.once(\"mina.finish.\" + anim.id, function () {                                                               // 3478\n            delete el.anims[anim.id];                                                                                  // 3479\n            callback && callback.call(el);                                                                             // 3480\n        });                                                                                                            // 3481\n        eve.once(\"mina.stop.\" + anim.id, function () {                                                                 // 3482\n            delete el.anims[anim.id];                                                                                  // 3483\n        });                                                                                                            // 3484\n        return el;                                                                                                     // 3485\n    };                                                                                                                 // 3486\n    var eldata = {};                                                                                                   // 3487\n    /*\\\n     * Element.data                                                                                                    // 3489\n     [ method ]                                                                                                        // 3490\n     **                                                                                                                // 3491\n     * Adds or retrieves given value associated with given key. (Don’t confuse                                         // 3492\n     * with `data-` attributes)                                                                                        // 3493\n     *                                                                                                                 // 3494\n     * See also @Element.removeData                                                                                    // 3495\n     - key (string) key to store data                                                                                  // 3496\n     - value (any) #optional value to store                                                                            // 3497\n     = (object) @Element                                                                                               // 3498\n     * or, if value is not specified:                                                                                  // 3499\n     = (any) value                                                                                                     // 3500\n     > Usage                                                                                                           // 3501\n     | for (var i = 0, i < 5, i++) {                                                                                   // 3502\n     |     paper.circle(10 + 15 * i, 10, 10)                                                                           // 3503\n     |          .attr({fill: \"#000\"})                                                                                  // 3504\n     |          .data(\"i\", i)                                                                                          // 3505\n     |          .click(function () {                                                                                   // 3506\n     |             alert(this.data(\"i\"));                                                                              // 3507\n     |          });                                                                                                    // 3508\n     | }                                                                                                               // 3509\n    \\*/                                                                                                                // 3510\n    elproto.data = function (key, value) {                                                                             // 3511\n        var data = eldata[this.id] = eldata[this.id] || {};                                                            // 3512\n        if (arguments.length == 0){                                                                                    // 3513\n            eve(\"snap.data.get.\" + this.id, this, data, null);                                                         // 3514\n            return data;                                                                                               // 3515\n        }                                                                                                              // 3516\n        if (arguments.length == 1) {                                                                                   // 3517\n            if (Snap.is(key, \"object\")) {                                                                              // 3518\n                for (var i in key) if (key[has](i)) {                                                                  // 3519\n                    this.data(i, key[i]);                                                                              // 3520\n                }                                                                                                      // 3521\n                return this;                                                                                           // 3522\n            }                                                                                                          // 3523\n            eve(\"snap.data.get.\" + this.id, this, data[key], key);                                                     // 3524\n            return data[key];                                                                                          // 3525\n        }                                                                                                              // 3526\n        data[key] = value;                                                                                             // 3527\n        eve(\"snap.data.set.\" + this.id, this, value, key);                                                             // 3528\n        return this;                                                                                                   // 3529\n    };                                                                                                                 // 3530\n    /*\\\n     * Element.removeData                                                                                              // 3532\n     [ method ]                                                                                                        // 3533\n     **                                                                                                                // 3534\n     * Removes value associated with an element by given key.                                                          // 3535\n     * If key is not provided, removes all the data of the element.                                                    // 3536\n     - key (string) #optional key                                                                                      // 3537\n     = (object) @Element                                                                                               // 3538\n    \\*/                                                                                                                // 3539\n    elproto.removeData = function (key) {                                                                              // 3540\n        if (key == null) {                                                                                             // 3541\n            eldata[this.id] = {};                                                                                      // 3542\n        } else {                                                                                                       // 3543\n            eldata[this.id] && delete eldata[this.id][key];                                                            // 3544\n        }                                                                                                              // 3545\n        return this;                                                                                                   // 3546\n    };                                                                                                                 // 3547\n    /*\\\n     * Element.outerSVG                                                                                                // 3549\n     [ method ]                                                                                                        // 3550\n     **                                                                                                                // 3551\n     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.                                             // 3552\n     *                                                                                                                 // 3553\n     * See also @Element.innerSVG                                                                                      // 3554\n     = (string) SVG code for the element                                                                               // 3555\n    \\*/                                                                                                                // 3556\n    /*\\\n     * Element.toString                                                                                                // 3558\n     [ method ]                                                                                                        // 3559\n     **                                                                                                                // 3560\n     * See @Element.outerSVG                                                                                           // 3561\n    \\*/                                                                                                                // 3562\n    elproto.outerSVG = elproto.toString = toString(1);                                                                 // 3563\n    /*\\\n     * Element.innerSVG                                                                                                // 3565\n     [ method ]                                                                                                        // 3566\n     **                                                                                                                // 3567\n     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`                                   // 3568\n     = (string) SVG code for the element                                                                               // 3569\n    \\*/                                                                                                                // 3570\n    elproto.innerSVG = toString();                                                                                     // 3571\n    function toString(type) {                                                                                          // 3572\n        return function () {                                                                                           // 3573\n            var res = type ? \"<\" + this.type : \"\",                                                                     // 3574\n                attr = this.node.attributes,                                                                           // 3575\n                chld = this.node.childNodes;                                                                           // 3576\n            if (type) {                                                                                                // 3577\n                for (var i = 0, ii = attr.length; i < ii; i++) {                                                       // 3578\n                    res += \" \" + attr[i].name + '=\"' +                                                                 // 3579\n                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';                                                  // 3580\n                }                                                                                                      // 3581\n            }                                                                                                          // 3582\n            if (chld.length) {                                                                                         // 3583\n                type && (res += \">\");                                                                                  // 3584\n                for (i = 0, ii = chld.length; i < ii; i++) {                                                           // 3585\n                    if (chld[i].nodeType == 3) {                                                                       // 3586\n                        res += chld[i].nodeValue;                                                                      // 3587\n                    } else if (chld[i].nodeType == 1) {                                                                // 3588\n                        res += wrap(chld[i]).toString();                                                               // 3589\n                    }                                                                                                  // 3590\n                }                                                                                                      // 3591\n                type && (res += \"</\" + this.type + \">\");                                                               // 3592\n            } else {                                                                                                   // 3593\n                type && (res += \"/>\");                                                                                 // 3594\n            }                                                                                                          // 3595\n            return res;                                                                                                // 3596\n        };                                                                                                             // 3597\n    }                                                                                                                  // 3598\n    elproto.toDataURL = function () {                                                                                  // 3599\n        if (window && window.btoa) {                                                                                   // 3600\n            var bb = this.getBBox(),                                                                                   // 3601\n                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n                x: +bb.x.toFixed(3),                                                                                   // 3603\n                y: +bb.y.toFixed(3),                                                                                   // 3604\n                width: +bb.width.toFixed(3),                                                                           // 3605\n                height: +bb.height.toFixed(3),                                                                         // 3606\n                contents: this.outerSVG()                                                                              // 3607\n            });                                                                                                        // 3608\n            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));                             // 3609\n        }                                                                                                              // 3610\n    };                                                                                                                 // 3611\n    /*\\\n     * Fragment.select                                                                                                 // 3613\n     [ method ]                                                                                                        // 3614\n     **                                                                                                                // 3615\n     * See @Element.select                                                                                             // 3616\n    \\*/                                                                                                                // 3617\n    Fragment.prototype.select = elproto.select;                                                                        // 3618\n    /*\\\n     * Fragment.selectAll                                                                                              // 3620\n     [ method ]                                                                                                        // 3621\n     **                                                                                                                // 3622\n     * See @Element.selectAll                                                                                          // 3623\n    \\*/                                                                                                                // 3624\n    Fragment.prototype.selectAll = elproto.selectAll;                                                                  // 3625\n});                                                                                                                    // 3626\n                                                                                                                       // 3627\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 3628\n//                                                                                                                     // 3629\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 3630\n// you may not use this file except in compliance with the License.                                                    // 3631\n// You may obtain a copy of the License at                                                                             // 3632\n//                                                                                                                     // 3633\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3634\n//                                                                                                                     // 3635\n// Unless required by applicable law or agreed to in writing, software                                                 // 3636\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 3637\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3638\n// See the License for the specific language governing permissions and                                                 // 3639\n// limitations under the License.                                                                                      // 3640\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {                                                          // 3641\n    var objectToString = Object.prototype.toString,                                                                    // 3642\n        Str = String,                                                                                                  // 3643\n        math = Math,                                                                                                   // 3644\n        E = \"\";                                                                                                        // 3645\n    function Matrix(a, b, c, d, e, f) {                                                                                // 3646\n        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {                                             // 3647\n            this.a = a.a;                                                                                              // 3648\n            this.b = a.b;                                                                                              // 3649\n            this.c = a.c;                                                                                              // 3650\n            this.d = a.d;                                                                                              // 3651\n            this.e = a.e;                                                                                              // 3652\n            this.f = a.f;                                                                                              // 3653\n            return;                                                                                                    // 3654\n        }                                                                                                              // 3655\n        if (a != null) {                                                                                               // 3656\n            this.a = +a;                                                                                               // 3657\n            this.b = +b;                                                                                               // 3658\n            this.c = +c;                                                                                               // 3659\n            this.d = +d;                                                                                               // 3660\n            this.e = +e;                                                                                               // 3661\n            this.f = +f;                                                                                               // 3662\n        } else {                                                                                                       // 3663\n            this.a = 1;                                                                                                // 3664\n            this.b = 0;                                                                                                // 3665\n            this.c = 0;                                                                                                // 3666\n            this.d = 1;                                                                                                // 3667\n            this.e = 0;                                                                                                // 3668\n            this.f = 0;                                                                                                // 3669\n        }                                                                                                              // 3670\n    }                                                                                                                  // 3671\n    (function (matrixproto) {                                                                                          // 3672\n        /*\\\n         * Matrix.add                                                                                                  // 3674\n         [ method ]                                                                                                    // 3675\n         **                                                                                                            // 3676\n         * Adds the given matrix to existing one                                                                       // 3677\n         - a (number)                                                                                                  // 3678\n         - b (number)                                                                                                  // 3679\n         - c (number)                                                                                                  // 3680\n         - d (number)                                                                                                  // 3681\n         - e (number)                                                                                                  // 3682\n         - f (number)                                                                                                  // 3683\n         * or                                                                                                          // 3684\n         - matrix (object) @Matrix                                                                                     // 3685\n        \\*/                                                                                                            // 3686\n        matrixproto.add = function (a, b, c, d, e, f) {                                                                // 3687\n            var out = [[], [], []],                                                                                    // 3688\n                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],                                   // 3689\n                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],                                                            // 3690\n                x, y, z, res;                                                                                          // 3691\n                                                                                                                       // 3692\n            if (a && a instanceof Matrix) {                                                                            // 3693\n                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];                                                // 3694\n            }                                                                                                          // 3695\n                                                                                                                       // 3696\n            for (x = 0; x < 3; x++) {                                                                                  // 3697\n                for (y = 0; y < 3; y++) {                                                                              // 3698\n                    res = 0;                                                                                           // 3699\n                    for (z = 0; z < 3; z++) {                                                                          // 3700\n                        res += m[x][z] * matrix[z][y];                                                                 // 3701\n                    }                                                                                                  // 3702\n                    out[x][y] = res;                                                                                   // 3703\n                }                                                                                                      // 3704\n            }                                                                                                          // 3705\n            this.a = out[0][0];                                                                                        // 3706\n            this.b = out[1][0];                                                                                        // 3707\n            this.c = out[0][1];                                                                                        // 3708\n            this.d = out[1][1];                                                                                        // 3709\n            this.e = out[0][2];                                                                                        // 3710\n            this.f = out[1][2];                                                                                        // 3711\n            return this;                                                                                               // 3712\n        };                                                                                                             // 3713\n        /*\\\n         * Matrix.invert                                                                                               // 3715\n         [ method ]                                                                                                    // 3716\n         **                                                                                                            // 3717\n         * Returns an inverted version of the matrix                                                                   // 3718\n         = (object) @Matrix                                                                                            // 3719\n        \\*/                                                                                                            // 3720\n        matrixproto.invert = function () {                                                                             // 3721\n            var me = this,                                                                                             // 3722\n                x = me.a * me.d - me.b * me.c;                                                                         // 3723\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };                                                                                                             // 3725\n        /*\\\n         * Matrix.clone                                                                                                // 3727\n         [ method ]                                                                                                    // 3728\n         **                                                                                                            // 3729\n         * Returns a copy of the matrix                                                                                // 3730\n         = (object) @Matrix                                                                                            // 3731\n        \\*/                                                                                                            // 3732\n        matrixproto.clone = function () {                                                                              // 3733\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);                                         // 3734\n        };                                                                                                             // 3735\n        /*\\\n         * Matrix.translate                                                                                            // 3737\n         [ method ]                                                                                                    // 3738\n         **                                                                                                            // 3739\n         * Translate the matrix                                                                                        // 3740\n         - x (number) horizontal offset distance                                                                       // 3741\n         - y (number) vertical offset distance                                                                         // 3742\n        \\*/                                                                                                            // 3743\n        matrixproto.translate = function (x, y) {                                                                      // 3744\n            return this.add(1, 0, 0, 1, x, y);                                                                         // 3745\n        };                                                                                                             // 3746\n        /*\\\n         * Matrix.scale                                                                                                // 3748\n         [ method ]                                                                                                    // 3749\n         **                                                                                                            // 3750\n         * Scales the matrix                                                                                           // 3751\n         - x (number) amount to be scaled, with `1` resulting in no change                                             // 3752\n         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)         // 3753\n         - cx (number) #optional horizontal origin point from which to scale                                           // 3754\n         - cy (number) #optional vertical origin point from which to scale                                             // 3755\n         * Default cx, cy is the middle point of the element.                                                          // 3756\n        \\*/                                                                                                            // 3757\n        matrixproto.scale = function (x, y, cx, cy) {                                                                  // 3758\n            y == null && (y = x);                                                                                      // 3759\n            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);                                                                // 3760\n            this.add(x, 0, 0, y, 0, 0);                                                                                // 3761\n            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);                                                              // 3762\n            return this;                                                                                               // 3763\n        };                                                                                                             // 3764\n        /*\\\n         * Matrix.rotate                                                                                               // 3766\n         [ method ]                                                                                                    // 3767\n         **                                                                                                            // 3768\n         * Rotates the matrix                                                                                          // 3769\n         - a (number) angle of rotation, in degrees                                                                    // 3770\n         - x (number) horizontal origin point from which to rotate                                                     // 3771\n         - y (number) vertical origin point from which to rotate                                                       // 3772\n        \\*/                                                                                                            // 3773\n        matrixproto.rotate = function (a, x, y) {                                                                      // 3774\n            a = Snap.rad(a);                                                                                           // 3775\n            x = x || 0;                                                                                                // 3776\n            y = y || 0;                                                                                                // 3777\n            var cos = +math.cos(a).toFixed(9),                                                                         // 3778\n                sin = +math.sin(a).toFixed(9);                                                                         // 3779\n            this.add(cos, sin, -sin, cos, x, y);                                                                       // 3780\n            return this.add(1, 0, 0, 1, -x, -y);                                                                       // 3781\n        };                                                                                                             // 3782\n        /*\\\n         * Matrix.x                                                                                                    // 3784\n         [ method ]                                                                                                    // 3785\n         **                                                                                                            // 3786\n         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y       // 3787\n         - x (number)                                                                                                  // 3788\n         - y (number)                                                                                                  // 3789\n         = (number) x                                                                                                  // 3790\n        \\*/                                                                                                            // 3791\n        matrixproto.x = function (x, y) {                                                                              // 3792\n            return x * this.a + y * this.c + this.e;                                                                   // 3793\n        };                                                                                                             // 3794\n        /*\\\n         * Matrix.y                                                                                                    // 3796\n         [ method ]                                                                                                    // 3797\n         **                                                                                                            // 3798\n         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x       // 3799\n         - x (number)                                                                                                  // 3800\n         - y (number)                                                                                                  // 3801\n         = (number) y                                                                                                  // 3802\n        \\*/                                                                                                            // 3803\n        matrixproto.y = function (x, y) {                                                                              // 3804\n            return x * this.b + y * this.d + this.f;                                                                   // 3805\n        };                                                                                                             // 3806\n        matrixproto.get = function (i) {                                                                               // 3807\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);                                                         // 3808\n        };                                                                                                             // 3809\n        matrixproto.toString = function () {                                                                           // 3810\n            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n        };                                                                                                             // 3812\n        matrixproto.offset = function () {                                                                             // 3813\n            return [this.e.toFixed(4), this.f.toFixed(4)];                                                             // 3814\n        };                                                                                                             // 3815\n        function norm(a) {                                                                                             // 3816\n            return a[0] * a[0] + a[1] * a[1];                                                                          // 3817\n        }                                                                                                              // 3818\n        function normalize(a) {                                                                                        // 3819\n            var mag = math.sqrt(norm(a));                                                                              // 3820\n            a[0] && (a[0] /= mag);                                                                                     // 3821\n            a[1] && (a[1] /= mag);                                                                                     // 3822\n        }                                                                                                              // 3823\n        /*\\\n         * Matrix.determinant                                                                                          // 3825\n         [ method ]                                                                                                    // 3826\n         **                                                                                                            // 3827\n         * Finds determinant of the given matrix.                                                                      // 3828\n         = (number) determinant                                                                                        // 3829\n        \\*/                                                                                                            // 3830\n        matrixproto.determinant = function () {                                                                        // 3831\n            return this.a * this.d - this.b * this.c;                                                                  // 3832\n        };                                                                                                             // 3833\n        /*\\\n         * Matrix.split                                                                                                // 3835\n         [ method ]                                                                                                    // 3836\n         **                                                                                                            // 3837\n         * Splits matrix into primitive transformations                                                                // 3838\n         = (object) in format:                                                                                         // 3839\n         o dx (number) translation by x                                                                                // 3840\n         o dy (number) translation by y                                                                                // 3841\n         o scalex (number) scale by x                                                                                  // 3842\n         o scaley (number) scale by y                                                                                  // 3843\n         o shear (number) shear                                                                                        // 3844\n         o rotate (number) rotation in deg                                                                             // 3845\n         o isSimple (boolean) could it be represented via simple transformations                                       // 3846\n        \\*/                                                                                                            // 3847\n        matrixproto.split = function () {                                                                              // 3848\n            var out = {};                                                                                              // 3849\n            // translation                                                                                             // 3850\n            out.dx = this.e;                                                                                           // 3851\n            out.dy = this.f;                                                                                           // 3852\n                                                                                                                       // 3853\n            // scale and shear                                                                                         // 3854\n            var row = [[this.a, this.c], [this.b, this.d]];                                                            // 3855\n            out.scalex = math.sqrt(norm(row[0]));                                                                      // 3856\n            normalize(row[0]);                                                                                         // 3857\n                                                                                                                       // 3858\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];                                                 // 3859\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];                           // 3860\n                                                                                                                       // 3861\n            out.scaley = math.sqrt(norm(row[1]));                                                                      // 3862\n            normalize(row[1]);                                                                                         // 3863\n            out.shear /= out.scaley;                                                                                   // 3864\n                                                                                                                       // 3865\n            if (this.determinant() < 0) {                                                                              // 3866\n                out.scalex = -out.scalex;                                                                              // 3867\n            }                                                                                                          // 3868\n                                                                                                                       // 3869\n            // rotation                                                                                                // 3870\n            var sin = -row[0][1],                                                                                      // 3871\n                cos = row[1][1];                                                                                       // 3872\n            if (cos < 0) {                                                                                             // 3873\n                out.rotate = Snap.deg(math.acos(cos));                                                                 // 3874\n                if (sin < 0) {                                                                                         // 3875\n                    out.rotate = 360 - out.rotate;                                                                     // 3876\n                }                                                                                                      // 3877\n            } else {                                                                                                   // 3878\n                out.rotate = Snap.deg(math.asin(sin));                                                                 // 3879\n            }                                                                                                          // 3880\n                                                                                                                       // 3881\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);  // 3882\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;                                                    // 3884\n            return out;                                                                                                // 3885\n        };                                                                                                             // 3886\n        /*\\\n         * Matrix.toTransformString                                                                                    // 3888\n         [ method ]                                                                                                    // 3889\n         **                                                                                                            // 3890\n         * Returns transform string that represents given matrix                                                       // 3891\n         = (string) transform string                                                                                   // 3892\n        \\*/                                                                                                            // 3893\n        matrixproto.toTransformString = function (shorter) {                                                           // 3894\n            var s = shorter || this.split();                                                                           // 3895\n            if (!+s.shear.toFixed(9)) {                                                                                // 3896\n                s.scalex = +s.scalex.toFixed(4);                                                                       // 3897\n                s.scaley = +s.scaley.toFixed(4);                                                                       // 3898\n                s.rotate = +s.rotate.toFixed(4);                                                                       // 3899\n                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) +                              // 3900\n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +                      // 3901\n                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E);                                           // 3902\n            } else {                                                                                                   // 3903\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];           // 3904\n            }                                                                                                          // 3905\n        };                                                                                                             // 3906\n    })(Matrix.prototype);                                                                                              // 3907\n    /*\\\n     * Snap.Matrix                                                                                                     // 3909\n     [ method ]                                                                                                        // 3910\n     **                                                                                                                // 3911\n     * Matrix constructor, extend on your own risk.                                                                    // 3912\n     * To create matrices use @Snap.matrix.                                                                            // 3913\n    \\*/                                                                                                                // 3914\n    Snap.Matrix = Matrix;                                                                                              // 3915\n    /*\\\n     * Snap.matrix                                                                                                     // 3917\n     [ method ]                                                                                                        // 3918\n     **                                                                                                                // 3919\n     * Utility method                                                                                                  // 3920\n     **                                                                                                                // 3921\n     * Returns a matrix based on the given parameters                                                                  // 3922\n     - a (number)                                                                                                      // 3923\n     - b (number)                                                                                                      // 3924\n     - c (number)                                                                                                      // 3925\n     - d (number)                                                                                                      // 3926\n     - e (number)                                                                                                      // 3927\n     - f (number)                                                                                                      // 3928\n     * or                                                                                                              // 3929\n     - svgMatrix (SVGMatrix)                                                                                           // 3930\n     = (object) @Matrix                                                                                                // 3931\n    \\*/                                                                                                                // 3932\n    Snap.matrix = function (a, b, c, d, e, f) {                                                                        // 3933\n        return new Matrix(a, b, c, d, e, f);                                                                           // 3934\n    };                                                                                                                 // 3935\n});                                                                                                                    // 3936\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 3937\n//                                                                                                                     // 3938\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 3939\n// you may not use this file except in compliance with the License.                                                    // 3940\n// You may obtain a copy of the License at                                                                             // 3941\n//                                                                                                                     // 3942\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 3943\n//                                                                                                                     // 3944\n// Unless required by applicable law or agreed to in writing, software                                                 // 3945\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 3946\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 3947\n// See the License for the specific language governing permissions and                                                 // 3948\n// limitations under the License.                                                                                      // 3949\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {                                                          // 3950\n    var has = \"hasOwnProperty\",                                                                                        // 3951\n        make = Snap._.make,                                                                                            // 3952\n        wrap = Snap._.wrap,                                                                                            // 3953\n        is = Snap.is,                                                                                                  // 3954\n        getSomeDefs = Snap._.getSomeDefs,                                                                              // 3955\n        reURLValue = /^url\\(#?([^)]+)\\)$/,                                                                             // 3956\n        $ = Snap._.$,                                                                                                  // 3957\n        URL = Snap.url,                                                                                                // 3958\n        Str = String,                                                                                                  // 3959\n        separator = Snap._.separator,                                                                                  // 3960\n        E = \"\";                                                                                                        // 3961\n    // Attributes event handlers                                                                                       // 3962\n    eve.on(\"snap.util.attr.mask\", function (value) {                                                                   // 3963\n        if (value instanceof Element || value instanceof Fragment) {                                                   // 3964\n            eve.stop();                                                                                                // 3965\n            if (value instanceof Fragment && value.node.childNodes.length == 1) {                                      // 3966\n                value = value.node.firstChild;                                                                         // 3967\n                getSomeDefs(this).appendChild(value);                                                                  // 3968\n                value = wrap(value);                                                                                   // 3969\n            }                                                                                                          // 3970\n            if (value.type == \"mask\") {                                                                                // 3971\n                var mask = value;                                                                                      // 3972\n            } else {                                                                                                   // 3973\n                mask = make(\"mask\", getSomeDefs(this));                                                                // 3974\n                mask.node.appendChild(value.node);                                                                     // 3975\n            }                                                                                                          // 3976\n            !mask.node.id && $(mask.node, {                                                                            // 3977\n                id: mask.id                                                                                            // 3978\n            });                                                                                                        // 3979\n            $(this.node, {                                                                                             // 3980\n                mask: URL(mask.id)                                                                                     // 3981\n            });                                                                                                        // 3982\n        }                                                                                                              // 3983\n    });                                                                                                                // 3984\n    (function (clipIt) {                                                                                               // 3985\n        eve.on(\"snap.util.attr.clip\", clipIt);                                                                         // 3986\n        eve.on(\"snap.util.attr.clip-path\", clipIt);                                                                    // 3987\n        eve.on(\"snap.util.attr.clipPath\", clipIt);                                                                     // 3988\n    }(function (value) {                                                                                               // 3989\n        if (value instanceof Element || value instanceof Fragment) {                                                   // 3990\n            eve.stop();                                                                                                // 3991\n            if (value.type == \"clipPath\") {                                                                            // 3992\n                var clip = value;                                                                                      // 3993\n            } else {                                                                                                   // 3994\n                clip = make(\"clipPath\", getSomeDefs(this));                                                            // 3995\n                clip.node.appendChild(value.node);                                                                     // 3996\n                !clip.node.id && $(clip.node, {                                                                        // 3997\n                    id: clip.id                                                                                        // 3998\n                });                                                                                                    // 3999\n            }                                                                                                          // 4000\n            $(this.node, {                                                                                             // 4001\n                \"clip-path\": URL(clip.node.id || clip.id)                                                              // 4002\n            });                                                                                                        // 4003\n        }                                                                                                              // 4004\n    }));                                                                                                               // 4005\n    function fillStroke(name) {                                                                                        // 4006\n        return function (value) {                                                                                      // 4007\n            eve.stop();                                                                                                // 4008\n            if (value instanceof Fragment && value.node.childNodes.length == 1 &&                                      // 4009\n                (value.node.firstChild.tagName == \"radialGradient\" ||                                                  // 4010\n                value.node.firstChild.tagName == \"linearGradient\" ||                                                   // 4011\n                value.node.firstChild.tagName == \"pattern\")) {                                                         // 4012\n                value = value.node.firstChild;                                                                         // 4013\n                getSomeDefs(this).appendChild(value);                                                                  // 4014\n                value = wrap(value);                                                                                   // 4015\n            }                                                                                                          // 4016\n            if (value instanceof Element) {                                                                            // 4017\n                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"                                   // 4018\n                   || value.type == \"pattern\") {                                                                       // 4019\n                    if (!value.node.id) {                                                                              // 4020\n                        $(value.node, {                                                                                // 4021\n                            id: value.id                                                                               // 4022\n                        });                                                                                            // 4023\n                    }                                                                                                  // 4024\n                    var fill = URL(value.node.id);                                                                     // 4025\n                } else {                                                                                               // 4026\n                    fill = value.attr(name);                                                                           // 4027\n                }                                                                                                      // 4028\n            } else {                                                                                                   // 4029\n                fill = Snap.color(value);                                                                              // 4030\n                if (fill.error) {                                                                                      // 4031\n                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);                                // 4032\n                    if (grad) {                                                                                        // 4033\n                        if (!grad.node.id) {                                                                           // 4034\n                            $(grad.node, {                                                                             // 4035\n                                id: grad.id                                                                            // 4036\n                            });                                                                                        // 4037\n                        }                                                                                              // 4038\n                        fill = URL(grad.node.id);                                                                      // 4039\n                    } else {                                                                                           // 4040\n                        fill = value;                                                                                  // 4041\n                    }                                                                                                  // 4042\n                } else {                                                                                               // 4043\n                    fill = Str(fill);                                                                                  // 4044\n                }                                                                                                      // 4045\n            }                                                                                                          // 4046\n            var attrs = {};                                                                                            // 4047\n            attrs[name] = fill;                                                                                        // 4048\n            $(this.node, attrs);                                                                                       // 4049\n            this.node.style[name] = E;                                                                                 // 4050\n        };                                                                                                             // 4051\n    }                                                                                                                  // 4052\n    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));                                                                 // 4053\n    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));                                                             // 4054\n    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;                                                                      // 4055\n    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {                                                        // 4056\n        string = Str(string);                                                                                          // 4057\n        var tokens = string.match(gradrg);                                                                             // 4058\n        if (!tokens) {                                                                                                 // 4059\n            return null;                                                                                               // 4060\n        }                                                                                                              // 4061\n        var type = tokens[1],                                                                                          // 4062\n            params = tokens[2],                                                                                        // 4063\n            stops = tokens[3];                                                                                         // 4064\n        params = params.split(/\\s*,\\s*/).map(function (el) {                                                           // 4065\n            return +el == el ? +el : el;                                                                               // 4066\n        });                                                                                                            // 4067\n        if (params.length == 1 && params[0] == 0) {                                                                    // 4068\n            params = [];                                                                                               // 4069\n        }                                                                                                              // 4070\n        stops = stops.split(\"-\");                                                                                      // 4071\n        stops = stops.map(function (el) {                                                                              // 4072\n            el = el.split(\":\");                                                                                        // 4073\n            var out = {                                                                                                // 4074\n                color: el[0]                                                                                           // 4075\n            };                                                                                                         // 4076\n            if (el[1]) {                                                                                               // 4077\n                out.offset = parseFloat(el[1]);                                                                        // 4078\n            }                                                                                                          // 4079\n            return out;                                                                                                // 4080\n        });                                                                                                            // 4081\n        return {                                                                                                       // 4082\n            type: type,                                                                                                // 4083\n            params: params,                                                                                            // 4084\n            stops: stops                                                                                               // 4085\n        };                                                                                                             // 4086\n    });                                                                                                                // 4087\n                                                                                                                       // 4088\n    eve.on(\"snap.util.attr.d\", function (value) {                                                                      // 4089\n        eve.stop();                                                                                                    // 4090\n        if (is(value, \"array\") && is(value[0], \"array\")) {                                                             // 4091\n            value = Snap.path.toString.call(value);                                                                    // 4092\n        }                                                                                                              // 4093\n        value = Str(value);                                                                                            // 4094\n        if (value.match(/[ruo]/i)) {                                                                                   // 4095\n            value = Snap.path.toAbsolute(value);                                                                       // 4096\n        }                                                                                                              // 4097\n        $(this.node, {d: value});                                                                                      // 4098\n    })(-1);                                                                                                            // 4099\n    eve.on(\"snap.util.attr.#text\", function (value) {                                                                  // 4100\n        eve.stop();                                                                                                    // 4101\n        value = Str(value);                                                                                            // 4102\n        var txt = glob.doc.createTextNode(value);                                                                      // 4103\n        while (this.node.firstChild) {                                                                                 // 4104\n            this.node.removeChild(this.node.firstChild);                                                               // 4105\n        }                                                                                                              // 4106\n        this.node.appendChild(txt);                                                                                    // 4107\n    })(-1);                                                                                                            // 4108\n    eve.on(\"snap.util.attr.path\", function (value) {                                                                   // 4109\n        eve.stop();                                                                                                    // 4110\n        this.attr({d: value});                                                                                         // 4111\n    })(-1);                                                                                                            // 4112\n    eve.on(\"snap.util.attr.class\", function (value) {                                                                  // 4113\n        eve.stop();                                                                                                    // 4114\n        this.node.className.baseVal = value;                                                                           // 4115\n    })(-1);                                                                                                            // 4116\n    eve.on(\"snap.util.attr.viewBox\", function (value) {                                                                // 4117\n        var vb;                                                                                                        // 4118\n        if (is(value, \"object\") && \"x\" in value) {                                                                     // 4119\n            vb = [value.x, value.y, value.width, value.height].join(\" \");                                              // 4120\n        } else if (is(value, \"array\")) {                                                                               // 4121\n            vb = value.join(\" \");                                                                                      // 4122\n        } else {                                                                                                       // 4123\n            vb = value;                                                                                                // 4124\n        }                                                                                                              // 4125\n        $(this.node, {                                                                                                 // 4126\n            viewBox: vb                                                                                                // 4127\n        });                                                                                                            // 4128\n        eve.stop();                                                                                                    // 4129\n    })(-1);                                                                                                            // 4130\n    eve.on(\"snap.util.attr.transform\", function (value) {                                                              // 4131\n        this.transform(value);                                                                                         // 4132\n        eve.stop();                                                                                                    // 4133\n    })(-1);                                                                                                            // 4134\n    eve.on(\"snap.util.attr.r\", function (value) {                                                                      // 4135\n        if (this.type == \"rect\") {                                                                                     // 4136\n            eve.stop();                                                                                                // 4137\n            $(this.node, {                                                                                             // 4138\n                rx: value,                                                                                             // 4139\n                ry: value                                                                                              // 4140\n            });                                                                                                        // 4141\n        }                                                                                                              // 4142\n    })(-1);                                                                                                            // 4143\n    eve.on(\"snap.util.attr.textpath\", function (value) {                                                               // 4144\n        eve.stop();                                                                                                    // 4145\n        if (this.type == \"text\") {                                                                                     // 4146\n            var id, tp, node;                                                                                          // 4147\n            if (!value && this.textPath) {                                                                             // 4148\n                tp = this.textPath;                                                                                    // 4149\n                while (tp.node.firstChild) {                                                                           // 4150\n                    this.node.appendChild(tp.node.firstChild);                                                         // 4151\n                }                                                                                                      // 4152\n                tp.remove();                                                                                           // 4153\n                delete this.textPath;                                                                                  // 4154\n                return;                                                                                                // 4155\n            }                                                                                                          // 4156\n            if (is(value, \"string\")) {                                                                                 // 4157\n                var defs = getSomeDefs(this),                                                                          // 4158\n                    path = wrap(defs.parentNode).path(value);                                                          // 4159\n                defs.appendChild(path.node);                                                                           // 4160\n                id = path.id;                                                                                          // 4161\n                path.attr({id: id});                                                                                   // 4162\n            } else {                                                                                                   // 4163\n                value = wrap(value);                                                                                   // 4164\n                if (value instanceof Element) {                                                                        // 4165\n                    id = value.attr(\"id\");                                                                             // 4166\n                    if (!id) {                                                                                         // 4167\n                        id = value.id;                                                                                 // 4168\n                        value.attr({id: id});                                                                          // 4169\n                    }                                                                                                  // 4170\n                }                                                                                                      // 4171\n            }                                                                                                          // 4172\n            if (id) {                                                                                                  // 4173\n                tp = this.textPath;                                                                                    // 4174\n                node = this.node;                                                                                      // 4175\n                if (tp) {                                                                                              // 4176\n                    tp.attr({\"xlink:href\": \"#\" + id});                                                                 // 4177\n                } else {                                                                                               // 4178\n                    tp = $(\"textPath\", {                                                                               // 4179\n                        \"xlink:href\": \"#\" + id                                                                         // 4180\n                    });                                                                                                // 4181\n                    while (node.firstChild) {                                                                          // 4182\n                        tp.appendChild(node.firstChild);                                                               // 4183\n                    }                                                                                                  // 4184\n                    node.appendChild(tp);                                                                              // 4185\n                    this.textPath = wrap(tp);                                                                          // 4186\n                }                                                                                                      // 4187\n            }                                                                                                          // 4188\n        }                                                                                                              // 4189\n    })(-1);                                                                                                            // 4190\n    eve.on(\"snap.util.attr.text\", function (value) {                                                                   // 4191\n        if (this.type == \"text\") {                                                                                     // 4192\n            var i = 0,                                                                                                 // 4193\n                node = this.node,                                                                                      // 4194\n                tuner = function (chunk) {                                                                             // 4195\n                    var out = $(\"tspan\");                                                                              // 4196\n                    if (is(chunk, \"array\")) {                                                                          // 4197\n                        for (var i = 0; i < chunk.length; i++) {                                                       // 4198\n                            out.appendChild(tuner(chunk[i]));                                                          // 4199\n                        }                                                                                              // 4200\n                    } else {                                                                                           // 4201\n                        out.appendChild(glob.doc.createTextNode(chunk));                                               // 4202\n                    }                                                                                                  // 4203\n                    out.normalize && out.normalize();                                                                  // 4204\n                    return out;                                                                                        // 4205\n                };                                                                                                     // 4206\n            while (node.firstChild) {                                                                                  // 4207\n                node.removeChild(node.firstChild);                                                                     // 4208\n            }                                                                                                          // 4209\n            var tuned = tuner(value);                                                                                  // 4210\n            while (tuned.firstChild) {                                                                                 // 4211\n                node.appendChild(tuned.firstChild);                                                                    // 4212\n            }                                                                                                          // 4213\n        }                                                                                                              // 4214\n        eve.stop();                                                                                                    // 4215\n    })(-1);                                                                                                            // 4216\n    function setFontSize(value) {                                                                                      // 4217\n        eve.stop();                                                                                                    // 4218\n        if (value == +value) {                                                                                         // 4219\n            value += \"px\";                                                                                             // 4220\n        }                                                                                                              // 4221\n        this.node.style.fontSize = value;                                                                              // 4222\n    }                                                                                                                  // 4223\n    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);                                                                // 4224\n    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);                                                               // 4225\n                                                                                                                       // 4226\n                                                                                                                       // 4227\n    eve.on(\"snap.util.getattr.transform\", function () {                                                                // 4228\n        eve.stop();                                                                                                    // 4229\n        return this.transform();                                                                                       // 4230\n    })(-1);                                                                                                            // 4231\n    eve.on(\"snap.util.getattr.textpath\", function () {                                                                 // 4232\n        eve.stop();                                                                                                    // 4233\n        return this.textPath;                                                                                          // 4234\n    })(-1);                                                                                                            // 4235\n    // Markers                                                                                                         // 4236\n    (function () {                                                                                                     // 4237\n        function getter(end) {                                                                                         // 4238\n            return function () {                                                                                       // 4239\n                eve.stop();                                                                                            // 4240\n                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);  // 4241\n                if (style == \"none\") {                                                                                 // 4242\n                    return style;                                                                                      // 4243\n                } else {                                                                                               // 4244\n                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));                                  // 4245\n                }                                                                                                      // 4246\n            };                                                                                                         // 4247\n        }                                                                                                              // 4248\n        function setter(end) {                                                                                         // 4249\n            return function (value) {                                                                                  // 4250\n                eve.stop();                                                                                            // 4251\n                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);                                  // 4252\n                if (value == \"\" || !value) {                                                                           // 4253\n                    this.node.style[name] = \"none\";                                                                    // 4254\n                    return;                                                                                            // 4255\n                }                                                                                                      // 4256\n                if (value.type == \"marker\") {                                                                          // 4257\n                    var id = value.node.id;                                                                            // 4258\n                    if (!id) {                                                                                         // 4259\n                        $(value.node, {id: value.id});                                                                 // 4260\n                    }                                                                                                  // 4261\n                    this.node.style[name] = URL(id);                                                                   // 4262\n                    return;                                                                                            // 4263\n                }                                                                                                      // 4264\n            };                                                                                                         // 4265\n        }                                                                                                              // 4266\n        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);                                                     // 4267\n        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);                                                      // 4268\n        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);                                                 // 4269\n        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);                                                  // 4270\n        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);                                                     // 4271\n        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);                                                      // 4272\n        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);                                                        // 4273\n        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);                                                         // 4274\n        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);                                                    // 4275\n        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);                                                     // 4276\n        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);                                                        // 4277\n        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);                                                         // 4278\n    }());                                                                                                              // 4279\n    eve.on(\"snap.util.getattr.r\", function () {                                                                        // 4280\n        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {                                         // 4281\n            eve.stop();                                                                                                // 4282\n            return $(this.node, \"rx\");                                                                                 // 4283\n        }                                                                                                              // 4284\n    })(-1);                                                                                                            // 4285\n    function textExtract(node) {                                                                                       // 4286\n        var out = [];                                                                                                  // 4287\n        var children = node.childNodes;                                                                                // 4288\n        for (var i = 0, ii = children.length; i < ii; i++) {                                                           // 4289\n            var chi = children[i];                                                                                     // 4290\n            if (chi.nodeType == 3) {                                                                                   // 4291\n                out.push(chi.nodeValue);                                                                               // 4292\n            }                                                                                                          // 4293\n            if (chi.tagName == \"tspan\") {                                                                              // 4294\n                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {                                      // 4295\n                    out.push(chi.firstChild.nodeValue);                                                                // 4296\n                } else {                                                                                               // 4297\n                    out.push(textExtract(chi));                                                                        // 4298\n                }                                                                                                      // 4299\n            }                                                                                                          // 4300\n        }                                                                                                              // 4301\n        return out;                                                                                                    // 4302\n    }                                                                                                                  // 4303\n    eve.on(\"snap.util.getattr.text\", function () {                                                                     // 4304\n        if (this.type == \"text\" || this.type == \"tspan\") {                                                             // 4305\n            eve.stop();                                                                                                // 4306\n            var out = textExtract(this.node);                                                                          // 4307\n            return out.length == 1 ? out[0] : out;                                                                     // 4308\n        }                                                                                                              // 4309\n    })(-1);                                                                                                            // 4310\n    eve.on(\"snap.util.getattr.#text\", function () {                                                                    // 4311\n        return this.node.textContent;                                                                                  // 4312\n    })(-1);                                                                                                            // 4313\n    eve.on(\"snap.util.getattr.viewBox\", function () {                                                                  // 4314\n        eve.stop();                                                                                                    // 4315\n        var vb = $(this.node, \"viewBox\");                                                                              // 4316\n        if (vb) {                                                                                                      // 4317\n            vb = vb.split(separator);                                                                                  // 4318\n            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);                                                         // 4319\n        } else {                                                                                                       // 4320\n            return;                                                                                                    // 4321\n        }                                                                                                              // 4322\n    })(-1);                                                                                                            // 4323\n    eve.on(\"snap.util.getattr.points\", function () {                                                                   // 4324\n        var p = $(this.node, \"points\");                                                                                // 4325\n        eve.stop();                                                                                                    // 4326\n        if (p) {                                                                                                       // 4327\n            return p.split(separator);                                                                                 // 4328\n        } else {                                                                                                       // 4329\n            return;                                                                                                    // 4330\n        }                                                                                                              // 4331\n    })(-1);                                                                                                            // 4332\n    eve.on(\"snap.util.getattr.path\", function () {                                                                     // 4333\n        var p = $(this.node, \"d\");                                                                                     // 4334\n        eve.stop();                                                                                                    // 4335\n        return p;                                                                                                      // 4336\n    })(-1);                                                                                                            // 4337\n    eve.on(\"snap.util.getattr.class\", function () {                                                                    // 4338\n        return this.node.className.baseVal;                                                                            // 4339\n    })(-1);                                                                                                            // 4340\n    function getFontSize() {                                                                                           // 4341\n        eve.stop();                                                                                                    // 4342\n        return this.node.style.fontSize;                                                                               // 4343\n    }                                                                                                                  // 4344\n    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);                                                             // 4345\n    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);                                                            // 4346\n});                                                                                                                    // 4347\n                                                                                                                       // 4348\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.                                                 // 4349\n//                                                                                                                     // 4350\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 4351\n// you may not use this file except in compliance with the License.                                                    // 4352\n// You may obtain a copy of the License at                                                                             // 4353\n//                                                                                                                     // 4354\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 4355\n//                                                                                                                     // 4356\n// Unless required by applicable law or agreed to in writing, software                                                 // 4357\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 4358\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 4359\n// See the License for the specific language governing permissions and                                                 // 4360\n// limitations under the License.                                                                                      // 4361\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {                                                          // 4362\n    var rgNotSpace = /\\S+/g,                                                                                           // 4363\n        rgBadSpace = /[\\t\\r\\n\\f]/g,                                                                                    // 4364\n        rgTrim = /(^\\s+|\\s+$)/g,                                                                                       // 4365\n        Str = String,                                                                                                  // 4366\n        elproto = Element.prototype;                                                                                   // 4367\n    /*\\\n     * Element.addClass                                                                                                // 4369\n     [ method ]                                                                                                        // 4370\n     **                                                                                                                // 4371\n     * Adds given class name or list of class names to the element.                                                    // 4372\n     - value (string) class name or space separated list of class names                                                // 4373\n     **                                                                                                                // 4374\n     = (Element) original element.                                                                                     // 4375\n    \\*/                                                                                                                // 4376\n    elproto.addClass = function (value) {                                                                              // 4377\n        var classes = Str(value || \"\").match(rgNotSpace) || [],                                                        // 4378\n            elem = this.node,                                                                                          // 4379\n            className = elem.className.baseVal,                                                                        // 4380\n            curClasses = className.match(rgNotSpace) || [],                                                            // 4381\n            j,                                                                                                         // 4382\n            pos,                                                                                                       // 4383\n            clazz,                                                                                                     // 4384\n            finalValue;                                                                                                // 4385\n                                                                                                                       // 4386\n        if (classes.length) {                                                                                          // 4387\n            j = 0;                                                                                                     // 4388\n            while ((clazz = classes[j++])) {                                                                           // 4389\n                pos = curClasses.indexOf(clazz);                                                                       // 4390\n                if (!~pos) {                                                                                           // 4391\n                    curClasses.push(clazz);                                                                            // 4392\n                }                                                                                                      // 4393\n            }                                                                                                          // 4394\n                                                                                                                       // 4395\n            finalValue = curClasses.join(\" \");                                                                         // 4396\n            if (className != finalValue) {                                                                             // 4397\n                elem.className.baseVal = finalValue;                                                                   // 4398\n            }                                                                                                          // 4399\n        }                                                                                                              // 4400\n        return this;                                                                                                   // 4401\n    };                                                                                                                 // 4402\n    /*\\\n     * Element.removeClass                                                                                             // 4404\n     [ method ]                                                                                                        // 4405\n     **                                                                                                                // 4406\n     * Removes given class name or list of class names from the element.                                               // 4407\n     - value (string) class name or space separated list of class names                                                // 4408\n     **                                                                                                                // 4409\n     = (Element) original element.                                                                                     // 4410\n    \\*/                                                                                                                // 4411\n    elproto.removeClass = function (value) {                                                                           // 4412\n        var classes = Str(value || \"\").match(rgNotSpace) || [],                                                        // 4413\n            elem = this.node,                                                                                          // 4414\n            className = elem.className.baseVal,                                                                        // 4415\n            curClasses = className.match(rgNotSpace) || [],                                                            // 4416\n            j,                                                                                                         // 4417\n            pos,                                                                                                       // 4418\n            clazz,                                                                                                     // 4419\n            finalValue;                                                                                                // 4420\n        if (curClasses.length) {                                                                                       // 4421\n            j = 0;                                                                                                     // 4422\n            while ((clazz = classes[j++])) {                                                                           // 4423\n                pos = curClasses.indexOf(clazz);                                                                       // 4424\n                if (~pos) {                                                                                            // 4425\n                    curClasses.splice(pos, 1);                                                                         // 4426\n                }                                                                                                      // 4427\n            }                                                                                                          // 4428\n                                                                                                                       // 4429\n            finalValue = curClasses.join(\" \");                                                                         // 4430\n            if (className != finalValue) {                                                                             // 4431\n                elem.className.baseVal = finalValue;                                                                   // 4432\n            }                                                                                                          // 4433\n        }                                                                                                              // 4434\n        return this;                                                                                                   // 4435\n    };                                                                                                                 // 4436\n    /*\\\n     * Element.hasClass                                                                                                // 4438\n     [ method ]                                                                                                        // 4439\n     **                                                                                                                // 4440\n     * Checks if the element has a given class name in the list of class names applied to it.                          // 4441\n     - value (string) class name                                                                                       // 4442\n     **                                                                                                                // 4443\n     = (boolean) `true` if the element has given class                                                                 // 4444\n    \\*/                                                                                                                // 4445\n    elproto.hasClass = function (value) {                                                                              // 4446\n        var elem = this.node,                                                                                          // 4447\n            className = elem.className.baseVal,                                                                        // 4448\n            curClasses = className.match(rgNotSpace) || [];                                                            // 4449\n        return !!~curClasses.indexOf(value);                                                                           // 4450\n    };                                                                                                                 // 4451\n    /*\\\n     * Element.toggleClass                                                                                             // 4453\n     [ method ]                                                                                                        // 4454\n     **                                                                                                                // 4455\n     * Add or remove one or more classes from the element, depending on either                                         // 4456\n     * the class’s presence or the value of the `flag` argument.                                                       // 4457\n     - value (string) class name or space separated list of class names                                                // 4458\n     - flag (boolean) value to determine whether the class should be added or removed                                  // 4459\n     **                                                                                                                // 4460\n     = (Element) original element.                                                                                     // 4461\n    \\*/                                                                                                                // 4462\n    elproto.toggleClass = function (value, flag) {                                                                     // 4463\n        if (flag != null) {                                                                                            // 4464\n            if (flag) {                                                                                                // 4465\n                return this.addClass(value);                                                                           // 4466\n            } else {                                                                                                   // 4467\n                return this.removeClass(value);                                                                        // 4468\n            }                                                                                                          // 4469\n        }                                                                                                              // 4470\n        var classes = (value || \"\").match(rgNotSpace) || [],                                                           // 4471\n            elem = this.node,                                                                                          // 4472\n            className = elem.className.baseVal,                                                                        // 4473\n            curClasses = className.match(rgNotSpace) || [],                                                            // 4474\n            j,                                                                                                         // 4475\n            pos,                                                                                                       // 4476\n            clazz,                                                                                                     // 4477\n            finalValue;                                                                                                // 4478\n        j = 0;                                                                                                         // 4479\n        while ((clazz = classes[j++])) {                                                                               // 4480\n            pos = curClasses.indexOf(clazz);                                                                           // 4481\n            if (~pos) {                                                                                                // 4482\n                curClasses.splice(pos, 1);                                                                             // 4483\n            } else {                                                                                                   // 4484\n                curClasses.push(clazz);                                                                                // 4485\n            }                                                                                                          // 4486\n        }                                                                                                              // 4487\n                                                                                                                       // 4488\n        finalValue = curClasses.join(\" \");                                                                             // 4489\n        if (className != finalValue) {                                                                                 // 4490\n            elem.className.baseVal = finalValue;                                                                       // 4491\n        }                                                                                                              // 4492\n        return this;                                                                                                   // 4493\n    };                                                                                                                 // 4494\n});                                                                                                                    // 4495\n                                                                                                                       // 4496\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 4497\n//                                                                                                                     // 4498\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 4499\n// you may not use this file except in compliance with the License.                                                    // 4500\n// You may obtain a copy of the License at                                                                             // 4501\n//                                                                                                                     // 4502\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 4503\n//                                                                                                                     // 4504\n// Unless required by applicable law or agreed to in writing, software                                                 // 4505\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 4506\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 4507\n// See the License for the specific language governing permissions and                                                 // 4508\n// limitations under the License.                                                                                      // 4509\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {                                                          // 4510\n    var operators = {                                                                                                  // 4511\n            \"+\": function (x, y) {                                                                                     // 4512\n                    return x + y;                                                                                      // 4513\n                },                                                                                                     // 4514\n            \"-\": function (x, y) {                                                                                     // 4515\n                    return x - y;                                                                                      // 4516\n                },                                                                                                     // 4517\n            \"/\": function (x, y) {                                                                                     // 4518\n                    return x / y;                                                                                      // 4519\n                },                                                                                                     // 4520\n            \"*\": function (x, y) {                                                                                     // 4521\n                    return x * y;                                                                                      // 4522\n                }                                                                                                      // 4523\n        },                                                                                                             // 4524\n        Str = String,                                                                                                  // 4525\n        reUnit = /[a-z]+$/i,                                                                                           // 4526\n        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;                                              // 4527\n    function getNumber(val) {                                                                                          // 4528\n        return val;                                                                                                    // 4529\n    }                                                                                                                  // 4530\n    function getUnit(unit) {                                                                                           // 4531\n        return function (val) {                                                                                        // 4532\n            return +val.toFixed(3) + unit;                                                                             // 4533\n        };                                                                                                             // 4534\n    }                                                                                                                  // 4535\n    eve.on(\"snap.util.attr\", function (val) {                                                                          // 4536\n        var plus = Str(val).match(reAddon);                                                                            // 4537\n        if (plus) {                                                                                                    // 4538\n            var evnt = eve.nt(),                                                                                       // 4539\n                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),                                                      // 4540\n                a = this.attr(name),                                                                                   // 4541\n                atr = {};                                                                                              // 4542\n            eve.stop();                                                                                                // 4543\n            var unit = plus[3] || \"\",                                                                                  // 4544\n                aUnit = a.match(reUnit),                                                                               // 4545\n                op = operators[plus[1]];                                                                               // 4546\n            if (aUnit && aUnit == unit) {                                                                              // 4547\n                val = op(parseFloat(a), +plus[2]);                                                                     // 4548\n            } else {                                                                                                   // 4549\n                a = this.asPX(name);                                                                                   // 4550\n                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));                                            // 4551\n            }                                                                                                          // 4552\n            if (isNaN(a) || isNaN(val)) {                                                                              // 4553\n                return;                                                                                                // 4554\n            }                                                                                                          // 4555\n            atr[name] = val;                                                                                           // 4556\n            this.attr(atr);                                                                                            // 4557\n        }                                                                                                              // 4558\n    })(-10);                                                                                                           // 4559\n    eve.on(\"snap.util.equal\", function (name, b) {                                                                     // 4560\n        var A, B, a = Str(this.attr(name) || \"\"),                                                                      // 4561\n            el = this,                                                                                                 // 4562\n            bplus = Str(b).match(reAddon);                                                                             // 4563\n        if (bplus) {                                                                                                   // 4564\n            eve.stop();                                                                                                // 4565\n            var unit = bplus[3] || \"\",                                                                                 // 4566\n                aUnit = a.match(reUnit),                                                                               // 4567\n                op = operators[bplus[1]];                                                                              // 4568\n            if (aUnit && aUnit == unit) {                                                                              // 4569\n                return {                                                                                               // 4570\n                    from: parseFloat(a),                                                                               // 4571\n                    to: op(parseFloat(a), +bplus[2]),                                                                  // 4572\n                    f: getUnit(aUnit)                                                                                  // 4573\n                };                                                                                                     // 4574\n            } else {                                                                                                   // 4575\n                a = this.asPX(name);                                                                                   // 4576\n                return {                                                                                               // 4577\n                    from: a,                                                                                           // 4578\n                    to: op(a, this.asPX(name, bplus[2] + unit)),                                                       // 4579\n                    f: getNumber                                                                                       // 4580\n                };                                                                                                     // 4581\n            }                                                                                                          // 4582\n        }                                                                                                              // 4583\n    })(-10);                                                                                                           // 4584\n});                                                                                                                    // 4585\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 4586\n//                                                                                                                     // 4587\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 4588\n// you may not use this file except in compliance with the License.                                                    // 4589\n// You may obtain a copy of the License at                                                                             // 4590\n//                                                                                                                     // 4591\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 4592\n//                                                                                                                     // 4593\n// Unless required by applicable law or agreed to in writing, software                                                 // 4594\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 4595\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 4596\n// See the License for the specific language governing permissions and                                                 // 4597\n// limitations under the License.                                                                                      // 4598\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {                                                          // 4599\n    var proto = Paper.prototype,                                                                                       // 4600\n        is = Snap.is;                                                                                                  // 4601\n    /*\\\n     * Paper.rect                                                                                                      // 4603\n     [ method ]                                                                                                        // 4604\n     *                                                                                                                 // 4605\n     * Draws a rectangle                                                                                               // 4606\n     **                                                                                                                // 4607\n     - x (number) x coordinate of the top left corner                                                                  // 4608\n     - y (number) y coordinate of the top left corner                                                                  // 4609\n     - width (number) width                                                                                            // 4610\n     - height (number) height                                                                                          // 4611\n     - rx (number) #optional horizontal radius for rounded corners, default is 0                                       // 4612\n     - ry (number) #optional vertical radius for rounded corners, default is rx or 0                                   // 4613\n     = (object) the `rect` element                                                                                     // 4614\n     **                                                                                                                // 4615\n     > Usage                                                                                                           // 4616\n     | // regular rectangle                                                                                            // 4617\n     | var c = paper.rect(10, 10, 50, 50);                                                                             // 4618\n     | // rectangle with rounded corners                                                                               // 4619\n     | var c = paper.rect(40, 40, 50, 50, 10);                                                                         // 4620\n    \\*/                                                                                                                // 4621\n    proto.rect = function (x, y, w, h, rx, ry) {                                                                       // 4622\n        var attr;                                                                                                      // 4623\n        if (ry == null) {                                                                                              // 4624\n            ry = rx;                                                                                                   // 4625\n        }                                                                                                              // 4626\n        if (is(x, \"object\") && x == \"[object Object]\") {                                                               // 4627\n            attr = x;                                                                                                  // 4628\n        } else if (x != null) {                                                                                        // 4629\n            attr = {                                                                                                   // 4630\n                x: x,                                                                                                  // 4631\n                y: y,                                                                                                  // 4632\n                width: w,                                                                                              // 4633\n                height: h                                                                                              // 4634\n            };                                                                                                         // 4635\n            if (rx != null) {                                                                                          // 4636\n                attr.rx = rx;                                                                                          // 4637\n                attr.ry = ry;                                                                                          // 4638\n            }                                                                                                          // 4639\n        }                                                                                                              // 4640\n        return this.el(\"rect\", attr);                                                                                  // 4641\n    };                                                                                                                 // 4642\n    /*\\\n     * Paper.circle                                                                                                    // 4644\n     [ method ]                                                                                                        // 4645\n     **                                                                                                                // 4646\n     * Draws a circle                                                                                                  // 4647\n     **                                                                                                                // 4648\n     - x (number) x coordinate of the centre                                                                           // 4649\n     - y (number) y coordinate of the centre                                                                           // 4650\n     - r (number) radius                                                                                               // 4651\n     = (object) the `circle` element                                                                                   // 4652\n     **                                                                                                                // 4653\n     > Usage                                                                                                           // 4654\n     | var c = paper.circle(50, 50, 40);                                                                               // 4655\n    \\*/                                                                                                                // 4656\n    proto.circle = function (cx, cy, r) {                                                                              // 4657\n        var attr;                                                                                                      // 4658\n        if (is(cx, \"object\") && cx == \"[object Object]\") {                                                             // 4659\n            attr = cx;                                                                                                 // 4660\n        } else if (cx != null) {                                                                                       // 4661\n            attr = {                                                                                                   // 4662\n                cx: cx,                                                                                                // 4663\n                cy: cy,                                                                                                // 4664\n                r: r                                                                                                   // 4665\n            };                                                                                                         // 4666\n        }                                                                                                              // 4667\n        return this.el(\"circle\", attr);                                                                                // 4668\n    };                                                                                                                 // 4669\n                                                                                                                       // 4670\n    var preload = (function () {                                                                                       // 4671\n        function onerror() {                                                                                           // 4672\n            this.parentNode.removeChild(this);                                                                         // 4673\n        }                                                                                                              // 4674\n        return function (src, f) {                                                                                     // 4675\n            var img = glob.doc.createElement(\"img\"),                                                                   // 4676\n                body = glob.doc.body;                                                                                  // 4677\n            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";                                          // 4678\n            img.onload = function () {                                                                                 // 4679\n                f.call(img);                                                                                           // 4680\n                img.onload = img.onerror = null;                                                                       // 4681\n                body.removeChild(img);                                                                                 // 4682\n            };                                                                                                         // 4683\n            img.onerror = onerror;                                                                                     // 4684\n            body.appendChild(img);                                                                                     // 4685\n            img.src = src;                                                                                             // 4686\n        };                                                                                                             // 4687\n    }());                                                                                                              // 4688\n                                                                                                                       // 4689\n    /*\\\n     * Paper.image                                                                                                     // 4691\n     [ method ]                                                                                                        // 4692\n     **                                                                                                                // 4693\n     * Places an image on the surface                                                                                  // 4694\n     **                                                                                                                // 4695\n     - src (string) URI of the source image                                                                            // 4696\n     - x (number) x offset position                                                                                    // 4697\n     - y (number) y offset position                                                                                    // 4698\n     - width (number) width of the image                                                                               // 4699\n     - height (number) height of the image                                                                             // 4700\n     = (object) the `image` element                                                                                    // 4701\n     * or                                                                                                              // 4702\n     = (object) Snap element object with type `image`                                                                  // 4703\n     **                                                                                                                // 4704\n     > Usage                                                                                                           // 4705\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);                                                               // 4706\n    \\*/                                                                                                                // 4707\n    proto.image = function (src, x, y, width, height) {                                                                // 4708\n        var el = this.el(\"image\");                                                                                     // 4709\n        if (is(src, \"object\") && \"src\" in src) {                                                                       // 4710\n            el.attr(src);                                                                                              // 4711\n        } else if (src != null) {                                                                                      // 4712\n            var set = {                                                                                                // 4713\n                \"xlink:href\": src,                                                                                     // 4714\n                preserveAspectRatio: \"none\"                                                                            // 4715\n            };                                                                                                         // 4716\n            if (x != null && y != null) {                                                                              // 4717\n                set.x = x;                                                                                             // 4718\n                set.y = y;                                                                                             // 4719\n            }                                                                                                          // 4720\n            if (width != null && height != null) {                                                                     // 4721\n                set.width = width;                                                                                     // 4722\n                set.height = height;                                                                                   // 4723\n            } else {                                                                                                   // 4724\n                preload(src, function () {                                                                             // 4725\n                    Snap._.$(el.node, {                                                                                // 4726\n                        width: this.offsetWidth,                                                                       // 4727\n                        height: this.offsetHeight                                                                      // 4728\n                    });                                                                                                // 4729\n                });                                                                                                    // 4730\n            }                                                                                                          // 4731\n            Snap._.$(el.node, set);                                                                                    // 4732\n        }                                                                                                              // 4733\n        return el;                                                                                                     // 4734\n    };                                                                                                                 // 4735\n    /*\\\n     * Paper.ellipse                                                                                                   // 4737\n     [ method ]                                                                                                        // 4738\n     **                                                                                                                // 4739\n     * Draws an ellipse                                                                                                // 4740\n     **                                                                                                                // 4741\n     - x (number) x coordinate of the centre                                                                           // 4742\n     - y (number) y coordinate of the centre                                                                           // 4743\n     - rx (number) horizontal radius                                                                                   // 4744\n     - ry (number) vertical radius                                                                                     // 4745\n     = (object) the `ellipse` element                                                                                  // 4746\n     **                                                                                                                // 4747\n     > Usage                                                                                                           // 4748\n     | var c = paper.ellipse(50, 50, 40, 20);                                                                          // 4749\n    \\*/                                                                                                                // 4750\n    proto.ellipse = function (cx, cy, rx, ry) {                                                                        // 4751\n        var attr;                                                                                                      // 4752\n        if (is(cx, \"object\") && cx == \"[object Object]\") {                                                             // 4753\n            attr = cx;                                                                                                 // 4754\n        } else if (cx != null) {                                                                                       // 4755\n            attr ={                                                                                                    // 4756\n                cx: cx,                                                                                                // 4757\n                cy: cy,                                                                                                // 4758\n                rx: rx,                                                                                                // 4759\n                ry: ry                                                                                                 // 4760\n            };                                                                                                         // 4761\n        }                                                                                                              // 4762\n        return this.el(\"ellipse\", attr);                                                                               // 4763\n    };                                                                                                                 // 4764\n    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n    /*\\\n     * Paper.path                                                                                                      // 4767\n     [ method ]                                                                                                        // 4768\n     **                                                                                                                // 4769\n     * Creates a `<path>` element using the given string as the path's definition                                      // 4770\n     - pathString (string) #optional path string in SVG format                                                         // 4771\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example: // 4772\n     | \"M10,20L30,40\"                                                                                                  // 4773\n     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n     *                                                                                                                 // 4775\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>                          // 4777\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>                                                               // 4778\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>                                                            // 4779\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>                                                               // 4780\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>                                                        // 4781\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>                                                          // 4782\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>                                                  // 4783\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>                                                 // 4784\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>                                       // 4785\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>                                      // 4786\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>       // 4787\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.                            // 4789\n     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n     > Usage                                                                                                           // 4791\n     | var c = paper.path(\"M10 10L90 90\");                                                                             // 4792\n     | // draw a diagonal line:                                                                                        // 4793\n     | // move to 10,10, line to 90,90                                                                                 // 4794\n    \\*/                                                                                                                // 4795\n    proto.path = function (d) {                                                                                        // 4796\n        var attr;                                                                                                      // 4797\n        if (is(d, \"object\") && !is(d, \"array\")) {                                                                      // 4798\n            attr = d;                                                                                                  // 4799\n        } else if (d) {                                                                                                // 4800\n            attr = {d: d};                                                                                             // 4801\n        }                                                                                                              // 4802\n        return this.el(\"path\", attr);                                                                                  // 4803\n    };                                                                                                                 // 4804\n    /*\\\n     * Paper.g                                                                                                         // 4806\n     [ method ]                                                                                                        // 4807\n     **                                                                                                                // 4808\n     * Creates a group element                                                                                         // 4809\n     **                                                                                                                // 4810\n     - varargs (…) #optional elements to nest within the group                                                         // 4811\n     = (object) the `g` element                                                                                        // 4812\n     **                                                                                                                // 4813\n     > Usage                                                                                                           // 4814\n     | var c1 = paper.circle(),                                                                                        // 4815\n     |     c2 = paper.rect(),                                                                                          // 4816\n     |     g = paper.g(c2, c1); // note that the order of elements is different                                        // 4817\n     * or                                                                                                              // 4818\n     | var c1 = paper.circle(),                                                                                        // 4819\n     |     c2 = paper.rect(),                                                                                          // 4820\n     |     g = paper.g();                                                                                              // 4821\n     | g.add(c2, c1);                                                                                                  // 4822\n    \\*/                                                                                                                // 4823\n    /*\\\n     * Paper.group                                                                                                     // 4825\n     [ method ]                                                                                                        // 4826\n     **                                                                                                                // 4827\n     * See @Paper.g                                                                                                    // 4828\n    \\*/                                                                                                                // 4829\n    proto.group = proto.g = function (first) {                                                                         // 4830\n        var attr,                                                                                                      // 4831\n            el = this.el(\"g\");                                                                                         // 4832\n        if (arguments.length == 1 && first && !first.type) {                                                           // 4833\n            el.attr(first);                                                                                            // 4834\n        } else if (arguments.length) {                                                                                 // 4835\n            el.add(Array.prototype.slice.call(arguments, 0));                                                          // 4836\n        }                                                                                                              // 4837\n        return el;                                                                                                     // 4838\n    };                                                                                                                 // 4839\n    /*\\\n     * Paper.svg                                                                                                       // 4841\n     [ method ]                                                                                                        // 4842\n     **                                                                                                                // 4843\n     * Creates a nested SVG element.                                                                                   // 4844\n     - x (number) @optional X of the element                                                                           // 4845\n     - y (number) @optional Y of the element                                                                           // 4846\n     - width (number) @optional width of the element                                                                   // 4847\n     - height (number) @optional height of the element                                                                 // 4848\n     - vbx (number) @optional viewbox X                                                                                // 4849\n     - vby (number) @optional viewbox Y                                                                                // 4850\n     - vbw (number) @optional viewbox width                                                                            // 4851\n     - vbh (number) @optional viewbox height                                                                           // 4852\n     **                                                                                                                // 4853\n     = (object) the `svg` element                                                                                      // 4854\n     **                                                                                                                // 4855\n    \\*/                                                                                                                // 4856\n    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {                                                   // 4857\n        var attrs = {};                                                                                                // 4858\n        if (is(x, \"object\") && y == null) {                                                                            // 4859\n            attrs = x;                                                                                                 // 4860\n        } else {                                                                                                       // 4861\n            if (x != null) {                                                                                           // 4862\n                attrs.x = x;                                                                                           // 4863\n            }                                                                                                          // 4864\n            if (y != null) {                                                                                           // 4865\n                attrs.y = y;                                                                                           // 4866\n            }                                                                                                          // 4867\n            if (width != null) {                                                                                       // 4868\n                attrs.width = width;                                                                                   // 4869\n            }                                                                                                          // 4870\n            if (height != null) {                                                                                      // 4871\n                attrs.height = height;                                                                                 // 4872\n            }                                                                                                          // 4873\n            if (vbx != null && vby != null && vbw != null && vbh != null) {                                            // 4874\n                attrs.viewBox = [vbx, vby, vbw, vbh];                                                                  // 4875\n            }                                                                                                          // 4876\n        }                                                                                                              // 4877\n        return this.el(\"svg\", attrs);                                                                                  // 4878\n    };                                                                                                                 // 4879\n    /*\\\n     * Paper.mask                                                                                                      // 4881\n     [ method ]                                                                                                        // 4882\n     **                                                                                                                // 4883\n     * Equivalent in behaviour to @Paper.g, except it’s a mask.                                                        // 4884\n     **                                                                                                                // 4885\n     = (object) the `mask` element                                                                                     // 4886\n     **                                                                                                                // 4887\n    \\*/                                                                                                                // 4888\n    proto.mask = function (first) {                                                                                    // 4889\n        var attr,                                                                                                      // 4890\n            el = this.el(\"mask\");                                                                                      // 4891\n        if (arguments.length == 1 && first && !first.type) {                                                           // 4892\n            el.attr(first);                                                                                            // 4893\n        } else if (arguments.length) {                                                                                 // 4894\n            el.add(Array.prototype.slice.call(arguments, 0));                                                          // 4895\n        }                                                                                                              // 4896\n        return el;                                                                                                     // 4897\n    };                                                                                                                 // 4898\n    /*\\\n     * Paper.ptrn                                                                                                      // 4900\n     [ method ]                                                                                                        // 4901\n     **                                                                                                                // 4902\n     * Equivalent in behaviour to @Paper.g, except it’s a pattern.                                                     // 4903\n     - x (number) @optional X of the element                                                                           // 4904\n     - y (number) @optional Y of the element                                                                           // 4905\n     - width (number) @optional width of the element                                                                   // 4906\n     - height (number) @optional height of the element                                                                 // 4907\n     - vbx (number) @optional viewbox X                                                                                // 4908\n     - vby (number) @optional viewbox Y                                                                                // 4909\n     - vbw (number) @optional viewbox width                                                                            // 4910\n     - vbh (number) @optional viewbox height                                                                           // 4911\n     **                                                                                                                // 4912\n     = (object) the `pattern` element                                                                                  // 4913\n     **                                                                                                                // 4914\n    \\*/                                                                                                                // 4915\n    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {                                                      // 4916\n        if (is(x, \"object\")) {                                                                                         // 4917\n            var attr = x;                                                                                              // 4918\n        } else {                                                                                                       // 4919\n            attr = {patternUnits: \"userSpaceOnUse\"};                                                                   // 4920\n            if (x) {                                                                                                   // 4921\n                attr.x = x;                                                                                            // 4922\n            }                                                                                                          // 4923\n            if (y) {                                                                                                   // 4924\n                attr.y = y;                                                                                            // 4925\n            }                                                                                                          // 4926\n            if (width != null) {                                                                                       // 4927\n                attr.width = width;                                                                                    // 4928\n            }                                                                                                          // 4929\n            if (height != null) {                                                                                      // 4930\n                attr.height = height;                                                                                  // 4931\n            }                                                                                                          // 4932\n            if (vx != null && vy != null && vw != null && vh != null) {                                                // 4933\n                attr.viewBox = [vx, vy, vw, vh];                                                                       // 4934\n            } else {                                                                                                   // 4935\n                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];                                              // 4936\n            }                                                                                                          // 4937\n        }                                                                                                              // 4938\n        return this.el(\"pattern\", attr);                                                                               // 4939\n    };                                                                                                                 // 4940\n    /*\\\n     * Paper.use                                                                                                       // 4942\n     [ method ]                                                                                                        // 4943\n     **                                                                                                                // 4944\n     * Creates a <use> element.                                                                                        // 4945\n     - id (string) @optional id of element to link                                                                     // 4946\n     * or                                                                                                              // 4947\n     - id (Element) @optional element to link                                                                          // 4948\n     **                                                                                                                // 4949\n     = (object) the `use` element                                                                                      // 4950\n     **                                                                                                                // 4951\n    \\*/                                                                                                                // 4952\n    proto.use = function (id) {                                                                                        // 4953\n        if (id != null) {                                                                                              // 4954\n            if (id instanceof Element) {                                                                               // 4955\n                if (!id.attr(\"id\")) {                                                                                  // 4956\n                    id.attr({id: Snap._.id(id)});                                                                      // 4957\n                }                                                                                                      // 4958\n                id = id.attr(\"id\");                                                                                    // 4959\n            }                                                                                                          // 4960\n            if (String(id).charAt() == \"#\") {                                                                          // 4961\n                id = id.substring(1);                                                                                  // 4962\n            }                                                                                                          // 4963\n            return this.el(\"use\", {\"xlink:href\": \"#\" + id});                                                           // 4964\n        } else {                                                                                                       // 4965\n            return Element.prototype.use.call(this);                                                                   // 4966\n        }                                                                                                              // 4967\n    };                                                                                                                 // 4968\n    /*\\\n     * Paper.symbol                                                                                                    // 4970\n     [ method ]                                                                                                        // 4971\n     **                                                                                                                // 4972\n     * Creates a <symbol> element.                                                                                     // 4973\n     - vbx (number) @optional viewbox X                                                                                // 4974\n     - vby (number) @optional viewbox Y                                                                                // 4975\n     - vbw (number) @optional viewbox width                                                                            // 4976\n     - vbh (number) @optional viewbox height                                                                           // 4977\n     = (object) the `symbol` element                                                                                   // 4978\n     **                                                                                                                // 4979\n    \\*/                                                                                                                // 4980\n    proto.symbol = function (vx, vy, vw, vh) {                                                                         // 4981\n        var attr = {};                                                                                                 // 4982\n        if (vx != null && vy != null && vw != null && vh != null) {                                                    // 4983\n            attr.viewBox = [vx, vy, vw, vh];                                                                           // 4984\n        }                                                                                                              // 4985\n                                                                                                                       // 4986\n        return this.el(\"symbol\", attr);                                                                                // 4987\n    };                                                                                                                 // 4988\n    /*\\\n     * Paper.text                                                                                                      // 4990\n     [ method ]                                                                                                        // 4991\n     **                                                                                                                // 4992\n     * Draws a text string                                                                                             // 4993\n     **                                                                                                                // 4994\n     - x (number) x coordinate position                                                                                // 4995\n     - y (number) y coordinate position                                                                                // 4996\n     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements      // 4997\n     = (object) the `text` element                                                                                     // 4998\n     **                                                                                                                // 4999\n     > Usage                                                                                                           // 5000\n     | var t1 = paper.text(50, 50, \"Snap\");                                                                            // 5001\n     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);                                                                 // 5002\n     | // Text path usage                                                                                              // 5003\n     | t1.attr({textpath: \"M10,10L100,100\"});                                                                          // 5004\n     | // or                                                                                                           // 5005\n     | var pth = paper.path(\"M10,10L100,100\");                                                                         // 5006\n     | t1.attr({textpath: pth});                                                                                       // 5007\n    \\*/                                                                                                                // 5008\n    proto.text = function (x, y, text) {                                                                               // 5009\n        var attr = {};                                                                                                 // 5010\n        if (is(x, \"object\")) {                                                                                         // 5011\n            attr = x;                                                                                                  // 5012\n        } else if (x != null) {                                                                                        // 5013\n            attr = {                                                                                                   // 5014\n                x: x,                                                                                                  // 5015\n                y: y,                                                                                                  // 5016\n                text: text || \"\"                                                                                       // 5017\n            };                                                                                                         // 5018\n        }                                                                                                              // 5019\n        return this.el(\"text\", attr);                                                                                  // 5020\n    };                                                                                                                 // 5021\n    /*\\\n     * Paper.line                                                                                                      // 5023\n     [ method ]                                                                                                        // 5024\n     **                                                                                                                // 5025\n     * Draws a line                                                                                                    // 5026\n     **                                                                                                                // 5027\n     - x1 (number) x coordinate position of the start                                                                  // 5028\n     - y1 (number) y coordinate position of the start                                                                  // 5029\n     - x2 (number) x coordinate position of the end                                                                    // 5030\n     - y2 (number) y coordinate position of the end                                                                    // 5031\n     = (object) the `line` element                                                                                     // 5032\n     **                                                                                                                // 5033\n     > Usage                                                                                                           // 5034\n     | var t1 = paper.line(50, 50, 100, 100);                                                                          // 5035\n    \\*/                                                                                                                // 5036\n    proto.line = function (x1, y1, x2, y2) {                                                                           // 5037\n        var attr = {};                                                                                                 // 5038\n        if (is(x1, \"object\")) {                                                                                        // 5039\n            attr = x1;                                                                                                 // 5040\n        } else if (x1 != null) {                                                                                       // 5041\n            attr = {                                                                                                   // 5042\n                x1: x1,                                                                                                // 5043\n                x2: x2,                                                                                                // 5044\n                y1: y1,                                                                                                // 5045\n                y2: y2                                                                                                 // 5046\n            };                                                                                                         // 5047\n        }                                                                                                              // 5048\n        return this.el(\"line\", attr);                                                                                  // 5049\n    };                                                                                                                 // 5050\n    /*\\\n     * Paper.polyline                                                                                                  // 5052\n     [ method ]                                                                                                        // 5053\n     **                                                                                                                // 5054\n     * Draws a polyline                                                                                                // 5055\n     **                                                                                                                // 5056\n     - points (array) array of points                                                                                  // 5057\n     * or                                                                                                              // 5058\n     - varargs (…) points                                                                                              // 5059\n     = (object) the `polyline` element                                                                                 // 5060\n     **                                                                                                                // 5061\n     > Usage                                                                                                           // 5062\n     | var p1 = paper.polyline([10, 10, 100, 100]);                                                                    // 5063\n     | var p2 = paper.polyline(10, 10, 100, 100);                                                                      // 5064\n    \\*/                                                                                                                // 5065\n    proto.polyline = function (points) {                                                                               // 5066\n        if (arguments.length > 1) {                                                                                    // 5067\n            points = Array.prototype.slice.call(arguments, 0);                                                         // 5068\n        }                                                                                                              // 5069\n        var attr = {};                                                                                                 // 5070\n        if (is(points, \"object\") && !is(points, \"array\")) {                                                            // 5071\n            attr = points;                                                                                             // 5072\n        } else if (points != null) {                                                                                   // 5073\n            attr = {points: points};                                                                                   // 5074\n        }                                                                                                              // 5075\n        return this.el(\"polyline\", attr);                                                                              // 5076\n    };                                                                                                                 // 5077\n    /*\\\n     * Paper.polygon                                                                                                   // 5079\n     [ method ]                                                                                                        // 5080\n     **                                                                                                                // 5081\n     * Draws a polygon. See @Paper.polyline                                                                            // 5082\n    \\*/                                                                                                                // 5083\n    proto.polygon = function (points) {                                                                                // 5084\n        if (arguments.length > 1) {                                                                                    // 5085\n            points = Array.prototype.slice.call(arguments, 0);                                                         // 5086\n        }                                                                                                              // 5087\n        var attr = {};                                                                                                 // 5088\n        if (is(points, \"object\") && !is(points, \"array\")) {                                                            // 5089\n            attr = points;                                                                                             // 5090\n        } else if (points != null) {                                                                                   // 5091\n            attr = {points: points};                                                                                   // 5092\n        }                                                                                                              // 5093\n        return this.el(\"polygon\", attr);                                                                               // 5094\n    };                                                                                                                 // 5095\n    // gradients                                                                                                       // 5096\n    (function () {                                                                                                     // 5097\n        var $ = Snap._.$;                                                                                              // 5098\n        // gradients' helpers                                                                                          // 5099\n        function Gstops() {                                                                                            // 5100\n            return this.selectAll(\"stop\");                                                                             // 5101\n        }                                                                                                              // 5102\n        function GaddStop(color, offset) {                                                                             // 5103\n            var stop = $(\"stop\"),                                                                                      // 5104\n                attr = {                                                                                               // 5105\n                    offset: +offset + \"%\"                                                                              // 5106\n                };                                                                                                     // 5107\n            color = Snap.color(color);                                                                                 // 5108\n            attr[\"stop-color\"] = color.hex;                                                                            // 5109\n            if (color.opacity < 1) {                                                                                   // 5110\n                attr[\"stop-opacity\"] = color.opacity;                                                                  // 5111\n            }                                                                                                          // 5112\n            $(stop, attr);                                                                                             // 5113\n            this.node.appendChild(stop);                                                                               // 5114\n            return this;                                                                                               // 5115\n        }                                                                                                              // 5116\n        function GgetBBox() {                                                                                          // 5117\n            if (this.type == \"linearGradient\") {                                                                       // 5118\n                var x1 = $(this.node, \"x1\") || 0,                                                                      // 5119\n                    x2 = $(this.node, \"x2\") || 1,                                                                      // 5120\n                    y1 = $(this.node, \"y1\") || 0,                                                                      // 5121\n                    y2 = $(this.node, \"y2\") || 0;                                                                      // 5122\n                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));                                       // 5123\n            } else {                                                                                                   // 5124\n                var cx = this.node.cx || .5,                                                                           // 5125\n                    cy = this.node.cy || .5,                                                                           // 5126\n                    r = this.node.r || 0;                                                                              // 5127\n                return Snap._.box(cx - r, cy - r, r * 2, r * 2);                                                       // 5128\n            }                                                                                                          // 5129\n        }                                                                                                              // 5130\n        function gradient(defs, str) {                                                                                 // 5131\n            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),                                          // 5132\n                el;                                                                                                    // 5133\n            if (!grad) {                                                                                               // 5134\n                return null;                                                                                           // 5135\n            }                                                                                                          // 5136\n            grad.params.unshift(defs);                                                                                 // 5137\n            if (grad.type.toLowerCase() == \"l\") {                                                                      // 5138\n                el = gradientLinear.apply(0, grad.params);                                                             // 5139\n            } else {                                                                                                   // 5140\n                el = gradientRadial.apply(0, grad.params);                                                             // 5141\n            }                                                                                                          // 5142\n            if (grad.type != grad.type.toLowerCase()) {                                                                // 5143\n                $(el.node, {                                                                                           // 5144\n                    gradientUnits: \"userSpaceOnUse\"                                                                    // 5145\n                });                                                                                                    // 5146\n            }                                                                                                          // 5147\n            var stops = grad.stops,                                                                                    // 5148\n                len = stops.length,                                                                                    // 5149\n                start = 0,                                                                                             // 5150\n                j = 0;                                                                                                 // 5151\n            function seed(i, end) {                                                                                    // 5152\n                var step = (end - start) / (i - j);                                                                    // 5153\n                for (var k = j; k < i; k++) {                                                                          // 5154\n                    stops[k].offset = +(+start + step * (k - j)).toFixed(2);                                           // 5155\n                }                                                                                                      // 5156\n                j = i;                                                                                                 // 5157\n                start = end;                                                                                           // 5158\n            }                                                                                                          // 5159\n            len--;                                                                                                     // 5160\n            for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {                                                  // 5161\n                seed(i, stops[i].offset);                                                                              // 5162\n            }                                                                                                          // 5163\n            stops[len].offset = stops[len].offset || 100;                                                              // 5164\n            seed(len, stops[len].offset);                                                                              // 5165\n            for (i = 0; i <= len; i++) {                                                                               // 5166\n                var stop = stops[i];                                                                                   // 5167\n                el.addStop(stop.color, stop.offset);                                                                   // 5168\n            }                                                                                                          // 5169\n            return el;                                                                                                 // 5170\n        }                                                                                                              // 5171\n        function gradientLinear(defs, x1, y1, x2, y2) {                                                                // 5172\n            var el = Snap._.make(\"linearGradient\", defs);                                                              // 5173\n            el.stops = Gstops;                                                                                         // 5174\n            el.addStop = GaddStop;                                                                                     // 5175\n            el.getBBox = GgetBBox;                                                                                     // 5176\n            if (x1 != null) {                                                                                          // 5177\n                $(el.node, {                                                                                           // 5178\n                    x1: x1,                                                                                            // 5179\n                    y1: y1,                                                                                            // 5180\n                    x2: x2,                                                                                            // 5181\n                    y2: y2                                                                                             // 5182\n                });                                                                                                    // 5183\n            }                                                                                                          // 5184\n            return el;                                                                                                 // 5185\n        }                                                                                                              // 5186\n        function gradientRadial(defs, cx, cy, r, fx, fy) {                                                             // 5187\n            var el = Snap._.make(\"radialGradient\", defs);                                                              // 5188\n            el.stops = Gstops;                                                                                         // 5189\n            el.addStop = GaddStop;                                                                                     // 5190\n            el.getBBox = GgetBBox;                                                                                     // 5191\n            if (cx != null) {                                                                                          // 5192\n                $(el.node, {                                                                                           // 5193\n                    cx: cx,                                                                                            // 5194\n                    cy: cy,                                                                                            // 5195\n                    r: r                                                                                               // 5196\n                });                                                                                                    // 5197\n            }                                                                                                          // 5198\n            if (fx != null && fy != null) {                                                                            // 5199\n                $(el.node, {                                                                                           // 5200\n                    fx: fx,                                                                                            // 5201\n                    fy: fy                                                                                             // 5202\n                });                                                                                                    // 5203\n            }                                                                                                          // 5204\n            return el;                                                                                                 // 5205\n        }                                                                                                              // 5206\n        /*\\\n         * Paper.gradient                                                                                              // 5208\n         [ method ]                                                                                                    // 5209\n         **                                                                                                            // 5210\n         * Creates a gradient element                                                                                  // 5211\n         **                                                                                                            // 5212\n         - gradient (string) gradient descriptor                                                                       // 5213\n         > Gradient Descriptor                                                                                         // 5214\n         * The gradient descriptor is an expression formatted as                                                       // 5215\n         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be                                                   // 5216\n         * either linear or radial.  The uppercase `L` or `R` letters                                                  // 5217\n         * indicate absolute coordinates offset from the SVG surface.                                                  // 5218\n         * Lowercase `l` or `r` letters indicate coordinates                                                           // 5219\n         * calculated relative to the element to which the gradient is                                                 // 5220\n         * applied.  Coordinates specify a linear gradient vector as                                                   // 5221\n         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,                                                 // 5222\n         * `r` and optional `fx`, `fy` specifying a focal point away                                                   // 5223\n         * from the center of the circle. Specify `<colors>` as a list                                                 // 5224\n         * of dash-separated CSS color values.  Each color may be                                                      // 5225\n         * followed by a custom offset value, separated with a colon                                                   // 5226\n         * character.                                                                                                  // 5227\n         > Examples                                                                                                    // 5228\n         * Linear gradient, relative from top-left corner to bottom-right                                              // 5229\n         * corner, from black through red to white:                                                                    // 5230\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");                                                      // 5231\n         * Linear gradient, absolute from (0, 0) to (100, 100), from black                                             // 5232\n         * through red at 25% to white:                                                                                // 5233\n         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");                                               // 5234\n         * Radial gradient, relative from the center of the element with radius                                        // 5235\n         * half the width, from black to white:                                                                        // 5236\n         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");                                                        // 5237\n         * To apply the gradient:                                                                                      // 5238\n         | paper.circle(50, 50, 40).attr({                                                                             // 5239\n         |     fill: g                                                                                                 // 5240\n         | });                                                                                                         // 5241\n         = (object) the `gradient` element                                                                             // 5242\n        \\*/                                                                                                            // 5243\n        proto.gradient = function (str) {                                                                              // 5244\n            return gradient(this.defs, str);                                                                           // 5245\n        };                                                                                                             // 5246\n        proto.gradientLinear = function (x1, y1, x2, y2) {                                                             // 5247\n            return gradientLinear(this.defs, x1, y1, x2, y2);                                                          // 5248\n        };                                                                                                             // 5249\n        proto.gradientRadial = function (cx, cy, r, fx, fy) {                                                          // 5250\n            return gradientRadial(this.defs, cx, cy, r, fx, fy);                                                       // 5251\n        };                                                                                                             // 5252\n        /*\\\n         * Paper.toString                                                                                              // 5254\n         [ method ]                                                                                                    // 5255\n         **                                                                                                            // 5256\n         * Returns SVG code for the @Paper                                                                             // 5257\n         = (string) SVG code for the @Paper                                                                            // 5258\n        \\*/                                                                                                            // 5259\n        proto.toString = function () {                                                                                 // 5260\n            var doc = this.node.ownerDocument,                                                                         // 5261\n                f = doc.createDocumentFragment(),                                                                      // 5262\n                d = doc.createElement(\"div\"),                                                                          // 5263\n                svg = this.node.cloneNode(true),                                                                       // 5264\n                res;                                                                                                   // 5265\n            f.appendChild(d);                                                                                          // 5266\n            d.appendChild(svg);                                                                                        // 5267\n            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});                                                      // 5268\n            res = d.innerHTML;                                                                                         // 5269\n            f.removeChild(f.firstChild);                                                                               // 5270\n            return res;                                                                                                // 5271\n        };                                                                                                             // 5272\n        /*\\\n         * Paper.toDataURL                                                                                             // 5274\n         [ method ]                                                                                                    // 5275\n         **                                                                                                            // 5276\n         * Returns SVG code for the @Paper as Data URI string.                                                         // 5277\n         = (string) Data URI string                                                                                    // 5278\n        \\*/                                                                                                            // 5279\n        proto.toDataURL = function () {                                                                                // 5280\n            if (window && window.btoa) {                                                                               // 5281\n                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));                        // 5282\n            }                                                                                                          // 5283\n        };                                                                                                             // 5284\n        /*\\\n         * Paper.clear                                                                                                 // 5286\n         [ method ]                                                                                                    // 5287\n         **                                                                                                            // 5288\n         * Removes all child nodes of the paper, except <defs>.                                                        // 5289\n        \\*/                                                                                                            // 5290\n        proto.clear = function () {                                                                                    // 5291\n            var node = this.node.firstChild,                                                                           // 5292\n                next;                                                                                                  // 5293\n            while (node) {                                                                                             // 5294\n                next = node.nextSibling;                                                                               // 5295\n                if (node.tagName != \"defs\") {                                                                          // 5296\n                    node.parentNode.removeChild(node);                                                                 // 5297\n                } else {                                                                                               // 5298\n                    proto.clear.call({node: node});                                                                    // 5299\n                }                                                                                                      // 5300\n                node = next;                                                                                           // 5301\n            }                                                                                                          // 5302\n        };                                                                                                             // 5303\n    }());                                                                                                              // 5304\n});                                                                                                                    // 5305\n                                                                                                                       // 5306\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 5307\n//                                                                                                                     // 5308\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 5309\n// you may not use this file except in compliance with the License.                                                    // 5310\n// You may obtain a copy of the License at                                                                             // 5311\n//                                                                                                                     // 5312\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 5313\n//                                                                                                                     // 5314\n// Unless required by applicable law or agreed to in writing, software                                                 // 5315\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 5316\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 5317\n// See the License for the specific language governing permissions and                                                 // 5318\n// limitations under the License.                                                                                      // 5319\nSnap.plugin(function (Snap, Element, Paper, glob) {                                                                    // 5320\n    var elproto = Element.prototype,                                                                                   // 5321\n        is = Snap.is,                                                                                                  // 5322\n        clone = Snap._.clone,                                                                                          // 5323\n        has = \"hasOwnProperty\",                                                                                        // 5324\n        p2s = /,?([a-z]),?/gi,                                                                                         // 5325\n        toFloat = parseFloat,                                                                                          // 5326\n        math = Math,                                                                                                   // 5327\n        PI = math.PI,                                                                                                  // 5328\n        mmin = math.min,                                                                                               // 5329\n        mmax = math.max,                                                                                               // 5330\n        pow = math.pow,                                                                                                // 5331\n        abs = math.abs;                                                                                                // 5332\n    function paths(ps) {                                                                                               // 5333\n        var p = paths.ps = paths.ps || {};                                                                             // 5334\n        if (p[ps]) {                                                                                                   // 5335\n            p[ps].sleep = 100;                                                                                         // 5336\n        } else {                                                                                                       // 5337\n            p[ps] = {                                                                                                  // 5338\n                sleep: 100                                                                                             // 5339\n            };                                                                                                         // 5340\n        }                                                                                                              // 5341\n        setTimeout(function () {                                                                                       // 5342\n            for (var key in p) if (p[has](key) && key != ps) {                                                         // 5343\n                p[key].sleep--;                                                                                        // 5344\n                !p[key].sleep && delete p[key];                                                                        // 5345\n            }                                                                                                          // 5346\n        });                                                                                                            // 5347\n        return p[ps];                                                                                                  // 5348\n    }                                                                                                                  // 5349\n    function box(x, y, width, height) {                                                                                // 5350\n        if (x == null) {                                                                                               // 5351\n            x = y = width = height = 0;                                                                                // 5352\n        }                                                                                                              // 5353\n        if (y == null) {                                                                                               // 5354\n            y = x.y;                                                                                                   // 5355\n            width = x.width;                                                                                           // 5356\n            height = x.height;                                                                                         // 5357\n            x = x.x;                                                                                                   // 5358\n        }                                                                                                              // 5359\n        return {                                                                                                       // 5360\n            x: x,                                                                                                      // 5361\n            y: y,                                                                                                      // 5362\n            width: width,                                                                                              // 5363\n            w: width,                                                                                                  // 5364\n            height: height,                                                                                            // 5365\n            h: height,                                                                                                 // 5366\n            x2: x + width,                                                                                             // 5367\n            y2: y + height,                                                                                            // 5368\n            cx: x + width / 2,                                                                                         // 5369\n            cy: y + height / 2,                                                                                        // 5370\n            r1: math.min(width, height) / 2,                                                                           // 5371\n            r2: math.max(width, height) / 2,                                                                           // 5372\n            r0: math.sqrt(width * width + height * height) / 2,                                                        // 5373\n            path: rectPath(x, y, width, height),                                                                       // 5374\n            vb: [x, y, width, height].join(\" \")                                                                        // 5375\n        };                                                                                                             // 5376\n    }                                                                                                                  // 5377\n    function toString() {                                                                                              // 5378\n        return this.join(\",\").replace(p2s, \"$1\");                                                                      // 5379\n    }                                                                                                                  // 5380\n    function pathClone(pathArray) {                                                                                    // 5381\n        var res = clone(pathArray);                                                                                    // 5382\n        res.toString = toString;                                                                                       // 5383\n        return res;                                                                                                    // 5384\n    }                                                                                                                  // 5385\n    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {                                 // 5386\n        if (length == null) {                                                                                          // 5387\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);                                                     // 5388\n        } else {                                                                                                       // 5389\n            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,                                           // 5390\n                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));                                            // 5391\n        }                                                                                                              // 5392\n    }                                                                                                                  // 5393\n    function getLengthFactory(istotal, subpath) {                                                                      // 5394\n        function O(val) {                                                                                              // 5395\n            return +(+val).toFixed(3);                                                                                 // 5396\n        }                                                                                                              // 5397\n        return Snap._.cacher(function (path, length, onlystart) {                                                      // 5398\n            if (path instanceof Element) {                                                                             // 5399\n                path = path.attr(\"d\");                                                                                 // 5400\n            }                                                                                                          // 5401\n            path = path2curve(path);                                                                                   // 5402\n            var x, y, p, l, sp = \"\", subpaths = {}, point,                                                             // 5403\n                len = 0;                                                                                               // 5404\n            for (var i = 0, ii = path.length; i < ii; i++) {                                                           // 5405\n                p = path[i];                                                                                           // 5406\n                if (p[0] == \"M\") {                                                                                     // 5407\n                    x = +p[1];                                                                                         // 5408\n                    y = +p[2];                                                                                         // 5409\n                } else {                                                                                               // 5410\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);                             // 5411\n                    if (len + l > length) {                                                                            // 5412\n                        if (subpath && !subpaths.start) {                                                              // 5413\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);   // 5414\n                            sp += [                                                                                    // 5415\n                                \"C\" + O(point.start.x),                                                                // 5416\n                                O(point.start.y),                                                                      // 5417\n                                O(point.m.x),                                                                          // 5418\n                                O(point.m.y),                                                                          // 5419\n                                O(point.x),                                                                            // 5420\n                                O(point.y)                                                                             // 5421\n                            ];                                                                                         // 5422\n                            if (onlystart) {return sp;}                                                                // 5423\n                            subpaths.start = sp;                                                                       // 5424\n                            sp = [                                                                                     // 5425\n                                \"M\" + O(point.x),                                                                      // 5426\n                                O(point.y) + \"C\" + O(point.n.x),                                                       // 5427\n                                O(point.n.y),                                                                          // 5428\n                                O(point.end.x),                                                                        // 5429\n                                O(point.end.y),                                                                        // 5430\n                                O(p[5]),                                                                               // 5431\n                                O(p[6])                                                                                // 5432\n                            ].join();                                                                                  // 5433\n                            len += l;                                                                                  // 5434\n                            x = +p[5];                                                                                 // 5435\n                            y = +p[6];                                                                                 // 5436\n                            continue;                                                                                  // 5437\n                        }                                                                                              // 5438\n                        if (!istotal && !subpath) {                                                                    // 5439\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);   // 5440\n                            return point;                                                                              // 5441\n                        }                                                                                              // 5442\n                    }                                                                                                  // 5443\n                    len += l;                                                                                          // 5444\n                    x = +p[5];                                                                                         // 5445\n                    y = +p[6];                                                                                         // 5446\n                }                                                                                                      // 5447\n                sp += p.shift() + p;                                                                                   // 5448\n            }                                                                                                          // 5449\n            subpaths.end = sp;                                                                                         // 5450\n            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            return point;                                                                                              // 5452\n        }, null, Snap._.clone);                                                                                        // 5453\n    }                                                                                                                  // 5454\n    var getTotalLength = getLengthFactory(1),                                                                          // 5455\n        getPointAtLength = getLengthFactory(),                                                                         // 5456\n        getSubpathsAtLength = getLengthFactory(0, 1);                                                                  // 5457\n    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {                                            // 5458\n        var t1 = 1 - t,                                                                                                // 5459\n            t13 = pow(t1, 3),                                                                                          // 5460\n            t12 = pow(t1, 2),                                                                                          // 5461\n            t2 = t * t,                                                                                                // 5462\n            t3 = t2 * t,                                                                                               // 5463\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,                                       // 5464\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,                                       // 5465\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),                                               // 5466\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),                                               // 5467\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),                                               // 5468\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),                                               // 5469\n            ax = t1 * p1x + t * c1x,                                                                                   // 5470\n            ay = t1 * p1y + t * c1y,                                                                                   // 5471\n            cx = t1 * c2x + t * p2x,                                                                                   // 5472\n            cy = t1 * c2y + t * p2y,                                                                                   // 5473\n            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);                                                    // 5474\n        // (mx > nx || my < ny) && (alpha += 180);                                                                     // 5475\n        return {                                                                                                       // 5476\n            x: x,                                                                                                      // 5477\n            y: y,                                                                                                      // 5478\n            m: {x: mx, y: my},                                                                                         // 5479\n            n: {x: nx, y: ny},                                                                                         // 5480\n            start: {x: ax, y: ay},                                                                                     // 5481\n            end: {x: cx, y: cy},                                                                                       // 5482\n            alpha: alpha                                                                                               // 5483\n        };                                                                                                             // 5484\n    }                                                                                                                  // 5485\n    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {                                                      // 5486\n        if (!Snap.is(p1x, \"array\")) {                                                                                  // 5487\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];                                                            // 5488\n        }                                                                                                              // 5489\n        var bbox = curveDim.apply(null, p1x);                                                                          // 5490\n        return box(                                                                                                    // 5491\n            bbox.min.x,                                                                                                // 5492\n            bbox.min.y,                                                                                                // 5493\n            bbox.max.x - bbox.min.x,                                                                                   // 5494\n            bbox.max.y - bbox.min.y                                                                                    // 5495\n        );                                                                                                             // 5496\n    }                                                                                                                  // 5497\n    function isPointInsideBBox(bbox, x, y) {                                                                           // 5498\n        return  x >= bbox.x &&                                                                                         // 5499\n                x <= bbox.x + bbox.width &&                                                                            // 5500\n                y >= bbox.y &&                                                                                         // 5501\n                y <= bbox.y + bbox.height;                                                                             // 5502\n    }                                                                                                                  // 5503\n    function isBBoxIntersect(bbox1, bbox2) {                                                                           // 5504\n        bbox1 = box(bbox1);                                                                                            // 5505\n        bbox2 = box(bbox2);                                                                                            // 5506\n        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)                                                              // 5507\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)                                                             // 5508\n            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)                                                             // 5509\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)                                                            // 5510\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)                                                              // 5511\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)                                                             // 5512\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)                                                             // 5513\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)                                                            // 5514\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x                                                                // 5515\n                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)                                                            // 5516\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y                                                                // 5517\n                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);                                                           // 5518\n    }                                                                                                                  // 5519\n    function base3(t, p1, p2, p3, p4) {                                                                                // 5520\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,                                                                   // 5521\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;                                                                   // 5522\n        return t * t2 - 3 * p1 + 3 * p2;                                                                               // 5523\n    }                                                                                                                  // 5524\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {                                                               // 5525\n        if (z == null) {                                                                                               // 5526\n            z = 1;                                                                                                     // 5527\n        }                                                                                                              // 5528\n        z = z > 1 ? 1 : z < 0 ? 0 : z;                                                                                 // 5529\n        var z2 = z / 2,                                                                                                // 5530\n            n = 12,                                                                                                    // 5531\n            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],                 // 5532\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],           // 5533\n            sum = 0;                                                                                                   // 5534\n        for (var i = 0; i < n; i++) {                                                                                  // 5535\n            var ct = z2 * Tvalues[i] + z2,                                                                             // 5536\n                xbase = base3(ct, x1, x2, x3, x4),                                                                     // 5537\n                ybase = base3(ct, y1, y2, y3, y4),                                                                     // 5538\n                comb = xbase * xbase + ybase * ybase;                                                                  // 5539\n            sum += Cvalues[i] * math.sqrt(comb);                                                                       // 5540\n        }                                                                                                              // 5541\n        return z2 * sum;                                                                                               // 5542\n    }                                                                                                                  // 5543\n    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {                                                           // 5544\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {                                                   // 5545\n            return;                                                                                                    // 5546\n        }                                                                                                              // 5547\n        var t = 1,                                                                                                     // 5548\n            step = t / 2,                                                                                              // 5549\n            t2 = t - step,                                                                                             // 5550\n            l,                                                                                                         // 5551\n            e = .01;                                                                                                   // 5552\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);                                                                // 5553\n        while (abs(l - ll) > e) {                                                                                      // 5554\n            step /= 2;                                                                                                 // 5555\n            t2 += (l < ll ? 1 : -1) * step;                                                                            // 5556\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);                                                            // 5557\n        }                                                                                                              // 5558\n        return t2;                                                                                                     // 5559\n    }                                                                                                                  // 5560\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {                                                               // 5561\n        if (                                                                                                           // 5562\n            mmax(x1, x2) < mmin(x3, x4) ||                                                                             // 5563\n            mmin(x1, x2) > mmax(x3, x4) ||                                                                             // 5564\n            mmax(y1, y2) < mmin(y3, y4) ||                                                                             // 5565\n            mmin(y1, y2) > mmax(y3, y4)                                                                                // 5566\n        ) {                                                                                                            // 5567\n            return;                                                                                                    // 5568\n        }                                                                                                              // 5569\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),                                    // 5570\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),                                    // 5571\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);                                               // 5572\n                                                                                                                       // 5573\n        if (!denominator) {                                                                                            // 5574\n            return;                                                                                                    // 5575\n        }                                                                                                              // 5576\n        var px = nx / denominator,                                                                                     // 5577\n            py = ny / denominator,                                                                                     // 5578\n            px2 = +px.toFixed(2),                                                                                      // 5579\n            py2 = +py.toFixed(2);                                                                                      // 5580\n        if (                                                                                                           // 5581\n            px2 < +mmin(x1, x2).toFixed(2) ||                                                                          // 5582\n            px2 > +mmax(x1, x2).toFixed(2) ||                                                                          // 5583\n            px2 < +mmin(x3, x4).toFixed(2) ||                                                                          // 5584\n            px2 > +mmax(x3, x4).toFixed(2) ||                                                                          // 5585\n            py2 < +mmin(y1, y2).toFixed(2) ||                                                                          // 5586\n            py2 > +mmax(y1, y2).toFixed(2) ||                                                                          // 5587\n            py2 < +mmin(y3, y4).toFixed(2) ||                                                                          // 5588\n            py2 > +mmax(y3, y4).toFixed(2)                                                                             // 5589\n        ) {                                                                                                            // 5590\n            return;                                                                                                    // 5591\n        }                                                                                                              // 5592\n        return {x: px, y: py};                                                                                         // 5593\n    }                                                                                                                  // 5594\n    function inter(bez1, bez2) {                                                                                       // 5595\n        return interHelper(bez1, bez2);                                                                                // 5596\n    }                                                                                                                  // 5597\n    function interCount(bez1, bez2) {                                                                                  // 5598\n        return interHelper(bez1, bez2, 1);                                                                             // 5599\n    }                                                                                                                  // 5600\n    function interHelper(bez1, bez2, justCount) {                                                                      // 5601\n        var bbox1 = bezierBBox(bez1),                                                                                  // 5602\n            bbox2 = bezierBBox(bez2);                                                                                  // 5603\n        if (!isBBoxIntersect(bbox1, bbox2)) {                                                                          // 5604\n            return justCount ? 0 : [];                                                                                 // 5605\n        }                                                                                                              // 5606\n        var l1 = bezlen.apply(0, bez1),                                                                                // 5607\n            l2 = bezlen.apply(0, bez2),                                                                                // 5608\n            n1 = ~~(l1 / 8),                                                                                           // 5609\n            n2 = ~~(l2 / 8),                                                                                           // 5610\n            dots1 = [],                                                                                                // 5611\n            dots2 = [],                                                                                                // 5612\n            xy = {},                                                                                                   // 5613\n            res = justCount ? 0 : [];                                                                                  // 5614\n        for (var i = 0; i < n1 + 1; i++) {                                                                             // 5615\n            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));                                                   // 5616\n            dots1.push({x: p.x, y: p.y, t: i / n1});                                                                   // 5617\n        }                                                                                                              // 5618\n        for (i = 0; i < n2 + 1; i++) {                                                                                 // 5619\n            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));                                                       // 5620\n            dots2.push({x: p.x, y: p.y, t: i / n2});                                                                   // 5621\n        }                                                                                                              // 5622\n        for (i = 0; i < n1; i++) {                                                                                     // 5623\n            for (var j = 0; j < n2; j++) {                                                                             // 5624\n                var di = dots1[i],                                                                                     // 5625\n                    di1 = dots1[i + 1],                                                                                // 5626\n                    dj = dots2[j],                                                                                     // 5627\n                    dj1 = dots2[j + 1],                                                                                // 5628\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",                                                         // 5629\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",                                                         // 5630\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);                                // 5631\n                if (is) {                                                                                              // 5632\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {                                                      // 5633\n                        continue;                                                                                      // 5634\n                    }                                                                                                  // 5635\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);                                                             // 5636\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),                      // 5637\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);                      // 5638\n                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {                                                    // 5639\n                        if (justCount) {                                                                               // 5640\n                            res++;                                                                                     // 5641\n                        } else {                                                                                       // 5642\n                            res.push({                                                                                 // 5643\n                                x: is.x,                                                                               // 5644\n                                y: is.y,                                                                               // 5645\n                                t1: t1,                                                                                // 5646\n                                t2: t2                                                                                 // 5647\n                            });                                                                                        // 5648\n                        }                                                                                              // 5649\n                    }                                                                                                  // 5650\n                }                                                                                                      // 5651\n            }                                                                                                          // 5652\n        }                                                                                                              // 5653\n        return res;                                                                                                    // 5654\n    }                                                                                                                  // 5655\n    function pathIntersection(path1, path2) {                                                                          // 5656\n        return interPathHelper(path1, path2);                                                                          // 5657\n    }                                                                                                                  // 5658\n    function pathIntersectionNumber(path1, path2) {                                                                    // 5659\n        return interPathHelper(path1, path2, 1);                                                                       // 5660\n    }                                                                                                                  // 5661\n    function interPathHelper(path1, path2, justCount) {                                                                // 5662\n        path1 = path2curve(path1);                                                                                     // 5663\n        path2 = path2curve(path2);                                                                                     // 5664\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,                                                            // 5665\n            res = justCount ? 0 : [];                                                                                  // 5666\n        for (var i = 0, ii = path1.length; i < ii; i++) {                                                              // 5667\n            var pi = path1[i];                                                                                         // 5668\n            if (pi[0] == \"M\") {                                                                                        // 5669\n                x1 = x1m = pi[1];                                                                                      // 5670\n                y1 = y1m = pi[2];                                                                                      // 5671\n            } else {                                                                                                   // 5672\n                if (pi[0] == \"C\") {                                                                                    // 5673\n                    bez1 = [x1, y1].concat(pi.slice(1));                                                               // 5674\n                    x1 = bez1[6];                                                                                      // 5675\n                    y1 = bez1[7];                                                                                      // 5676\n                } else {                                                                                               // 5677\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];                                                       // 5678\n                    x1 = x1m;                                                                                          // 5679\n                    y1 = y1m;                                                                                          // 5680\n                }                                                                                                      // 5681\n                for (var j = 0, jj = path2.length; j < jj; j++) {                                                      // 5682\n                    var pj = path2[j];                                                                                 // 5683\n                    if (pj[0] == \"M\") {                                                                                // 5684\n                        x2 = x2m = pj[1];                                                                              // 5685\n                        y2 = y2m = pj[2];                                                                              // 5686\n                    } else {                                                                                           // 5687\n                        if (pj[0] == \"C\") {                                                                            // 5688\n                            bez2 = [x2, y2].concat(pj.slice(1));                                                       // 5689\n                            x2 = bez2[6];                                                                              // 5690\n                            y2 = bez2[7];                                                                              // 5691\n                        } else {                                                                                       // 5692\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];                                               // 5693\n                            x2 = x2m;                                                                                  // 5694\n                            y2 = y2m;                                                                                  // 5695\n                        }                                                                                              // 5696\n                        var intr = interHelper(bez1, bez2, justCount);                                                 // 5697\n                        if (justCount) {                                                                               // 5698\n                            res += intr;                                                                               // 5699\n                        } else {                                                                                       // 5700\n                            for (var k = 0, kk = intr.length; k < kk; k++) {                                           // 5701\n                                intr[k].segment1 = i;                                                                  // 5702\n                                intr[k].segment2 = j;                                                                  // 5703\n                                intr[k].bez1 = bez1;                                                                   // 5704\n                                intr[k].bez2 = bez2;                                                                   // 5705\n                            }                                                                                          // 5706\n                            res = res.concat(intr);                                                                    // 5707\n                        }                                                                                              // 5708\n                    }                                                                                                  // 5709\n                }                                                                                                      // 5710\n            }                                                                                                          // 5711\n        }                                                                                                              // 5712\n        return res;                                                                                                    // 5713\n    }                                                                                                                  // 5714\n    function isPointInsidePath(path, x, y) {                                                                           // 5715\n        var bbox = pathBBox(path);                                                                                     // 5716\n        return isPointInsideBBox(bbox, x, y) &&                                                                        // 5717\n               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;                                  // 5718\n    }                                                                                                                  // 5719\n    function pathBBox(path) {                                                                                          // 5720\n        var pth = paths(path);                                                                                         // 5721\n        if (pth.bbox) {                                                                                                // 5722\n            return clone(pth.bbox);                                                                                    // 5723\n        }                                                                                                              // 5724\n        if (!path) {                                                                                                   // 5725\n            return box();                                                                                              // 5726\n        }                                                                                                              // 5727\n        path = path2curve(path);                                                                                       // 5728\n        var x = 0,                                                                                                     // 5729\n            y = 0,                                                                                                     // 5730\n            X = [],                                                                                                    // 5731\n            Y = [],                                                                                                    // 5732\n            p;                                                                                                         // 5733\n        for (var i = 0, ii = path.length; i < ii; i++) {                                                               // 5734\n            p = path[i];                                                                                               // 5735\n            if (p[0] == \"M\") {                                                                                         // 5736\n                x = p[1];                                                                                              // 5737\n                y = p[2];                                                                                              // 5738\n                X.push(x);                                                                                             // 5739\n                Y.push(y);                                                                                             // 5740\n            } else {                                                                                                   // 5741\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);                                          // 5742\n                X = X.concat(dim.min.x, dim.max.x);                                                                    // 5743\n                Y = Y.concat(dim.min.y, dim.max.y);                                                                    // 5744\n                x = p[5];                                                                                              // 5745\n                y = p[6];                                                                                              // 5746\n            }                                                                                                          // 5747\n        }                                                                                                              // 5748\n        var xmin = mmin.apply(0, X),                                                                                   // 5749\n            ymin = mmin.apply(0, Y),                                                                                   // 5750\n            xmax = mmax.apply(0, X),                                                                                   // 5751\n            ymax = mmax.apply(0, Y),                                                                                   // 5752\n            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);                                                            // 5753\n        pth.bbox = clone(bb);                                                                                          // 5754\n        return bb;                                                                                                     // 5755\n    }                                                                                                                  // 5756\n    function rectPath(x, y, w, h, r) {                                                                                 // 5757\n        if (r) {                                                                                                       // 5758\n            return [                                                                                                   // 5759\n                [\"M\", +x + (+r), y],                                                                                   // 5760\n                [\"l\", w - r * 2, 0],                                                                                   // 5761\n                [\"a\", r, r, 0, 0, 1, r, r],                                                                            // 5762\n                [\"l\", 0, h - r * 2],                                                                                   // 5763\n                [\"a\", r, r, 0, 0, 1, -r, r],                                                                           // 5764\n                [\"l\", r * 2 - w, 0],                                                                                   // 5765\n                [\"a\", r, r, 0, 0, 1, -r, -r],                                                                          // 5766\n                [\"l\", 0, r * 2 - h],                                                                                   // 5767\n                [\"a\", r, r, 0, 0, 1, r, -r],                                                                           // 5768\n                [\"z\"]                                                                                                  // 5769\n            ];                                                                                                         // 5770\n        }                                                                                                              // 5771\n        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];                                        // 5772\n        res.toString = toString;                                                                                       // 5773\n        return res;                                                                                                    // 5774\n    }                                                                                                                  // 5775\n    function ellipsePath(x, y, rx, ry, a) {                                                                            // 5776\n        if (a == null && ry == null) {                                                                                 // 5777\n            ry = rx;                                                                                                   // 5778\n        }                                                                                                              // 5779\n        x = +x;                                                                                                        // 5780\n        y = +y;                                                                                                        // 5781\n        rx = +rx;                                                                                                      // 5782\n        ry = +ry;                                                                                                      // 5783\n        if (a != null) {                                                                                               // 5784\n            var rad = Math.PI / 180,                                                                                   // 5785\n                x1 = x + rx * Math.cos(-ry * rad),                                                                     // 5786\n                x2 = x + rx * Math.cos(-a * rad),                                                                      // 5787\n                y1 = y + rx * Math.sin(-ry * rad),                                                                     // 5788\n                y2 = y + rx * Math.sin(-a * rad),                                                                      // 5789\n                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];                                   // 5790\n        } else {                                                                                                       // 5791\n            res = [                                                                                                    // 5792\n                [\"M\", x, y],                                                                                           // 5793\n                [\"m\", 0, -ry],                                                                                         // 5794\n                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],                                                                     // 5795\n                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],                                                                    // 5796\n                [\"z\"]                                                                                                  // 5797\n            ];                                                                                                         // 5798\n        }                                                                                                              // 5799\n        res.toString = toString;                                                                                       // 5800\n        return res;                                                                                                    // 5801\n    }                                                                                                                  // 5802\n    var unit2px = Snap._unit2px,                                                                                       // 5803\n        getPath = {                                                                                                    // 5804\n        path: function (el) {                                                                                          // 5805\n            return el.attr(\"path\");                                                                                    // 5806\n        },                                                                                                             // 5807\n        circle: function (el) {                                                                                        // 5808\n            var attr = unit2px(el);                                                                                    // 5809\n            return ellipsePath(attr.cx, attr.cy, attr.r);                                                              // 5810\n        },                                                                                                             // 5811\n        ellipse: function (el) {                                                                                       // 5812\n            var attr = unit2px(el);                                                                                    // 5813\n            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);                                          // 5814\n        },                                                                                                             // 5815\n        rect: function (el) {                                                                                          // 5816\n            var attr = unit2px(el);                                                                                    // 5817\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);                      // 5818\n        },                                                                                                             // 5819\n        image: function (el) {                                                                                         // 5820\n            var attr = unit2px(el);                                                                                    // 5821\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);                                        // 5822\n        },                                                                                                             // 5823\n        line: function (el) {                                                                                          // 5824\n            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];                       // 5825\n        },                                                                                                             // 5826\n        polyline: function (el) {                                                                                      // 5827\n            return \"M\" + el.attr(\"points\");                                                                            // 5828\n        },                                                                                                             // 5829\n        polygon: function (el) {                                                                                       // 5830\n            return \"M\" + el.attr(\"points\") + \"z\";                                                                      // 5831\n        },                                                                                                             // 5832\n        deflt: function (el) {                                                                                         // 5833\n            var bbox = el.node.getBBox();                                                                              // 5834\n            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);                                                  // 5835\n        }                                                                                                              // 5836\n    };                                                                                                                 // 5837\n    function pathToRelative(pathArray) {                                                                               // 5838\n        var pth = paths(pathArray),                                                                                    // 5839\n            lowerCase = String.prototype.toLowerCase;                                                                  // 5840\n        if (pth.rel) {                                                                                                 // 5841\n            return pathClone(pth.rel);                                                                                 // 5842\n        }                                                                                                              // 5843\n        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {                            // 5844\n            pathArray = Snap.parsePathString(pathArray);                                                               // 5845\n        }                                                                                                              // 5846\n        var res = [],                                                                                                  // 5847\n            x = 0,                                                                                                     // 5848\n            y = 0,                                                                                                     // 5849\n            mx = 0,                                                                                                    // 5850\n            my = 0,                                                                                                    // 5851\n            start = 0;                                                                                                 // 5852\n        if (pathArray[0][0] == \"M\") {                                                                                  // 5853\n            x = pathArray[0][1];                                                                                       // 5854\n            y = pathArray[0][2];                                                                                       // 5855\n            mx = x;                                                                                                    // 5856\n            my = y;                                                                                                    // 5857\n            start++;                                                                                                   // 5858\n            res.push([\"M\", x, y]);                                                                                     // 5859\n        }                                                                                                              // 5860\n        for (var i = start, ii = pathArray.length; i < ii; i++) {                                                      // 5861\n            var r = res[i] = [],                                                                                       // 5862\n                pa = pathArray[i];                                                                                     // 5863\n            if (pa[0] != lowerCase.call(pa[0])) {                                                                      // 5864\n                r[0] = lowerCase.call(pa[0]);                                                                          // 5865\n                switch (r[0]) {                                                                                        // 5866\n                    case \"a\":                                                                                          // 5867\n                        r[1] = pa[1];                                                                                  // 5868\n                        r[2] = pa[2];                                                                                  // 5869\n                        r[3] = pa[3];                                                                                  // 5870\n                        r[4] = pa[4];                                                                                  // 5871\n                        r[5] = pa[5];                                                                                  // 5872\n                        r[6] = +(pa[6] - x).toFixed(3);                                                                // 5873\n                        r[7] = +(pa[7] - y).toFixed(3);                                                                // 5874\n                        break;                                                                                         // 5875\n                    case \"v\":                                                                                          // 5876\n                        r[1] = +(pa[1] - y).toFixed(3);                                                                // 5877\n                        break;                                                                                         // 5878\n                    case \"m\":                                                                                          // 5879\n                        mx = pa[1];                                                                                    // 5880\n                        my = pa[2];                                                                                    // 5881\n                    default:                                                                                           // 5882\n                        for (var j = 1, jj = pa.length; j < jj; j++) {                                                 // 5883\n                            r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);                                            // 5884\n                        }                                                                                              // 5885\n                }                                                                                                      // 5886\n            } else {                                                                                                   // 5887\n                r = res[i] = [];                                                                                       // 5888\n                if (pa[0] == \"m\") {                                                                                    // 5889\n                    mx = pa[1] + x;                                                                                    // 5890\n                    my = pa[2] + y;                                                                                    // 5891\n                }                                                                                                      // 5892\n                for (var k = 0, kk = pa.length; k < kk; k++) {                                                         // 5893\n                    res[i][k] = pa[k];                                                                                 // 5894\n                }                                                                                                      // 5895\n            }                                                                                                          // 5896\n            var len = res[i].length;                                                                                   // 5897\n            switch (res[i][0]) {                                                                                       // 5898\n                case \"z\":                                                                                              // 5899\n                    x = mx;                                                                                            // 5900\n                    y = my;                                                                                            // 5901\n                    break;                                                                                             // 5902\n                case \"h\":                                                                                              // 5903\n                    x += +res[i][len - 1];                                                                             // 5904\n                    break;                                                                                             // 5905\n                case \"v\":                                                                                              // 5906\n                    y += +res[i][len - 1];                                                                             // 5907\n                    break;                                                                                             // 5908\n                default:                                                                                               // 5909\n                    x += +res[i][len - 2];                                                                             // 5910\n                    y += +res[i][len - 1];                                                                             // 5911\n            }                                                                                                          // 5912\n        }                                                                                                              // 5913\n        res.toString = toString;                                                                                       // 5914\n        pth.rel = pathClone(res);                                                                                      // 5915\n        return res;                                                                                                    // 5916\n    }                                                                                                                  // 5917\n    function pathToAbsolute(pathArray) {                                                                               // 5918\n        var pth = paths(pathArray);                                                                                    // 5919\n        if (pth.abs) {                                                                                                 // 5920\n            return pathClone(pth.abs);                                                                                 // 5921\n        }                                                                                                              // 5922\n        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption                  // 5923\n            pathArray = Snap.parsePathString(pathArray);                                                               // 5924\n        }                                                                                                              // 5925\n        if (!pathArray || !pathArray.length) {                                                                         // 5926\n            return [[\"M\", 0, 0]];                                                                                      // 5927\n        }                                                                                                              // 5928\n        var res = [],                                                                                                  // 5929\n            x = 0,                                                                                                     // 5930\n            y = 0,                                                                                                     // 5931\n            mx = 0,                                                                                                    // 5932\n            my = 0,                                                                                                    // 5933\n            start = 0,                                                                                                 // 5934\n            pa0;                                                                                                       // 5935\n        if (pathArray[0][0] == \"M\") {                                                                                  // 5936\n            x = +pathArray[0][1];                                                                                      // 5937\n            y = +pathArray[0][2];                                                                                      // 5938\n            mx = x;                                                                                                    // 5939\n            my = y;                                                                                                    // 5940\n            start++;                                                                                                   // 5941\n            res[0] = [\"M\", x, y];                                                                                      // 5942\n        }                                                                                                              // 5943\n        var crz = pathArray.length == 3 &&                                                                             // 5944\n            pathArray[0][0] == \"M\" &&                                                                                  // 5945\n            pathArray[1][0].toUpperCase() == \"R\" &&                                                                    // 5946\n            pathArray[2][0].toUpperCase() == \"Z\";                                                                      // 5947\n        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {                                               // 5948\n            res.push(r = []);                                                                                          // 5949\n            pa = pathArray[i];                                                                                         // 5950\n            pa0 = pa[0];                                                                                               // 5951\n            if (pa0 != pa0.toUpperCase()) {                                                                            // 5952\n                r[0] = pa0.toUpperCase();                                                                              // 5953\n                switch (r[0]) {                                                                                        // 5954\n                    case \"A\":                                                                                          // 5955\n                        r[1] = pa[1];                                                                                  // 5956\n                        r[2] = pa[2];                                                                                  // 5957\n                        r[3] = pa[3];                                                                                  // 5958\n                        r[4] = pa[4];                                                                                  // 5959\n                        r[5] = pa[5];                                                                                  // 5960\n                        r[6] = +pa[6] + x;                                                                             // 5961\n                        r[7] = +pa[7] + y;                                                                             // 5962\n                        break;                                                                                         // 5963\n                    case \"V\":                                                                                          // 5964\n                        r[1] = +pa[1] + y;                                                                             // 5965\n                        break;                                                                                         // 5966\n                    case \"H\":                                                                                          // 5967\n                        r[1] = +pa[1] + x;                                                                             // 5968\n                        break;                                                                                         // 5969\n                    case \"R\":                                                                                          // 5970\n                        var dots = [x, y].concat(pa.slice(1));                                                         // 5971\n                        for (var j = 2, jj = dots.length; j < jj; j++) {                                               // 5972\n                            dots[j] = +dots[j] + x;                                                                    // 5973\n                            dots[++j] = +dots[j] + y;                                                                  // 5974\n                        }                                                                                              // 5975\n                        res.pop();                                                                                     // 5976\n                        res = res.concat(catmullRom2bezier(dots, crz));                                                // 5977\n                        break;                                                                                         // 5978\n                    case \"O\":                                                                                          // 5979\n                        res.pop();                                                                                     // 5980\n                        dots = ellipsePath(x, y, pa[1], pa[2]);                                                        // 5981\n                        dots.push(dots[0]);                                                                            // 5982\n                        res = res.concat(dots);                                                                        // 5983\n                        break;                                                                                         // 5984\n                    case \"U\":                                                                                          // 5985\n                        res.pop();                                                                                     // 5986\n                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));                                      // 5987\n                        r = [\"U\"].concat(res[res.length - 1].slice(-2));                                               // 5988\n                        break;                                                                                         // 5989\n                    case \"M\":                                                                                          // 5990\n                        mx = +pa[1] + x;                                                                               // 5991\n                        my = +pa[2] + y;                                                                               // 5992\n                    default:                                                                                           // 5993\n                        for (j = 1, jj = pa.length; j < jj; j++) {                                                     // 5994\n                            r[j] = +pa[j] + ((j % 2) ? x : y);                                                         // 5995\n                        }                                                                                              // 5996\n                }                                                                                                      // 5997\n            } else if (pa0 == \"R\") {                                                                                   // 5998\n                dots = [x, y].concat(pa.slice(1));                                                                     // 5999\n                res.pop();                                                                                             // 6000\n                res = res.concat(catmullRom2bezier(dots, crz));                                                        // 6001\n                r = [\"R\"].concat(pa.slice(-2));                                                                        // 6002\n            } else if (pa0 == \"O\") {                                                                                   // 6003\n                res.pop();                                                                                             // 6004\n                dots = ellipsePath(x, y, pa[1], pa[2]);                                                                // 6005\n                dots.push(dots[0]);                                                                                    // 6006\n                res = res.concat(dots);                                                                                // 6007\n            } else if (pa0 == \"U\") {                                                                                   // 6008\n                res.pop();                                                                                             // 6009\n                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));                                              // 6010\n                r = [\"U\"].concat(res[res.length - 1].slice(-2));                                                       // 6011\n            } else {                                                                                                   // 6012\n                for (var k = 0, kk = pa.length; k < kk; k++) {                                                         // 6013\n                    r[k] = pa[k];                                                                                      // 6014\n                }                                                                                                      // 6015\n            }                                                                                                          // 6016\n            pa0 = pa0.toUpperCase();                                                                                   // 6017\n            if (pa0 != \"O\") {                                                                                          // 6018\n                switch (r[0]) {                                                                                        // 6019\n                    case \"Z\":                                                                                          // 6020\n                        x = +mx;                                                                                       // 6021\n                        y = +my;                                                                                       // 6022\n                        break;                                                                                         // 6023\n                    case \"H\":                                                                                          // 6024\n                        x = r[1];                                                                                      // 6025\n                        break;                                                                                         // 6026\n                    case \"V\":                                                                                          // 6027\n                        y = r[1];                                                                                      // 6028\n                        break;                                                                                         // 6029\n                    case \"M\":                                                                                          // 6030\n                        mx = r[r.length - 2];                                                                          // 6031\n                        my = r[r.length - 1];                                                                          // 6032\n                    default:                                                                                           // 6033\n                        x = r[r.length - 2];                                                                           // 6034\n                        y = r[r.length - 1];                                                                           // 6035\n                }                                                                                                      // 6036\n            }                                                                                                          // 6037\n        }                                                                                                              // 6038\n        res.toString = toString;                                                                                       // 6039\n        pth.abs = pathClone(res);                                                                                      // 6040\n        return res;                                                                                                    // 6041\n    }                                                                                                                  // 6042\n    function l2c(x1, y1, x2, y2) {                                                                                     // 6043\n        return [x1, y1, x2, y2, x2, y2];                                                                               // 6044\n    }                                                                                                                  // 6045\n    function q2c(x1, y1, ax, ay, x2, y2) {                                                                             // 6046\n        var _13 = 1 / 3,                                                                                               // 6047\n            _23 = 2 / 3;                                                                                               // 6048\n        return [                                                                                                       // 6049\n                _13 * x1 + _23 * ax,                                                                                   // 6050\n                _13 * y1 + _23 * ay,                                                                                   // 6051\n                _13 * x2 + _23 * ax,                                                                                   // 6052\n                _13 * y2 + _23 * ay,                                                                                   // 6053\n                x2,                                                                                                    // 6054\n                y2                                                                                                     // 6055\n            ];                                                                                                         // 6056\n    }                                                                                                                  // 6057\n    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {                               // 6058\n        // for more information of where this math came from visit:                                                    // 6059\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes                                             // 6060\n        var _120 = PI * 120 / 180,                                                                                     // 6061\n            rad = PI / 180 * (+angle || 0),                                                                            // 6062\n            res = [],                                                                                                  // 6063\n            xy,                                                                                                        // 6064\n            rotate = Snap._.cacher(function (x, y, rad) {                                                              // 6065\n                var X = x * math.cos(rad) - y * math.sin(rad),                                                         // 6066\n                    Y = x * math.sin(rad) + y * math.cos(rad);                                                         // 6067\n                return {x: X, y: Y};                                                                                   // 6068\n            });                                                                                                        // 6069\n        if (!recursive) {                                                                                              // 6070\n            xy = rotate(x1, y1, -rad);                                                                                 // 6071\n            x1 = xy.x;                                                                                                 // 6072\n            y1 = xy.y;                                                                                                 // 6073\n            xy = rotate(x2, y2, -rad);                                                                                 // 6074\n            x2 = xy.x;                                                                                                 // 6075\n            y2 = xy.y;                                                                                                 // 6076\n            var cos = math.cos(PI / 180 * angle),                                                                      // 6077\n                sin = math.sin(PI / 180 * angle),                                                                      // 6078\n                x = (x1 - x2) / 2,                                                                                     // 6079\n                y = (y1 - y2) / 2;                                                                                     // 6080\n            var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);                                                         // 6081\n            if (h > 1) {                                                                                               // 6082\n                h = math.sqrt(h);                                                                                      // 6083\n                rx = h * rx;                                                                                           // 6084\n                ry = h * ry;                                                                                           // 6085\n            }                                                                                                          // 6086\n            var rx2 = rx * rx,                                                                                         // 6087\n                ry2 = ry * ry,                                                                                         // 6088\n                k = (large_arc_flag == sweep_flag ? -1 : 1) *                                                          // 6089\n                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),             // 6090\n                cx = k * rx * y / ry + (x1 + x2) / 2,                                                                  // 6091\n                cy = k * -ry * x / rx + (y1 + y2) / 2,                                                                 // 6092\n                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),                                                           // 6093\n                f2 = math.asin(((y2 - cy) / ry).toFixed(9));                                                           // 6094\n                                                                                                                       // 6095\n            f1 = x1 < cx ? PI - f1 : f1;                                                                               // 6096\n            f2 = x2 < cx ? PI - f2 : f2;                                                                               // 6097\n            f1 < 0 && (f1 = PI * 2 + f1);                                                                              // 6098\n            f2 < 0 && (f2 = PI * 2 + f2);                                                                              // 6099\n            if (sweep_flag && f1 > f2) {                                                                               // 6100\n                f1 = f1 - PI * 2;                                                                                      // 6101\n            }                                                                                                          // 6102\n            if (!sweep_flag && f2 > f1) {                                                                              // 6103\n                f2 = f2 - PI * 2;                                                                                      // 6104\n            }                                                                                                          // 6105\n        } else {                                                                                                       // 6106\n            f1 = recursive[0];                                                                                         // 6107\n            f2 = recursive[1];                                                                                         // 6108\n            cx = recursive[2];                                                                                         // 6109\n            cy = recursive[3];                                                                                         // 6110\n        }                                                                                                              // 6111\n        var df = f2 - f1;                                                                                              // 6112\n        if (abs(df) > _120) {                                                                                          // 6113\n            var f2old = f2,                                                                                            // 6114\n                x2old = x2,                                                                                            // 6115\n                y2old = y2;                                                                                            // 6116\n            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);                                                         // 6117\n            x2 = cx + rx * math.cos(f2);                                                                               // 6118\n            y2 = cy + ry * math.sin(f2);                                                                               // 6119\n            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);                        // 6120\n        }                                                                                                              // 6121\n        df = f2 - f1;                                                                                                  // 6122\n        var c1 = math.cos(f1),                                                                                         // 6123\n            s1 = math.sin(f1),                                                                                         // 6124\n            c2 = math.cos(f2),                                                                                         // 6125\n            s2 = math.sin(f2),                                                                                         // 6126\n            t = math.tan(df / 4),                                                                                      // 6127\n            hx = 4 / 3 * rx * t,                                                                                       // 6128\n            hy = 4 / 3 * ry * t,                                                                                       // 6129\n            m1 = [x1, y1],                                                                                             // 6130\n            m2 = [x1 + hx * s1, y1 - hy * c1],                                                                         // 6131\n            m3 = [x2 + hx * s2, y2 - hy * c2],                                                                         // 6132\n            m4 = [x2, y2];                                                                                             // 6133\n        m2[0] = 2 * m1[0] - m2[0];                                                                                     // 6134\n        m2[1] = 2 * m1[1] - m2[1];                                                                                     // 6135\n        if (recursive) {                                                                                               // 6136\n            return [m2, m3, m4].concat(res);                                                                           // 6137\n        } else {                                                                                                       // 6138\n            res = [m2, m3, m4].concat(res).join().split(\",\");                                                          // 6139\n            var newres = [];                                                                                           // 6140\n            for (var i = 0, ii = res.length; i < ii; i++) {                                                            // 6141\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;             // 6142\n            }                                                                                                          // 6143\n            return newres;                                                                                             // 6144\n        }                                                                                                              // 6145\n    }                                                                                                                  // 6146\n    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {                                             // 6147\n        var t1 = 1 - t;                                                                                                // 6148\n        return {                                                                                                       // 6149\n            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,                   // 6150\n            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y                    // 6151\n        };                                                                                                             // 6152\n    }                                                                                                                  // 6153\n                                                                                                                       // 6154\n    // Returns bounding box of cubic bezier curve.                                                                     // 6155\n    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html                       // 6156\n    // Original version: NISHIO Hirokazu                                                                               // 6157\n    // Modifications: https://github.com/timo22345                                                                     // 6158\n    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {                                                                // 6159\n        var tvalues = [],                                                                                              // 6160\n            bounds = [[], []],                                                                                         // 6161\n            a, b, c, t, t1, t2, b2ac, sqrtb2ac;                                                                        // 6162\n        for (var i = 0; i < 2; ++i) {                                                                                  // 6163\n            if (i == 0) {                                                                                              // 6164\n                b = 6 * x0 - 12 * x1 + 6 * x2;                                                                         // 6165\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;                                                                // 6166\n                c = 3 * x1 - 3 * x0;                                                                                   // 6167\n            } else {                                                                                                   // 6168\n                b = 6 * y0 - 12 * y1 + 6 * y2;                                                                         // 6169\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;                                                                // 6170\n                c = 3 * y1 - 3 * y0;                                                                                   // 6171\n            }                                                                                                          // 6172\n            if (abs(a) < 1e-12) {                                                                                      // 6173\n                if (abs(b) < 1e-12) {                                                                                  // 6174\n                    continue;                                                                                          // 6175\n                }                                                                                                      // 6176\n                t = -c / b;                                                                                            // 6177\n                if (0 < t && t < 1) {                                                                                  // 6178\n                    tvalues.push(t);                                                                                   // 6179\n                }                                                                                                      // 6180\n                continue;                                                                                              // 6181\n            }                                                                                                          // 6182\n            b2ac = b * b - 4 * c * a;                                                                                  // 6183\n            sqrtb2ac = math.sqrt(b2ac);                                                                                // 6184\n            if (b2ac < 0) {                                                                                            // 6185\n                continue;                                                                                              // 6186\n            }                                                                                                          // 6187\n            t1 = (-b + sqrtb2ac) / (2 * a);                                                                            // 6188\n            if (0 < t1 && t1 < 1) {                                                                                    // 6189\n                tvalues.push(t1);                                                                                      // 6190\n            }                                                                                                          // 6191\n            t2 = (-b - sqrtb2ac) / (2 * a);                                                                            // 6192\n            if (0 < t2 && t2 < 1) {                                                                                    // 6193\n                tvalues.push(t2);                                                                                      // 6194\n            }                                                                                                          // 6195\n        }                                                                                                              // 6196\n                                                                                                                       // 6197\n        var x, y, j = tvalues.length,                                                                                  // 6198\n            jlen = j,                                                                                                  // 6199\n            mt;                                                                                                        // 6200\n        while (j--) {                                                                                                  // 6201\n            t = tvalues[j];                                                                                            // 6202\n            mt = 1 - t;                                                                                                // 6203\n            bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);    // 6204\n            bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);    // 6205\n        }                                                                                                              // 6206\n                                                                                                                       // 6207\n        bounds[0][jlen] = x0;                                                                                          // 6208\n        bounds[1][jlen] = y0;                                                                                          // 6209\n        bounds[0][jlen + 1] = x3;                                                                                      // 6210\n        bounds[1][jlen + 1] = y3;                                                                                      // 6211\n        bounds[0].length = bounds[1].length = jlen + 2;                                                                // 6212\n                                                                                                                       // 6213\n                                                                                                                       // 6214\n        return {                                                                                                       // 6215\n          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},                                             // 6216\n          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}                                              // 6217\n        };                                                                                                             // 6218\n    }                                                                                                                  // 6219\n                                                                                                                       // 6220\n    function path2curve(path, path2) {                                                                                 // 6221\n        var pth = !path2 && paths(path);                                                                               // 6222\n        if (!path2 && pth.curve) {                                                                                     // 6223\n            return pathClone(pth.curve);                                                                               // 6224\n        }                                                                                                              // 6225\n        var p = pathToAbsolute(path),                                                                                  // 6226\n            p2 = path2 && pathToAbsolute(path2),                                                                       // 6227\n            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},                                        // 6228\n            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},                                       // 6229\n            processPath = function (path, d, pcom) {                                                                   // 6230\n                var nx, ny;                                                                                            // 6231\n                if (!path) {                                                                                           // 6232\n                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];                                                        // 6233\n                }                                                                                                      // 6234\n                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);                                                    // 6235\n                switch (path[0]) {                                                                                     // 6236\n                    case \"M\":                                                                                          // 6237\n                        d.X = path[1];                                                                                 // 6238\n                        d.Y = path[2];                                                                                 // 6239\n                        break;                                                                                         // 6240\n                    case \"A\":                                                                                          // 6241\n                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));                           // 6242\n                        break;                                                                                         // 6243\n                    case \"S\":                                                                                          // 6244\n                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                            nx = d.x * 2 - d.bx;          // And reflect the previous                                  // 6246\n                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.    // 6247\n                        }                                                                                              // 6248\n                        else {                            // or some else or nothing                                   // 6249\n                            nx = d.x;                                                                                  // 6250\n                            ny = d.y;                                                                                  // 6251\n                        }                                                                                              // 6252\n                        path = [\"C\", nx, ny].concat(path.slice(1));                                                    // 6253\n                        break;                                                                                         // 6254\n                    case \"T\":                                                                                          // 6255\n                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar                             // 6257\n                            d.qy = d.y * 2 - d.qy;        // to case \"S\".                                              // 6258\n                        }                                                                                              // 6259\n                        else {                            // or something else or nothing                              // 6260\n                            d.qx = d.x;                                                                                // 6261\n                            d.qy = d.y;                                                                                // 6262\n                        }                                                                                              // 6263\n                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));                              // 6264\n                        break;                                                                                         // 6265\n                    case \"Q\":                                                                                          // 6266\n                        d.qx = path[1];                                                                                // 6267\n                        d.qy = path[2];                                                                                // 6268\n                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));                        // 6269\n                        break;                                                                                         // 6270\n                    case \"L\":                                                                                          // 6271\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));                                          // 6272\n                        break;                                                                                         // 6273\n                    case \"H\":                                                                                          // 6274\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));                                              // 6275\n                        break;                                                                                         // 6276\n                    case \"V\":                                                                                          // 6277\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));                                              // 6278\n                        break;                                                                                         // 6279\n                    case \"Z\":                                                                                          // 6280\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));                                                  // 6281\n                        break;                                                                                         // 6282\n                }                                                                                                      // 6283\n                return path;                                                                                           // 6284\n            },                                                                                                         // 6285\n            fixArc = function (pp, i) {                                                                                // 6286\n                if (pp[i].length > 7) {                                                                                // 6287\n                    pp[i].shift();                                                                                     // 6288\n                    var pi = pp[i];                                                                                    // 6289\n                    while (pi.length) {                                                                                // 6290\n                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved                       // 6291\n                        p2 && (pcoms2[i] = \"A\"); // the same as above                                                  // 6292\n                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));                                              // 6293\n                    }                                                                                                  // 6294\n                    pp.splice(i, 1);                                                                                   // 6295\n                    ii = mmax(p.length, p2 && p2.length || 0);                                                         // 6296\n                }                                                                                                      // 6297\n            },                                                                                                         // 6298\n            fixM = function (path1, path2, a1, a2, i) {                                                                // 6299\n                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {                                      // 6300\n                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);                                                             // 6301\n                    a1.bx = 0;                                                                                         // 6302\n                    a1.by = 0;                                                                                         // 6303\n                    a1.x = path1[i][1];                                                                                // 6304\n                    a1.y = path1[i][2];                                                                                // 6305\n                    ii = mmax(p.length, p2 && p2.length || 0);                                                         // 6306\n                }                                                                                                      // 6307\n            },                                                                                                         // 6308\n            pcoms1 = [], // path commands of original path p                                                           // 6309\n            pcoms2 = [], // path commands of original path p2                                                          // 6310\n            pfirst = \"\", // temporary holder for original path command                                                 // 6311\n            pcom = \"\"; // holder for previous path command of original path                                            // 6312\n        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {                                      // 6313\n            p[i] && (pfirst = p[i][0]); // save current path command                                                   // 6314\n                                                                                                                       // 6315\n            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion                           // 6316\n            {                                                                                                          // 6317\n                pcoms1[i] = pfirst; // Save current path command                                                       // 6318\n                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom                                        // 6319\n            }                                                                                                          // 6320\n            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath                 // 6321\n                                                                                                                       // 6322\n            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command                           // 6323\n            // which may produce multiple C:s                                                                          // 6324\n            // so we have to make sure that C is also C in original path                                               // 6325\n                                                                                                                       // 6326\n            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1                                        // 6327\n                                                                                                                       // 6328\n            if (p2) { // the same procedures is done to p2                                                             // 6329\n                p2[i] && (pfirst = p2[i][0]);                                                                          // 6330\n                if (pfirst != \"C\") {                                                                                   // 6331\n                    pcoms2[i] = pfirst;                                                                                // 6332\n                    i && (pcom = pcoms2[i - 1]);                                                                       // 6333\n                }                                                                                                      // 6334\n                p2[i] = processPath(p2[i], attrs2, pcom);                                                              // 6335\n                                                                                                                       // 6336\n                if (pcoms2[i] != \"A\" && pfirst == \"C\") {                                                               // 6337\n                    pcoms2[i] = \"C\";                                                                                   // 6338\n                }                                                                                                      // 6339\n                                                                                                                       // 6340\n                fixArc(p2, i);                                                                                         // 6341\n            }                                                                                                          // 6342\n            fixM(p, p2, attrs, attrs2, i);                                                                             // 6343\n            fixM(p2, p, attrs2, attrs, i);                                                                             // 6344\n            var seg = p[i],                                                                                            // 6345\n                seg2 = p2 && p2[i],                                                                                    // 6346\n                seglen = seg.length,                                                                                   // 6347\n                seg2len = p2 && seg2.length;                                                                           // 6348\n            attrs.x = seg[seglen - 2];                                                                                 // 6349\n            attrs.y = seg[seglen - 1];                                                                                 // 6350\n            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;                                                            // 6351\n            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;                                                            // 6352\n            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);                                                // 6353\n            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);                                                // 6354\n            attrs2.x = p2 && seg2[seg2len - 2];                                                                        // 6355\n            attrs2.y = p2 && seg2[seg2len - 1];                                                                        // 6356\n        }                                                                                                              // 6357\n        if (!p2) {                                                                                                     // 6358\n            pth.curve = pathClone(p);                                                                                  // 6359\n        }                                                                                                              // 6360\n        return p2 ? [p, p2] : p;                                                                                       // 6361\n    }                                                                                                                  // 6362\n    function mapPath(path, matrix) {                                                                                   // 6363\n        if (!matrix) {                                                                                                 // 6364\n            return path;                                                                                               // 6365\n        }                                                                                                              // 6366\n        var x, y, i, j, ii, jj, pathi;                                                                                 // 6367\n        path = path2curve(path);                                                                                       // 6368\n        for (i = 0, ii = path.length; i < ii; i++) {                                                                   // 6369\n            pathi = path[i];                                                                                           // 6370\n            for (j = 1, jj = pathi.length; j < jj; j += 2) {                                                           // 6371\n                x = matrix.x(pathi[j], pathi[j + 1]);                                                                  // 6372\n                y = matrix.y(pathi[j], pathi[j + 1]);                                                                  // 6373\n                pathi[j] = x;                                                                                          // 6374\n                pathi[j + 1] = y;                                                                                      // 6375\n            }                                                                                                          // 6376\n        }                                                                                                              // 6377\n        return path;                                                                                                   // 6378\n    }                                                                                                                  // 6379\n                                                                                                                       // 6380\n    // http://schepers.cc/getting-to-the-point                                                                         // 6381\n    function catmullRom2bezier(crp, z) {                                                                               // 6382\n        var d = [];                                                                                                    // 6383\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {                                                // 6384\n            var p = [                                                                                                  // 6385\n                        {x: +crp[i - 2], y: +crp[i - 1]},                                                              // 6386\n                        {x: +crp[i],     y: +crp[i + 1]},                                                              // 6387\n                        {x: +crp[i + 2], y: +crp[i + 3]},                                                              // 6388\n                        {x: +crp[i + 4], y: +crp[i + 5]}                                                               // 6389\n                    ];                                                                                                 // 6390\n            if (z) {                                                                                                   // 6391\n                if (!i) {                                                                                              // 6392\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};                                                     // 6393\n                } else if (iLen - 4 == i) {                                                                            // 6394\n                    p[3] = {x: +crp[0], y: +crp[1]};                                                                   // 6395\n                } else if (iLen - 2 == i) {                                                                            // 6396\n                    p[2] = {x: +crp[0], y: +crp[1]};                                                                   // 6397\n                    p[3] = {x: +crp[2], y: +crp[3]};                                                                   // 6398\n                }                                                                                                      // 6399\n            } else {                                                                                                   // 6400\n                if (iLen - 4 == i) {                                                                                   // 6401\n                    p[3] = p[2];                                                                                       // 6402\n                } else if (!i) {                                                                                       // 6403\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};                                                               // 6404\n                }                                                                                                      // 6405\n            }                                                                                                          // 6406\n            d.push([\"C\",                                                                                               // 6407\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,                                                                 // 6408\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,                                                                 // 6409\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,                                                                  // 6410\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,                                                                    // 6411\n                  p[2].x,                                                                                              // 6412\n                  p[2].y                                                                                               // 6413\n            ]);                                                                                                        // 6414\n        }                                                                                                              // 6415\n                                                                                                                       // 6416\n        return d;                                                                                                      // 6417\n    }                                                                                                                  // 6418\n                                                                                                                       // 6419\n    // export                                                                                                          // 6420\n    Snap.path = paths;                                                                                                 // 6421\n                                                                                                                       // 6422\n    /*\\\n     * Snap.path.getTotalLength                                                                                        // 6424\n     [ method ]                                                                                                        // 6425\n     **                                                                                                                // 6426\n     * Returns the length of the given path in pixels                                                                  // 6427\n     **                                                                                                                // 6428\n     - path (string) SVG path string                                                                                   // 6429\n     **                                                                                                                // 6430\n     = (number) length                                                                                                 // 6431\n    \\*/                                                                                                                // 6432\n    Snap.path.getTotalLength = getTotalLength;                                                                         // 6433\n    /*\\\n     * Snap.path.getPointAtLength                                                                                      // 6435\n     [ method ]                                                                                                        // 6436\n     **                                                                                                                // 6437\n     * Returns the coordinates of the point located at the given length along the given path                           // 6438\n     **                                                                                                                // 6439\n     - path (string) SVG path string                                                                                   // 6440\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps                    // 6441\n     **                                                                                                                // 6442\n     = (object) representation of the point:                                                                           // 6443\n     o {                                                                                                               // 6444\n     o     x: (number) x coordinate,                                                                                   // 6445\n     o     y: (number) y coordinate,                                                                                   // 6446\n     o     alpha: (number) angle of derivative                                                                         // 6447\n     o }                                                                                                               // 6448\n    \\*/                                                                                                                // 6449\n    Snap.path.getPointAtLength = getPointAtLength;                                                                     // 6450\n    /*\\\n     * Snap.path.getSubpath                                                                                            // 6452\n     [ method ]                                                                                                        // 6453\n     **                                                                                                                // 6454\n     * Returns the subpath of a given path between given start and end lengths                                         // 6455\n     **                                                                                                                // 6456\n     - path (string) SVG path string                                                                                   // 6457\n     - from (number) length, in pixels, from the start of the path to the start of the segment                         // 6458\n     - to (number) length, in pixels, from the start of the path to the end of the segment                             // 6459\n     **                                                                                                                // 6460\n     = (string) path string definition for the segment                                                                 // 6461\n    \\*/                                                                                                                // 6462\n    Snap.path.getSubpath = function (path, from, to) {                                                                 // 6463\n        if (this.getTotalLength(path) - to < 1e-6) {                                                                   // 6464\n            return getSubpathsAtLength(path, from).end;                                                                // 6465\n        }                                                                                                              // 6466\n        var a = getSubpathsAtLength(path, to, 1);                                                                      // 6467\n        return from ? getSubpathsAtLength(a, from).end : a;                                                            // 6468\n    };                                                                                                                 // 6469\n    /*\\\n     * Element.getTotalLength                                                                                          // 6471\n     [ method ]                                                                                                        // 6472\n     **                                                                                                                // 6473\n     * Returns the length of the path in pixels (only works for `path` elements)                                       // 6474\n     = (number) length                                                                                                 // 6475\n    \\*/                                                                                                                // 6476\n    elproto.getTotalLength = function () {                                                                             // 6477\n        if (this.node.getTotalLength) {                                                                                // 6478\n            return this.node.getTotalLength();                                                                         // 6479\n        }                                                                                                              // 6480\n    };                                                                                                                 // 6481\n    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n    /*\\\n     * Element.getPointAtLength                                                                                        // 6484\n     [ method ]                                                                                                        // 6485\n     **                                                                                                                // 6486\n     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements) // 6487\n     **                                                                                                                // 6488\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps                    // 6489\n     **                                                                                                                // 6490\n     = (object) representation of the point:                                                                           // 6491\n     o {                                                                                                               // 6492\n     o     x: (number) x coordinate,                                                                                   // 6493\n     o     y: (number) y coordinate,                                                                                   // 6494\n     o     alpha: (number) angle of derivative                                                                         // 6495\n     o }                                                                                                               // 6496\n    \\*/                                                                                                                // 6497\n    elproto.getPointAtLength = function (length) {                                                                     // 6498\n        return getPointAtLength(this.attr(\"d\"), length);                                                               // 6499\n    };                                                                                                                 // 6500\n    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n    /*\\\n     * Element.getSubpath                                                                                              // 6503\n     [ method ]                                                                                                        // 6504\n     **                                                                                                                // 6505\n     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)            // 6506\n     **                                                                                                                // 6507\n     - from (number) length, in pixels, from the start of the path to the start of the segment                         // 6508\n     - to (number) length, in pixels, from the start of the path to the end of the segment                             // 6509\n     **                                                                                                                // 6510\n     = (string) path string definition for the segment                                                                 // 6511\n    \\*/                                                                                                                // 6512\n    elproto.getSubpath = function (from, to) {                                                                         // 6513\n        return Snap.path.getSubpath(this.attr(\"d\"), from, to);                                                         // 6514\n    };                                                                                                                 // 6515\n    Snap._.box = box;                                                                                                  // 6516\n    /*\\\n     * Snap.path.findDotsAtSegment                                                                                     // 6518\n     [ method ]                                                                                                        // 6519\n     **                                                                                                                // 6520\n     * Utility method                                                                                                  // 6521\n     **                                                                                                                // 6522\n     * Finds dot coordinates on the given cubic beziér curve at the given t                                            // 6523\n     - p1x (number) x of the first point of the curve                                                                  // 6524\n     - p1y (number) y of the first point of the curve                                                                  // 6525\n     - c1x (number) x of the first anchor of the curve                                                                 // 6526\n     - c1y (number) y of the first anchor of the curve                                                                 // 6527\n     - c2x (number) x of the second anchor of the curve                                                                // 6528\n     - c2y (number) y of the second anchor of the curve                                                                // 6529\n     - p2x (number) x of the second point of the curve                                                                 // 6530\n     - p2y (number) y of the second point of the curve                                                                 // 6531\n     - t (number) position on the curve (0..1)                                                                         // 6532\n     = (object) point information in format:                                                                           // 6533\n     o {                                                                                                               // 6534\n     o     x: (number) x coordinate of the point,                                                                      // 6535\n     o     y: (number) y coordinate of the point,                                                                      // 6536\n     o     m: {                                                                                                        // 6537\n     o         x: (number) x coordinate of the left anchor,                                                            // 6538\n     o         y: (number) y coordinate of the left anchor                                                             // 6539\n     o     },                                                                                                          // 6540\n     o     n: {                                                                                                        // 6541\n     o         x: (number) x coordinate of the right anchor,                                                           // 6542\n     o         y: (number) y coordinate of the right anchor                                                            // 6543\n     o     },                                                                                                          // 6544\n     o     start: {                                                                                                    // 6545\n     o         x: (number) x coordinate of the start of the curve,                                                     // 6546\n     o         y: (number) y coordinate of the start of the curve                                                      // 6547\n     o     },                                                                                                          // 6548\n     o     end: {                                                                                                      // 6549\n     o         x: (number) x coordinate of the end of the curve,                                                       // 6550\n     o         y: (number) y coordinate of the end of the curve                                                        // 6551\n     o     },                                                                                                          // 6552\n     o     alpha: (number) angle of the curve derivative at the point                                                  // 6553\n     o }                                                                                                               // 6554\n    \\*/                                                                                                                // 6555\n    Snap.path.findDotsAtSegment = findDotsAtSegment;                                                                   // 6556\n    /*\\\n     * Snap.path.bezierBBox                                                                                            // 6558\n     [ method ]                                                                                                        // 6559\n     **                                                                                                                // 6560\n     * Utility method                                                                                                  // 6561\n     **                                                                                                                // 6562\n     * Returns the bounding box of a given cubic beziér curve                                                          // 6563\n     - p1x (number) x of the first point of the curve                                                                  // 6564\n     - p1y (number) y of the first point of the curve                                                                  // 6565\n     - c1x (number) x of the first anchor of the curve                                                                 // 6566\n     - c1y (number) y of the first anchor of the curve                                                                 // 6567\n     - c2x (number) x of the second anchor of the curve                                                                // 6568\n     - c2y (number) y of the second anchor of the curve                                                                // 6569\n     - p2x (number) x of the second point of the curve                                                                 // 6570\n     - p2y (number) y of the second point of the curve                                                                 // 6571\n     * or                                                                                                              // 6572\n     - bez (array) array of six points for beziér curve                                                                // 6573\n     = (object) bounding box                                                                                           // 6574\n     o {                                                                                                               // 6575\n     o     x: (number) x coordinate of the left top point of the box,                                                  // 6576\n     o     y: (number) y coordinate of the left top point of the box,                                                  // 6577\n     o     x2: (number) x coordinate of the right bottom point of the box,                                             // 6578\n     o     y2: (number) y coordinate of the right bottom point of the box,                                             // 6579\n     o     width: (number) width of the box,                                                                           // 6580\n     o     height: (number) height of the box                                                                          // 6581\n     o }                                                                                                               // 6582\n    \\*/                                                                                                                // 6583\n    Snap.path.bezierBBox = bezierBBox;                                                                                 // 6584\n    /*\\\n     * Snap.path.isPointInsideBBox                                                                                     // 6586\n     [ method ]                                                                                                        // 6587\n     **                                                                                                                // 6588\n     * Utility method                                                                                                  // 6589\n     **                                                                                                                // 6590\n     * Returns `true` if given point is inside bounding box                                                            // 6591\n     - bbox (string) bounding box                                                                                      // 6592\n     - x (string) x coordinate of the point                                                                            // 6593\n     - y (string) y coordinate of the point                                                                            // 6594\n     = (boolean) `true` if point is inside                                                                             // 6595\n    \\*/                                                                                                                // 6596\n    Snap.path.isPointInsideBBox = isPointInsideBBox;                                                                   // 6597\n    Snap.closest = function (x, y, X, Y) {                                                                             // 6598\n        var r = 100,                                                                                                   // 6599\n            b = box(x - r / 2, y - r / 2, r, r),                                                                       // 6600\n            inside = [],                                                                                               // 6601\n            getter = X[0].hasOwnProperty(\"x\") ? function (i) {                                                         // 6602\n                return {                                                                                               // 6603\n                    x: X[i].x,                                                                                         // 6604\n                    y: X[i].y                                                                                          // 6605\n                };                                                                                                     // 6606\n            } : function (i) {                                                                                         // 6607\n                return {                                                                                               // 6608\n                    x: X[i],                                                                                           // 6609\n                    y: Y[i]                                                                                            // 6610\n                };                                                                                                     // 6611\n            },                                                                                                         // 6612\n            found = 0;                                                                                                 // 6613\n        while (r <= 1e6 && !found) {                                                                                   // 6614\n            for (var i = 0, ii = X.length; i < ii; i++) {                                                              // 6615\n                var xy = getter(i);                                                                                    // 6616\n                if (isPointInsideBBox(b, xy.x, xy.y)) {                                                                // 6617\n                    found++;                                                                                           // 6618\n                    inside.push(xy);                                                                                   // 6619\n                    break;                                                                                             // 6620\n                }                                                                                                      // 6621\n            }                                                                                                          // 6622\n            if (!found) {                                                                                              // 6623\n                r *= 2;                                                                                                // 6624\n                b = box(x - r / 2, y - r / 2, r, r)                                                                    // 6625\n            }                                                                                                          // 6626\n        }                                                                                                              // 6627\n        if (r == 1e6) {                                                                                                // 6628\n            return;                                                                                                    // 6629\n        }                                                                                                              // 6630\n        var len = Infinity,                                                                                            // 6631\n            res;                                                                                                       // 6632\n        for (i = 0, ii = inside.length; i < ii; i++) {                                                                 // 6633\n            var l = Snap.len(x, y, inside[i].x, inside[i].y);                                                          // 6634\n            if (len > l) {                                                                                             // 6635\n                len = l;                                                                                               // 6636\n                inside[i].len = l;                                                                                     // 6637\n                res = inside[i];                                                                                       // 6638\n            }                                                                                                          // 6639\n        }                                                                                                              // 6640\n        return res;                                                                                                    // 6641\n    };                                                                                                                 // 6642\n    /*\\\n     * Snap.path.isBBoxIntersect                                                                                       // 6644\n     [ method ]                                                                                                        // 6645\n     **                                                                                                                // 6646\n     * Utility method                                                                                                  // 6647\n     **                                                                                                                // 6648\n     * Returns `true` if two bounding boxes intersect                                                                  // 6649\n     - bbox1 (string) first bounding box                                                                               // 6650\n     - bbox2 (string) second bounding box                                                                              // 6651\n     = (boolean) `true` if bounding boxes intersect                                                                    // 6652\n    \\*/                                                                                                                // 6653\n    Snap.path.isBBoxIntersect = isBBoxIntersect;                                                                       // 6654\n    /*\\\n     * Snap.path.intersection                                                                                          // 6656\n     [ method ]                                                                                                        // 6657\n     **                                                                                                                // 6658\n     * Utility method                                                                                                  // 6659\n     **                                                                                                                // 6660\n     * Finds intersections of two paths                                                                                // 6661\n     - path1 (string) path string                                                                                      // 6662\n     - path2 (string) path string                                                                                      // 6663\n     = (array) dots of intersection                                                                                    // 6664\n     o [                                                                                                               // 6665\n     o     {                                                                                                           // 6666\n     o         x: (number) x coordinate of the point,                                                                  // 6667\n     o         y: (number) y coordinate of the point,                                                                  // 6668\n     o         t1: (number) t value for segment of path1,                                                              // 6669\n     o         t2: (number) t value for segment of path2,                                                              // 6670\n     o         segment1: (number) order number for segment of path1,                                                   // 6671\n     o         segment2: (number) order number for segment of path2,                                                   // 6672\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,                     // 6673\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2                      // 6674\n     o     }                                                                                                           // 6675\n     o ]                                                                                                               // 6676\n    \\*/                                                                                                                // 6677\n    Snap.path.intersection = pathIntersection;                                                                         // 6678\n    Snap.path.intersectionNumber = pathIntersectionNumber;                                                             // 6679\n    /*\\\n     * Snap.path.isPointInside                                                                                         // 6681\n     [ method ]                                                                                                        // 6682\n     **                                                                                                                // 6683\n     * Utility method                                                                                                  // 6684\n     **                                                                                                                // 6685\n     * Returns `true` if given point is inside a given closed path.                                                    // 6686\n     *                                                                                                                 // 6687\n     * Note: fill mode doesn’t affect the result of this method.                                                       // 6688\n     - path (string) path string                                                                                       // 6689\n     - x (number) x of the point                                                                                       // 6690\n     - y (number) y of the point                                                                                       // 6691\n     = (boolean) `true` if point is inside the path                                                                    // 6692\n    \\*/                                                                                                                // 6693\n    Snap.path.isPointInside = isPointInsidePath;                                                                       // 6694\n    /*\\\n     * Snap.path.getBBox                                                                                               // 6696\n     [ method ]                                                                                                        // 6697\n     **                                                                                                                // 6698\n     * Utility method                                                                                                  // 6699\n     **                                                                                                                // 6700\n     * Returns the bounding box of a given path                                                                        // 6701\n     - path (string) path string                                                                                       // 6702\n     = (object) bounding box                                                                                           // 6703\n     o {                                                                                                               // 6704\n     o     x: (number) x coordinate of the left top point of the box,                                                  // 6705\n     o     y: (number) y coordinate of the left top point of the box,                                                  // 6706\n     o     x2: (number) x coordinate of the right bottom point of the box,                                             // 6707\n     o     y2: (number) y coordinate of the right bottom point of the box,                                             // 6708\n     o     width: (number) width of the box,                                                                           // 6709\n     o     height: (number) height of the box                                                                          // 6710\n     o }                                                                                                               // 6711\n    \\*/                                                                                                                // 6712\n    Snap.path.getBBox = pathBBox;                                                                                      // 6713\n    Snap.path.get = getPath;                                                                                           // 6714\n    /*\\\n     * Snap.path.toRelative                                                                                            // 6716\n     [ method ]                                                                                                        // 6717\n     **                                                                                                                // 6718\n     * Utility method                                                                                                  // 6719\n     **                                                                                                                // 6720\n     * Converts path coordinates into relative values                                                                  // 6721\n     - path (string) path string                                                                                       // 6722\n     = (array) path string                                                                                             // 6723\n    \\*/                                                                                                                // 6724\n    Snap.path.toRelative = pathToRelative;                                                                             // 6725\n    /*\\\n     * Snap.path.toAbsolute                                                                                            // 6727\n     [ method ]                                                                                                        // 6728\n     **                                                                                                                // 6729\n     * Utility method                                                                                                  // 6730\n     **                                                                                                                // 6731\n     * Converts path coordinates into absolute values                                                                  // 6732\n     - path (string) path string                                                                                       // 6733\n     = (array) path string                                                                                             // 6734\n    \\*/                                                                                                                // 6735\n    Snap.path.toAbsolute = pathToAbsolute;                                                                             // 6736\n    /*\\\n     * Snap.path.toCubic                                                                                               // 6738\n     [ method ]                                                                                                        // 6739\n     **                                                                                                                // 6740\n     * Utility method                                                                                                  // 6741\n     **                                                                                                                // 6742\n     * Converts path to a new path where all segments are cubic beziér curves                                          // 6743\n     - pathString (string|array) path string or array of segments                                                      // 6744\n     = (array) array of segments                                                                                       // 6745\n    \\*/                                                                                                                // 6746\n    Snap.path.toCubic = path2curve;                                                                                    // 6747\n    /*\\\n     * Snap.path.map                                                                                                   // 6749\n     [ method ]                                                                                                        // 6750\n     **                                                                                                                // 6751\n     * Transform the path string with the given matrix                                                                 // 6752\n     - path (string) path string                                                                                       // 6753\n     - matrix (object) see @Matrix                                                                                     // 6754\n     = (string) transformed path string                                                                                // 6755\n    \\*/                                                                                                                // 6756\n    Snap.path.map = mapPath;                                                                                           // 6757\n    Snap.path.toString = toString;                                                                                     // 6758\n    Snap.path.clone = pathClone;                                                                                       // 6759\n});                                                                                                                    // 6760\n                                                                                                                       // 6761\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 6762\n//                                                                                                                     // 6763\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 6764\n// you may not use this file except in compliance with the License.                                                    // 6765\n// You may obtain a copy of the License at                                                                             // 6766\n//                                                                                                                     // 6767\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 6768\n//                                                                                                                     // 6769\n// Unless required by applicable law or agreed to in writing, software                                                 // 6770\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 6771\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 6772\n// See the License for the specific language governing permissions and                                                 // 6773\n// limitations under the License.                                                                                      // 6774\nSnap.plugin(function (Snap, Element, Paper, glob) {                                                                    // 6775\n    var mmax = Math.max,                                                                                               // 6776\n        mmin = Math.min;                                                                                               // 6777\n                                                                                                                       // 6778\n    // Set                                                                                                             // 6779\n    var Set = function (items) {                                                                                       // 6780\n        this.items = [];                                                                                               // 6781\n\tthis.bindings = {};                                                                                                   // 6782\n        this.length = 0;                                                                                               // 6783\n        this.type = \"set\";                                                                                             // 6784\n        if (items) {                                                                                                   // 6785\n            for (var i = 0, ii = items.length; i < ii; i++) {                                                          // 6786\n                if (items[i]) {                                                                                        // 6787\n                    this[this.items.length] = this.items[this.items.length] = items[i];                                // 6788\n                    this.length++;                                                                                     // 6789\n                }                                                                                                      // 6790\n            }                                                                                                          // 6791\n        }                                                                                                              // 6792\n    },                                                                                                                 // 6793\n    setproto = Set.prototype;                                                                                          // 6794\n    /*\\\n     * Set.push                                                                                                        // 6796\n     [ method ]                                                                                                        // 6797\n     **                                                                                                                // 6798\n     * Adds each argument to the current set                                                                           // 6799\n     = (object) original element                                                                                       // 6800\n    \\*/                                                                                                                // 6801\n    setproto.push = function () {                                                                                      // 6802\n        var item,                                                                                                      // 6803\n            len;                                                                                                       // 6804\n        for (var i = 0, ii = arguments.length; i < ii; i++) {                                                          // 6805\n            item = arguments[i];                                                                                       // 6806\n            if (item) {                                                                                                // 6807\n                len = this.items.length;                                                                               // 6808\n                this[len] = this.items[len] = item;                                                                    // 6809\n                this.length++;                                                                                         // 6810\n            }                                                                                                          // 6811\n        }                                                                                                              // 6812\n        return this;                                                                                                   // 6813\n    };                                                                                                                 // 6814\n    /*\\\n     * Set.pop                                                                                                         // 6816\n     [ method ]                                                                                                        // 6817\n     **                                                                                                                // 6818\n     * Removes last element and returns it                                                                             // 6819\n     = (object) element                                                                                                // 6820\n    \\*/                                                                                                                // 6821\n    setproto.pop = function () {                                                                                       // 6822\n        this.length && delete this[this.length--];                                                                     // 6823\n        return this.items.pop();                                                                                       // 6824\n    };                                                                                                                 // 6825\n    /*\\\n     * Set.forEach                                                                                                     // 6827\n     [ method ]                                                                                                        // 6828\n     **                                                                                                                // 6829\n     * Executes given function for each element in the set                                                             // 6830\n     *                                                                                                                 // 6831\n     * If the function returns `false`, the loop stops running.                                                        // 6832\n     **                                                                                                                // 6833\n     - callback (function) function to run                                                                             // 6834\n     - thisArg (object) context object for the callback                                                                // 6835\n     = (object) Set object                                                                                             // 6836\n    \\*/                                                                                                                // 6837\n    setproto.forEach = function (callback, thisArg) {                                                                  // 6838\n        for (var i = 0, ii = this.items.length; i < ii; i++) {                                                         // 6839\n            if (callback.call(thisArg, this.items[i], i) === false) {                                                  // 6840\n                return this;                                                                                           // 6841\n            }                                                                                                          // 6842\n        }                                                                                                              // 6843\n        return this;                                                                                                   // 6844\n    };                                                                                                                 // 6845\n    /*\\\n     * Set.animate                                                                                                     // 6847\n     [ method ]                                                                                                        // 6848\n     **                                                                                                                // 6849\n     * Animates each element in set in sync.                                                                           // 6850\n     *                                                                                                                 // 6851\n     **                                                                                                                // 6852\n     - attrs (object) key-value pairs of destination attributes                                                        // 6853\n     - duration (number) duration of the animation in milliseconds                                                     // 6854\n     - easing (function) #optional easing function from @mina or custom                                                // 6855\n     - callback (function) #optional callback function that executes when the animation ends                           // 6856\n     * or                                                                                                              // 6857\n     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n     > Usage                                                                                                           // 6859\n     | // animate all elements in set to radius 10                                                                     // 6860\n     | set.animate({r: 10}, 500, mina.easein);                                                                         // 6861\n     | // or                                                                                                           // 6862\n     | // animate first element to radius 10, but second to radius 20 and in different time                            // 6863\n     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);                                         // 6864\n     = (Element) the current element                                                                                   // 6865\n    \\*/                                                                                                                // 6866\n    setproto.animate = function (attrs, ms, easing, callback) {                                                        // 6867\n        if (typeof easing == \"function\" && !easing.length) {                                                           // 6868\n            callback = easing;                                                                                         // 6869\n            easing = mina.linear;                                                                                      // 6870\n        }                                                                                                              // 6871\n        if (attrs instanceof Snap._.Animation) {                                                                       // 6872\n            callback = attrs.callback;                                                                                 // 6873\n            easing = attrs.easing;                                                                                     // 6874\n            ms = easing.dur;                                                                                           // 6875\n            attrs = attrs.attr;                                                                                        // 6876\n        }                                                                                                              // 6877\n        var args = arguments;                                                                                          // 6878\n        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {                                      // 6879\n            var each = true;                                                                                           // 6880\n        }                                                                                                              // 6881\n        var begin,                                                                                                     // 6882\n            handler = function () {                                                                                    // 6883\n                if (begin) {                                                                                           // 6884\n                    this.b = begin;                                                                                    // 6885\n                } else {                                                                                               // 6886\n                    begin = this.b;                                                                                    // 6887\n                }                                                                                                      // 6888\n            },                                                                                                         // 6889\n            cb = 0,                                                                                                    // 6890\n            set = this,                                                                                                // 6891\n            callbacker = callback && function () {                                                                     // 6892\n                if (++cb == set.length) {                                                                              // 6893\n                    callback.call(this);                                                                               // 6894\n                }                                                                                                      // 6895\n            };                                                                                                         // 6896\n        return this.forEach(function (el, i) {                                                                         // 6897\n            eve.once(\"snap.animcreated.\" + el.id, handler);                                                            // 6898\n            if (each) {                                                                                                // 6899\n                args[i] && el.animate.apply(el, args[i]);                                                              // 6900\n            } else {                                                                                                   // 6901\n                el.animate(attrs, ms, easing, callbacker);                                                             // 6902\n            }                                                                                                          // 6903\n        });                                                                                                            // 6904\n    };                                                                                                                 // 6905\n    setproto.remove = function () {                                                                                    // 6906\n        while (this.length) {                                                                                          // 6907\n            this.pop().remove();                                                                                       // 6908\n        }                                                                                                              // 6909\n        return this;                                                                                                   // 6910\n    };                                                                                                                 // 6911\n    /*\\\n     * Set.bind                                                                                                        // 6913\n     [ method ]                                                                                                        // 6914\n     **                                                                                                                // 6915\n     * Specifies how to handle a specific attribute when applied                                                       // 6916\n     * to a set.                                                                                                       // 6917\n     *                                                                                                                 // 6918\n     **                                                                                                                // 6919\n     - attr (string) attribute name                                                                                    // 6920\n     - callback (function) function to run                                                                             // 6921\n     * or                                                                                                              // 6922\n     - attr (string) attribute name                                                                                    // 6923\n     - element (Element) specific element in the set to apply the attribute to                                         // 6924\n     * or                                                                                                              // 6925\n     - attr (string) attribute name                                                                                    // 6926\n     - element (Element) specific element in the set to apply the attribute to                                         // 6927\n     - eattr (string) attribute on the element to bind the attribute to                                                // 6928\n     = (object) Set object                                                                                             // 6929\n    \\*/                                                                                                                // 6930\n    setproto.bind = function (attr, a, b) {                                                                            // 6931\n        var data = {};                                                                                                 // 6932\n        if (typeof a == \"function\") {                                                                                  // 6933\n            this.bindings[attr] = a;                                                                                   // 6934\n        } else {                                                                                                       // 6935\n            var aname = b || attr;                                                                                     // 6936\n            this.bindings[attr] = function (v) {                                                                       // 6937\n                data[aname] = v;                                                                                       // 6938\n                a.attr(data);                                                                                          // 6939\n            };                                                                                                         // 6940\n        }                                                                                                              // 6941\n        return this;                                                                                                   // 6942\n    };                                                                                                                 // 6943\n    setproto.attr = function (value) {                                                                                 // 6944\n        var unbound = {};                                                                                              // 6945\n        for (var k in value) {                                                                                         // 6946\n            if (this.bindings[k]) {                                                                                    // 6947\n                this.bindings[k](value[k]);                                                                            // 6948\n            } else {                                                                                                   // 6949\n                unbound[k] = value[k];                                                                                 // 6950\n            }                                                                                                          // 6951\n        }                                                                                                              // 6952\n        for (var i = 0, ii = this.items.length; i < ii; i++) {                                                         // 6953\n            this.items[i].attr(unbound);                                                                               // 6954\n        }                                                                                                              // 6955\n        return this;                                                                                                   // 6956\n    };                                                                                                                 // 6957\n    /*\\\n     * Set.clear                                                                                                       // 6959\n     [ method ]                                                                                                        // 6960\n     **                                                                                                                // 6961\n     * Removes all elements from the set                                                                               // 6962\n    \\*/                                                                                                                // 6963\n    setproto.clear = function () {                                                                                     // 6964\n        while (this.length) {                                                                                          // 6965\n            this.pop();                                                                                                // 6966\n        }                                                                                                              // 6967\n    };                                                                                                                 // 6968\n    /*\\\n     * Set.splice                                                                                                      // 6970\n     [ method ]                                                                                                        // 6971\n     **                                                                                                                // 6972\n     * Removes range of elements from the set                                                                          // 6973\n     **                                                                                                                // 6974\n     - index (number) position of the deletion                                                                         // 6975\n     - count (number) number of element to remove                                                                      // 6976\n     - insertion… (object) #optional elements to insert                                                                // 6977\n     = (object) set elements that were deleted                                                                         // 6978\n    \\*/                                                                                                                // 6979\n    setproto.splice = function (index, count, insertion) {                                                             // 6980\n        index = index < 0 ? mmax(this.length + index, 0) : index;                                                      // 6981\n        count = mmax(0, mmin(this.length - index, count));                                                             // 6982\n        var tail = [],                                                                                                 // 6983\n            todel = [],                                                                                                // 6984\n            args = [],                                                                                                 // 6985\n            i;                                                                                                         // 6986\n        for (i = 2; i < arguments.length; i++) {                                                                       // 6987\n            args.push(arguments[i]);                                                                                   // 6988\n        }                                                                                                              // 6989\n        for (i = 0; i < count; i++) {                                                                                  // 6990\n            todel.push(this[index + i]);                                                                               // 6991\n        }                                                                                                              // 6992\n        for (; i < this.length - index; i++) {                                                                         // 6993\n            tail.push(this[index + i]);                                                                                // 6994\n        }                                                                                                              // 6995\n        var arglen = args.length;                                                                                      // 6996\n        for (i = 0; i < arglen + tail.length; i++) {                                                                   // 6997\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];                         // 6998\n        }                                                                                                              // 6999\n        i = this.items.length = this.length -= count - arglen;                                                         // 7000\n        while (this[i]) {                                                                                              // 7001\n            delete this[i++];                                                                                          // 7002\n        }                                                                                                              // 7003\n        return new Set(todel);                                                                                         // 7004\n    };                                                                                                                 // 7005\n    /*\\\n     * Set.exclude                                                                                                     // 7007\n     [ method ]                                                                                                        // 7008\n     **                                                                                                                // 7009\n     * Removes given element from the set                                                                              // 7010\n     **                                                                                                                // 7011\n     - element (object) element to remove                                                                              // 7012\n     = (boolean) `true` if object was found and removed from the set                                                   // 7013\n    \\*/                                                                                                                // 7014\n    setproto.exclude = function (el) {                                                                                 // 7015\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {                                            // 7016\n            this.splice(i, 1);                                                                                         // 7017\n            return true;                                                                                               // 7018\n        }                                                                                                              // 7019\n        return false;                                                                                                  // 7020\n    };                                                                                                                 // 7021\n    setproto.insertAfter = function (el) {                                                                             // 7022\n        var i = this.items.length;                                                                                     // 7023\n        while (i--) {                                                                                                  // 7024\n            this.items[i].insertAfter(el);                                                                             // 7025\n        }                                                                                                              // 7026\n        return this;                                                                                                   // 7027\n    };                                                                                                                 // 7028\n    setproto.getBBox = function () {                                                                                   // 7029\n        var x = [],                                                                                                    // 7030\n            y = [],                                                                                                    // 7031\n            x2 = [],                                                                                                   // 7032\n            y2 = [];                                                                                                   // 7033\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {                                            // 7034\n            var box = this.items[i].getBBox();                                                                         // 7035\n            x.push(box.x);                                                                                             // 7036\n            y.push(box.y);                                                                                             // 7037\n            x2.push(box.x + box.width);                                                                                // 7038\n            y2.push(box.y + box.height);                                                                               // 7039\n        }                                                                                                              // 7040\n        x = mmin.apply(0, x);                                                                                          // 7041\n        y = mmin.apply(0, y);                                                                                          // 7042\n        x2 = mmax.apply(0, x2);                                                                                        // 7043\n        y2 = mmax.apply(0, y2);                                                                                        // 7044\n        return {                                                                                                       // 7045\n            x: x,                                                                                                      // 7046\n            y: y,                                                                                                      // 7047\n            x2: x2,                                                                                                    // 7048\n            y2: y2,                                                                                                    // 7049\n            width: x2 - x,                                                                                             // 7050\n            height: y2 - y,                                                                                            // 7051\n            cx: x + (x2 - x) / 2,                                                                                      // 7052\n            cy: y + (y2 - y) / 2                                                                                       // 7053\n        };                                                                                                             // 7054\n    };                                                                                                                 // 7055\n    setproto.clone = function (s) {                                                                                    // 7056\n        s = new Set;                                                                                                   // 7057\n        for (var i = 0, ii = this.items.length; i < ii; i++) {                                                         // 7058\n            s.push(this.items[i].clone());                                                                             // 7059\n        }                                                                                                              // 7060\n        return s;                                                                                                      // 7061\n    };                                                                                                                 // 7062\n    setproto.toString = function () {                                                                                  // 7063\n        return \"Snap\\u2018s set\";                                                                                      // 7064\n    };                                                                                                                 // 7065\n    setproto.type = \"set\";                                                                                             // 7066\n    // export                                                                                                          // 7067\n    Snap.Set = Set;                                                                                                    // 7068\n    Snap.set = function () {                                                                                           // 7069\n        var set = new Set;                                                                                             // 7070\n        if (arguments.length) {                                                                                        // 7071\n            set.push.apply(set, Array.prototype.slice.call(arguments, 0));                                             // 7072\n        }                                                                                                              // 7073\n        return set;                                                                                                    // 7074\n    };                                                                                                                 // 7075\n});                                                                                                                    // 7076\n                                                                                                                       // 7077\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 7078\n//                                                                                                                     // 7079\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 7080\n// you may not use this file except in compliance with the License.                                                    // 7081\n// You may obtain a copy of the License at                                                                             // 7082\n//                                                                                                                     // 7083\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7084\n//                                                                                                                     // 7085\n// Unless required by applicable law or agreed to in writing, software                                                 // 7086\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 7087\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7088\n// See the License for the specific language governing permissions and                                                 // 7089\n// limitations under the License.                                                                                      // 7090\nSnap.plugin(function (Snap, Element, Paper, glob) {                                                                    // 7091\n    var names = {},                                                                                                    // 7092\n        reUnit = /[a-z]+$/i,                                                                                           // 7093\n        Str = String;                                                                                                  // 7094\n    names.stroke = names.fill = \"colour\";                                                                              // 7095\n    function getEmpty(item) {                                                                                          // 7096\n        var l = item[0];                                                                                               // 7097\n        switch (l.toLowerCase()) {                                                                                     // 7098\n            case \"t\": return [l, 0, 0];                                                                                // 7099\n            case \"m\": return [l, 1, 0, 0, 1, 0, 0];                                                                    // 7100\n            case \"r\": if (item.length == 4) {                                                                          // 7101\n                return [l, 0, item[2], item[3]];                                                                       // 7102\n            } else {                                                                                                   // 7103\n                return [l, 0];                                                                                         // 7104\n            }                                                                                                          // 7105\n            case \"s\": if (item.length == 5) {                                                                          // 7106\n                return [l, 1, 1, item[3], item[4]];                                                                    // 7107\n            } else if (item.length == 3) {                                                                             // 7108\n                return [l, 1, 1];                                                                                      // 7109\n            } else {                                                                                                   // 7110\n                return [l, 1];                                                                                         // 7111\n            }                                                                                                          // 7112\n        }                                                                                                              // 7113\n    }                                                                                                                  // 7114\n    function equaliseTransform(t1, t2, getBBox) {                                                                      // 7115\n        t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);                                                                     // 7116\n        t1 = Snap.parseTransformString(t1) || [];                                                                      // 7117\n        t2 = Snap.parseTransformString(t2) || [];                                                                      // 7118\n        var maxlength = Math.max(t1.length, t2.length),                                                                // 7119\n            from = [],                                                                                                 // 7120\n            to = [],                                                                                                   // 7121\n            i = 0, j, jj,                                                                                              // 7122\n            tt1, tt2;                                                                                                  // 7123\n        for (; i < maxlength; i++) {                                                                                   // 7124\n            tt1 = t1[i] || getEmpty(t2[i]);                                                                            // 7125\n            tt2 = t2[i] || getEmpty(tt1);                                                                              // 7126\n            if ((tt1[0] != tt2[0]) ||                                                                                  // 7127\n                (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||                             // 7128\n                (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))                                // 7129\n                ) {                                                                                                    // 7130\n                    t1 = Snap._.transform2matrix(t1, getBBox());                                                       // 7131\n                    t2 = Snap._.transform2matrix(t2, getBBox());                                                       // 7132\n                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];                                                // 7133\n                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];                                                  // 7134\n                    break;                                                                                             // 7135\n            }                                                                                                          // 7136\n            from[i] = [];                                                                                              // 7137\n            to[i] = [];                                                                                                // 7138\n            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {                                          // 7139\n                j in tt1 && (from[i][j] = tt1[j]);                                                                     // 7140\n                j in tt2 && (to[i][j] = tt2[j]);                                                                       // 7141\n            }                                                                                                          // 7142\n        }                                                                                                              // 7143\n        return {                                                                                                       // 7144\n            from: path2array(from),                                                                                    // 7145\n            to: path2array(to),                                                                                        // 7146\n            f: getPath(from)                                                                                           // 7147\n        };                                                                                                             // 7148\n    }                                                                                                                  // 7149\n    function getNumber(val) {                                                                                          // 7150\n        return val;                                                                                                    // 7151\n    }                                                                                                                  // 7152\n    function getUnit(unit) {                                                                                           // 7153\n        return function (val) {                                                                                        // 7154\n            return +val.toFixed(3) + unit;                                                                             // 7155\n        };                                                                                                             // 7156\n    }                                                                                                                  // 7157\n    function getViewBox(val) {                                                                                         // 7158\n        return val.join(\" \");                                                                                          // 7159\n    }                                                                                                                  // 7160\n    function getColour(clr) {                                                                                          // 7161\n        return Snap.rgb(clr[0], clr[1], clr[2]);                                                                       // 7162\n    }                                                                                                                  // 7163\n    function getPath(path) {                                                                                           // 7164\n        var k = 0, i, ii, j, jj, out, a, b = [];                                                                       // 7165\n        for (i = 0, ii = path.length; i < ii; i++) {                                                                   // 7166\n            out = \"[\";                                                                                                 // 7167\n            a = ['\"' + path[i][0] + '\"'];                                                                              // 7168\n            for (j = 1, jj = path[i].length; j < jj; j++) {                                                            // 7169\n                a[j] = \"val[\" + (k++) + \"]\";                                                                           // 7170\n            }                                                                                                          // 7171\n            out += a + \"]\";                                                                                            // 7172\n            b[i] = out;                                                                                                // 7173\n        }                                                                                                              // 7174\n        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");                                         // 7175\n    }                                                                                                                  // 7176\n    function path2array(path) {                                                                                        // 7177\n        var out = [];                                                                                                  // 7178\n        for (var i = 0, ii = path.length; i < ii; i++) {                                                               // 7179\n            for (var j = 1, jj = path[i].length; j < jj; j++) {                                                        // 7180\n                out.push(path[i][j]);                                                                                  // 7181\n            }                                                                                                          // 7182\n        }                                                                                                              // 7183\n        return out;                                                                                                    // 7184\n    }                                                                                                                  // 7185\n    function isNumeric(obj) {                                                                                          // 7186\n        return isFinite(parseFloat(obj));                                                                              // 7187\n    }                                                                                                                  // 7188\n    function arrayEqual(arr1, arr2) {                                                                                  // 7189\n        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {                                                      // 7190\n            return false;                                                                                              // 7191\n        }                                                                                                              // 7192\n        return arr1.toString() == arr2.toString();                                                                     // 7193\n    }                                                                                                                  // 7194\n    Element.prototype.equal = function (name, b) {                                                                     // 7195\n        return eve(\"snap.util.equal\", this, name, b).firstDefined();                                                   // 7196\n    };                                                                                                                 // 7197\n    eve.on(\"snap.util.equal\", function (name, b) {                                                                     // 7198\n        var A, B, a = Str(this.attr(name) || \"\"),                                                                      // 7199\n            el = this;                                                                                                 // 7200\n        if (isNumeric(a) && isNumeric(b)) {                                                                            // 7201\n            return {                                                                                                   // 7202\n                from: parseFloat(a),                                                                                   // 7203\n                to: parseFloat(b),                                                                                     // 7204\n                f: getNumber                                                                                           // 7205\n            };                                                                                                         // 7206\n        }                                                                                                              // 7207\n        if (names[name] == \"colour\") {                                                                                 // 7208\n            A = Snap.color(a);                                                                                         // 7209\n            B = Snap.color(b);                                                                                         // 7210\n            return {                                                                                                   // 7211\n                from: [A.r, A.g, A.b, A.opacity],                                                                      // 7212\n                to: [B.r, B.g, B.b, B.opacity],                                                                        // 7213\n                f: getColour                                                                                           // 7214\n            };                                                                                                         // 7215\n        }                                                                                                              // 7216\n        if (name == \"viewBox\") {                                                                                       // 7217\n            A = this.attr(name).vb.split(\" \").map(Number);                                                             // 7218\n            B = b.split(\" \").map(Number);                                                                              // 7219\n            return {                                                                                                   // 7220\n                from: A,                                                                                               // 7221\n                to: B,                                                                                                 // 7222\n                f: getViewBox                                                                                          // 7223\n            };                                                                                                         // 7224\n        }                                                                                                              // 7225\n        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {                        // 7226\n            if (b instanceof Snap.Matrix) {                                                                            // 7227\n                b = b.toTransformString();                                                                             // 7228\n            }                                                                                                          // 7229\n            if (!Snap._.rgTransform.test(b)) {                                                                         // 7230\n                b = Snap._.svgTransform2string(b);                                                                     // 7231\n            }                                                                                                          // 7232\n            return equaliseTransform(a, b, function () {                                                               // 7233\n                return el.getBBox(1);                                                                                  // 7234\n            });                                                                                                        // 7235\n        }                                                                                                              // 7236\n        if (name == \"d\" || name == \"path\") {                                                                           // 7237\n            A = Snap.path.toCubic(a, b);                                                                               // 7238\n            return {                                                                                                   // 7239\n                from: path2array(A[0]),                                                                                // 7240\n                to: path2array(A[1]),                                                                                  // 7241\n                f: getPath(A[0])                                                                                       // 7242\n            };                                                                                                         // 7243\n        }                                                                                                              // 7244\n        if (name == \"points\") {                                                                                        // 7245\n            A = Str(a).split(Snap._.separator);                                                                        // 7246\n            B = Str(b).split(Snap._.separator);                                                                        // 7247\n            return {                                                                                                   // 7248\n                from: A,                                                                                               // 7249\n                to: B,                                                                                                 // 7250\n                f: function (val) { return val; }                                                                      // 7251\n            };                                                                                                         // 7252\n        }                                                                                                              // 7253\n        var aUnit = a.match(reUnit),                                                                                   // 7254\n            bUnit = Str(b).match(reUnit);                                                                              // 7255\n        if (aUnit && arrayEqual(aUnit, bUnit)) {                                                                       // 7256\n            return {                                                                                                   // 7257\n                from: parseFloat(a),                                                                                   // 7258\n                to: parseFloat(b),                                                                                     // 7259\n                f: getUnit(aUnit)                                                                                      // 7260\n            };                                                                                                         // 7261\n        } else {                                                                                                       // 7262\n            return {                                                                                                   // 7263\n                from: this.asPX(name),                                                                                 // 7264\n                to: this.asPX(name, b),                                                                                // 7265\n                f: getNumber                                                                                           // 7266\n            };                                                                                                         // 7267\n        }                                                                                                              // 7268\n    });                                                                                                                // 7269\n});                                                                                                                    // 7270\n                                                                                                                       // 7271\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 7272\n//                                                                                                                     // 7273\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 7274\n// you may not use this file except in compliance with the License.                                                    // 7275\n// You may obtain a copy of the License at                                                                             // 7276\n//                                                                                                                     // 7277\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7278\n//                                                                                                                     // 7279\n// Unless required by applicable law or agreed to in writing, software                                                 // 7280\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 7281\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7282\n// See the License for the specific language governing permissions and                                                 // 7283\n// limitations under the License.                                                                                      // 7284\nSnap.plugin(function (Snap, Element, Paper, glob) {                                                                    // 7285\n    var elproto = Element.prototype,                                                                                   // 7286\n    has = \"hasOwnProperty\",                                                                                            // 7287\n    supportsTouch = \"createTouch\" in glob.doc,                                                                         // 7288\n    events = [                                                                                                         // 7289\n        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",                                                     // 7290\n        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",                                                 // 7291\n        \"touchcancel\"                                                                                                  // 7292\n    ],                                                                                                                 // 7293\n    touchMap = {                                                                                                       // 7294\n        mousedown: \"touchstart\",                                                                                       // 7295\n        mousemove: \"touchmove\",                                                                                        // 7296\n        mouseup: \"touchend\"                                                                                            // 7297\n    },                                                                                                                 // 7298\n    getScroll = function (xy, el) {                                                                                    // 7299\n        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",                                                             // 7300\n            doc = el && el.node ? el.node.ownerDocument : glob.doc;                                                    // 7301\n        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];                                    // 7302\n    },                                                                                                                 // 7303\n    preventDefault = function () {                                                                                     // 7304\n        this.returnValue = false;                                                                                      // 7305\n    },                                                                                                                 // 7306\n    preventTouch = function () {                                                                                       // 7307\n        return this.originalEvent.preventDefault();                                                                    // 7308\n    },                                                                                                                 // 7309\n    stopPropagation = function () {                                                                                    // 7310\n        this.cancelBubble = true;                                                                                      // 7311\n    },                                                                                                                 // 7312\n    stopTouch = function () {                                                                                          // 7313\n        return this.originalEvent.stopPropagation();                                                                   // 7314\n    },                                                                                                                 // 7315\n    addEvent = function (obj, type, fn, element) {                                                                     // 7316\n        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,                                        // 7317\n            f = function (e) {                                                                                         // 7318\n                var scrollY = getScroll(\"y\", element),                                                                 // 7319\n                    scrollX = getScroll(\"x\", element);                                                                 // 7320\n                if (supportsTouch && touchMap[has](type)) {                                                            // 7321\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {                     // 7322\n                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {             // 7323\n                            var olde = e;                                                                              // 7324\n                            e = e.targetTouches[i];                                                                    // 7325\n                            e.originalEvent = olde;                                                                    // 7326\n                            e.preventDefault = preventTouch;                                                           // 7327\n                            e.stopPropagation = stopTouch;                                                             // 7328\n                            break;                                                                                     // 7329\n                        }                                                                                              // 7330\n                    }                                                                                                  // 7331\n                }                                                                                                      // 7332\n                var x = e.clientX + scrollX,                                                                           // 7333\n                    y = e.clientY + scrollY;                                                                           // 7334\n                return fn.call(element, e, x, y);                                                                      // 7335\n            };                                                                                                         // 7336\n                                                                                                                       // 7337\n        if (type !== realName) {                                                                                       // 7338\n            obj.addEventListener(type, f, false);                                                                      // 7339\n        }                                                                                                              // 7340\n                                                                                                                       // 7341\n        obj.addEventListener(realName, f, false);                                                                      // 7342\n                                                                                                                       // 7343\n        return function () {                                                                                           // 7344\n            if (type !== realName) {                                                                                   // 7345\n                obj.removeEventListener(type, f, false);                                                               // 7346\n            }                                                                                                          // 7347\n                                                                                                                       // 7348\n            obj.removeEventListener(realName, f, false);                                                               // 7349\n            return true;                                                                                               // 7350\n        };                                                                                                             // 7351\n    },                                                                                                                 // 7352\n    drag = [],                                                                                                         // 7353\n    dragMove = function (e) {                                                                                          // 7354\n        var x = e.clientX,                                                                                             // 7355\n            y = e.clientY,                                                                                             // 7356\n            scrollY = getScroll(\"y\"),                                                                                  // 7357\n            scrollX = getScroll(\"x\"),                                                                                  // 7358\n            dragi,                                                                                                     // 7359\n            j = drag.length;                                                                                           // 7360\n        while (j--) {                                                                                                  // 7361\n            dragi = drag[j];                                                                                           // 7362\n            if (supportsTouch) {                                                                                       // 7363\n                var i = e.touches && e.touches.length,                                                                 // 7364\n                    touch;                                                                                             // 7365\n                while (i--) {                                                                                          // 7366\n                    touch = e.touches[i];                                                                              // 7367\n                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {               // 7368\n                        x = touch.clientX;                                                                             // 7369\n                        y = touch.clientY;                                                                             // 7370\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();                                      // 7371\n                        break;                                                                                         // 7372\n                    }                                                                                                  // 7373\n                }                                                                                                      // 7374\n            } else {                                                                                                   // 7375\n                e.preventDefault();                                                                                    // 7376\n            }                                                                                                          // 7377\n            var node = dragi.el.node,                                                                                  // 7378\n                o,                                                                                                     // 7379\n                next = node.nextSibling,                                                                               // 7380\n                parent = node.parentNode,                                                                              // 7381\n                display = node.style.display;                                                                          // 7382\n            // glob.win.opera && parent.removeChild(node);                                                             // 7383\n            // node.style.display = \"none\";                                                                            // 7384\n            // o = dragi.el.paper.getElementByPoint(x, y);                                                             // 7385\n            // node.style.display = display;                                                                           // 7386\n            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));                  // 7387\n            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);                                                 // 7388\n            x += scrollX;                                                                                              // 7389\n            y += scrollY;                                                                                              // 7390\n            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }                                                                                                              // 7392\n    },                                                                                                                 // 7393\n    dragUp = function (e) {                                                                                            // 7394\n        Snap.unmousemove(dragMove).unmouseup(dragUp);                                                                  // 7395\n        var i = drag.length,                                                                                           // 7396\n            dragi;                                                                                                     // 7397\n        while (i--) {                                                                                                  // 7398\n            dragi = drag[i];                                                                                           // 7399\n            dragi.el._drag = {};                                                                                       // 7400\n            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            eve.off(\"snap.drag.*.\" + dragi.el.id);                                                                     // 7402\n        }                                                                                                              // 7403\n        drag = [];                                                                                                     // 7404\n    };                                                                                                                 // 7405\n    /*\\\n     * Element.click                                                                                                   // 7407\n     [ method ]                                                                                                        // 7408\n     **                                                                                                                // 7409\n     * Adds a click event handler to the element                                                                       // 7410\n     - handler (function) handler for the event                                                                        // 7411\n     = (object) @Element                                                                                               // 7412\n    \\*/                                                                                                                // 7413\n    /*\\\n     * Element.unclick                                                                                                 // 7415\n     [ method ]                                                                                                        // 7416\n     **                                                                                                                // 7417\n     * Removes a click event handler from the element                                                                  // 7418\n     - handler (function) handler for the event                                                                        // 7419\n     = (object) @Element                                                                                               // 7420\n    \\*/                                                                                                                // 7421\n                                                                                                                       // 7422\n    /*\\\n     * Element.dblclick                                                                                                // 7424\n     [ method ]                                                                                                        // 7425\n     **                                                                                                                // 7426\n     * Adds a double click event handler to the element                                                                // 7427\n     - handler (function) handler for the event                                                                        // 7428\n     = (object) @Element                                                                                               // 7429\n    \\*/                                                                                                                // 7430\n    /*\\\n     * Element.undblclick                                                                                              // 7432\n     [ method ]                                                                                                        // 7433\n     **                                                                                                                // 7434\n     * Removes a double click event handler from the element                                                           // 7435\n     - handler (function) handler for the event                                                                        // 7436\n     = (object) @Element                                                                                               // 7437\n    \\*/                                                                                                                // 7438\n                                                                                                                       // 7439\n    /*\\\n     * Element.mousedown                                                                                               // 7441\n     [ method ]                                                                                                        // 7442\n     **                                                                                                                // 7443\n     * Adds a mousedown event handler to the element                                                                   // 7444\n     - handler (function) handler for the event                                                                        // 7445\n     = (object) @Element                                                                                               // 7446\n    \\*/                                                                                                                // 7447\n    /*\\\n     * Element.unmousedown                                                                                             // 7449\n     [ method ]                                                                                                        // 7450\n     **                                                                                                                // 7451\n     * Removes a mousedown event handler from the element                                                              // 7452\n     - handler (function) handler for the event                                                                        // 7453\n     = (object) @Element                                                                                               // 7454\n    \\*/                                                                                                                // 7455\n                                                                                                                       // 7456\n    /*\\\n     * Element.mousemove                                                                                               // 7458\n     [ method ]                                                                                                        // 7459\n     **                                                                                                                // 7460\n     * Adds a mousemove event handler to the element                                                                   // 7461\n     - handler (function) handler for the event                                                                        // 7462\n     = (object) @Element                                                                                               // 7463\n    \\*/                                                                                                                // 7464\n    /*\\\n     * Element.unmousemove                                                                                             // 7466\n     [ method ]                                                                                                        // 7467\n     **                                                                                                                // 7468\n     * Removes a mousemove event handler from the element                                                              // 7469\n     - handler (function) handler for the event                                                                        // 7470\n     = (object) @Element                                                                                               // 7471\n    \\*/                                                                                                                // 7472\n                                                                                                                       // 7473\n    /*\\\n     * Element.mouseout                                                                                                // 7475\n     [ method ]                                                                                                        // 7476\n     **                                                                                                                // 7477\n     * Adds a mouseout event handler to the element                                                                    // 7478\n     - handler (function) handler for the event                                                                        // 7479\n     = (object) @Element                                                                                               // 7480\n    \\*/                                                                                                                // 7481\n    /*\\\n     * Element.unmouseout                                                                                              // 7483\n     [ method ]                                                                                                        // 7484\n     **                                                                                                                // 7485\n     * Removes a mouseout event handler from the element                                                               // 7486\n     - handler (function) handler for the event                                                                        // 7487\n     = (object) @Element                                                                                               // 7488\n    \\*/                                                                                                                // 7489\n                                                                                                                       // 7490\n    /*\\\n     * Element.mouseover                                                                                               // 7492\n     [ method ]                                                                                                        // 7493\n     **                                                                                                                // 7494\n     * Adds a mouseover event handler to the element                                                                   // 7495\n     - handler (function) handler for the event                                                                        // 7496\n     = (object) @Element                                                                                               // 7497\n    \\*/                                                                                                                // 7498\n    /*\\\n     * Element.unmouseover                                                                                             // 7500\n     [ method ]                                                                                                        // 7501\n     **                                                                                                                // 7502\n     * Removes a mouseover event handler from the element                                                              // 7503\n     - handler (function) handler for the event                                                                        // 7504\n     = (object) @Element                                                                                               // 7505\n    \\*/                                                                                                                // 7506\n                                                                                                                       // 7507\n    /*\\\n     * Element.mouseup                                                                                                 // 7509\n     [ method ]                                                                                                        // 7510\n     **                                                                                                                // 7511\n     * Adds a mouseup event handler to the element                                                                     // 7512\n     - handler (function) handler for the event                                                                        // 7513\n     = (object) @Element                                                                                               // 7514\n    \\*/                                                                                                                // 7515\n    /*\\\n     * Element.unmouseup                                                                                               // 7517\n     [ method ]                                                                                                        // 7518\n     **                                                                                                                // 7519\n     * Removes a mouseup event handler from the element                                                                // 7520\n     - handler (function) handler for the event                                                                        // 7521\n     = (object) @Element                                                                                               // 7522\n    \\*/                                                                                                                // 7523\n                                                                                                                       // 7524\n    /*\\\n     * Element.touchstart                                                                                              // 7526\n     [ method ]                                                                                                        // 7527\n     **                                                                                                                // 7528\n     * Adds a touchstart event handler to the element                                                                  // 7529\n     - handler (function) handler for the event                                                                        // 7530\n     = (object) @Element                                                                                               // 7531\n    \\*/                                                                                                                // 7532\n    /*\\\n     * Element.untouchstart                                                                                            // 7534\n     [ method ]                                                                                                        // 7535\n     **                                                                                                                // 7536\n     * Removes a touchstart event handler from the element                                                             // 7537\n     - handler (function) handler for the event                                                                        // 7538\n     = (object) @Element                                                                                               // 7539\n    \\*/                                                                                                                // 7540\n                                                                                                                       // 7541\n    /*\\\n     * Element.touchmove                                                                                               // 7543\n     [ method ]                                                                                                        // 7544\n     **                                                                                                                // 7545\n     * Adds a touchmove event handler to the element                                                                   // 7546\n     - handler (function) handler for the event                                                                        // 7547\n     = (object) @Element                                                                                               // 7548\n    \\*/                                                                                                                // 7549\n    /*\\\n     * Element.untouchmove                                                                                             // 7551\n     [ method ]                                                                                                        // 7552\n     **                                                                                                                // 7553\n     * Removes a touchmove event handler from the element                                                              // 7554\n     - handler (function) handler for the event                                                                        // 7555\n     = (object) @Element                                                                                               // 7556\n    \\*/                                                                                                                // 7557\n                                                                                                                       // 7558\n    /*\\\n     * Element.touchend                                                                                                // 7560\n     [ method ]                                                                                                        // 7561\n     **                                                                                                                // 7562\n     * Adds a touchend event handler to the element                                                                    // 7563\n     - handler (function) handler for the event                                                                        // 7564\n     = (object) @Element                                                                                               // 7565\n    \\*/                                                                                                                // 7566\n    /*\\\n     * Element.untouchend                                                                                              // 7568\n     [ method ]                                                                                                        // 7569\n     **                                                                                                                // 7570\n     * Removes a touchend event handler from the element                                                               // 7571\n     - handler (function) handler for the event                                                                        // 7572\n     = (object) @Element                                                                                               // 7573\n    \\*/                                                                                                                // 7574\n                                                                                                                       // 7575\n    /*\\\n     * Element.touchcancel                                                                                             // 7577\n     [ method ]                                                                                                        // 7578\n     **                                                                                                                // 7579\n     * Adds a touchcancel event handler to the element                                                                 // 7580\n     - handler (function) handler for the event                                                                        // 7581\n     = (object) @Element                                                                                               // 7582\n    \\*/                                                                                                                // 7583\n    /*\\\n     * Element.untouchcancel                                                                                           // 7585\n     [ method ]                                                                                                        // 7586\n     **                                                                                                                // 7587\n     * Removes a touchcancel event handler from the element                                                            // 7588\n     - handler (function) handler for the event                                                                        // 7589\n     = (object) @Element                                                                                               // 7590\n    \\*/                                                                                                                // 7591\n    for (var i = events.length; i--;) {                                                                                // 7592\n        (function (eventName) {                                                                                        // 7593\n            Snap[eventName] = elproto[eventName] = function (fn, scope) {                                              // 7594\n                if (Snap.is(fn, \"function\")) {                                                                         // 7595\n                    this.events = this.events || [];                                                                   // 7596\n                    this.events.push({                                                                                 // 7597\n                        name: eventName,                                                                               // 7598\n                        f: fn,                                                                                         // 7599\n                        unbind: addEvent(this.node || document, eventName, fn, scope || this)                          // 7600\n                    });                                                                                                // 7601\n                } else {                                                                                               // 7602\n                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {      // 7603\n                        try {                                                                                          // 7604\n                            this.events[i].f.call(this);                                                               // 7605\n                        } catch (e) {}                                                                                 // 7606\n                    }                                                                                                  // 7607\n                }                                                                                                      // 7608\n                return this;                                                                                           // 7609\n            };                                                                                                         // 7610\n            Snap[\"un\" + eventName] =                                                                                   // 7611\n            elproto[\"un\" + eventName] = function (fn) {                                                                // 7612\n                var events = this.events || [],                                                                        // 7613\n                    l = events.length;                                                                                 // 7614\n                while (l--) if (events[l].name == eventName &&                                                         // 7615\n                               (events[l].f == fn || !fn)) {                                                           // 7616\n                    events[l].unbind();                                                                                // 7617\n                    events.splice(l, 1);                                                                               // 7618\n                    !events.length && delete this.events;                                                              // 7619\n                    return this;                                                                                       // 7620\n                }                                                                                                      // 7621\n                return this;                                                                                           // 7622\n            };                                                                                                         // 7623\n        })(events[i]);                                                                                                 // 7624\n    }                                                                                                                  // 7625\n    /*\\\n     * Element.hover                                                                                                   // 7627\n     [ method ]                                                                                                        // 7628\n     **                                                                                                                // 7629\n     * Adds hover event handlers to the element                                                                        // 7630\n     - f_in (function) handler for hover in                                                                            // 7631\n     - f_out (function) handler for hover out                                                                          // 7632\n     - icontext (object) #optional context for hover in handler                                                        // 7633\n     - ocontext (object) #optional context for hover out handler                                                       // 7634\n     = (object) @Element                                                                                               // 7635\n    \\*/                                                                                                                // 7636\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {                                                      // 7637\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);                                  // 7638\n    };                                                                                                                 // 7639\n    /*\\\n     * Element.unhover                                                                                                 // 7641\n     [ method ]                                                                                                        // 7642\n     **                                                                                                                // 7643\n     * Removes hover event handlers from the element                                                                   // 7644\n     - f_in (function) handler for hover in                                                                            // 7645\n     - f_out (function) handler for hover out                                                                          // 7646\n     = (object) @Element                                                                                               // 7647\n    \\*/                                                                                                                // 7648\n    elproto.unhover = function (f_in, f_out) {                                                                         // 7649\n        return this.unmouseover(f_in).unmouseout(f_out);                                                               // 7650\n    };                                                                                                                 // 7651\n    var draggable = [];                                                                                                // 7652\n    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.                          // 7653\n    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?                         // 7654\n    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.                      // 7655\n    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n    /*\\\n     * Element.drag                                                                                                    // 7658\n     [ method ]                                                                                                        // 7659\n     **                                                                                                                // 7660\n     * Adds event handlers for an element's drag gesture                                                               // 7661\n     **                                                                                                                // 7662\n     - onmove (function) handler for moving                                                                            // 7663\n     - onstart (function) handler for drag start                                                                       // 7664\n     - onend (function) handler for drag end                                                                           // 7665\n     - mcontext (object) #optional context for moving handler                                                          // 7666\n     - scontext (object) #optional context for drag start handler                                                      // 7667\n     - econtext (object) #optional context for drag end handler                                                        // 7668\n     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start,                                  // 7669\n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element         // 7670\n     * `drag.over.<id>` fires as well.                                                                                 // 7671\n     *                                                                                                                 // 7672\n     * Start event and start handler are called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse                                                                              // 7674\n     o y (number) y position of the mouse                                                                              // 7675\n     o event (object) DOM event object                                                                                 // 7676\n     * Move event and move handler are called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point                                                                     // 7678\n     o dy (number) shift by y from the start point                                                                     // 7679\n     o x (number) x position of the mouse                                                                              // 7680\n     o y (number) y position of the mouse                                                                              // 7681\n     o event (object) DOM event object                                                                                 // 7682\n     * End event and end handler are called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object                                                                                 // 7684\n     = (object) @Element                                                                                               // 7685\n    \\*/                                                                                                                // 7686\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {                             // 7687\n        var el = this;                                                                                                 // 7688\n        if (!arguments.length) {                                                                                       // 7689\n            var origTransform;                                                                                         // 7690\n            return el.drag(function (dx, dy) {                                                                         // 7691\n                this.attr({                                                                                            // 7692\n                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]                                  // 7693\n                });                                                                                                    // 7694\n            }, function () {                                                                                           // 7695\n                origTransform = this.transform().local;                                                                // 7696\n            });                                                                                                        // 7697\n        }                                                                                                              // 7698\n        function start(e, x, y) {                                                                                      // 7699\n            (e.originalEvent || e).preventDefault();                                                                   // 7700\n            el._drag.x = x;                                                                                            // 7701\n            el._drag.y = y;                                                                                            // 7702\n            el._drag.id = e.identifier;                                                                                // 7703\n            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);                                                  // 7704\n            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});               // 7705\n            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);                                                    // 7706\n            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);                                                       // 7707\n            onend && eve.on(\"snap.drag.end.\" + el.id, onend);                                                          // 7708\n            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);                                 // 7709\n        }                                                                                                              // 7710\n        function init(e, x, y) {                                                                                       // 7711\n            eve(\"snap.draginit.\" + el.id, el, e, x, y);                                                                // 7712\n        }                                                                                                              // 7713\n        eve.on(\"snap.draginit.\" + el.id, start);                                                                       // 7714\n        el._drag = {};                                                                                                 // 7715\n        draggable.push({el: el, start: start, init: init});                                                            // 7716\n        el.mousedown(init);                                                                                            // 7717\n        return el;                                                                                                     // 7718\n    };                                                                                                                 // 7719\n    /*                                                                                                                 // 7720\n     * Element.onDragOver                                                                                              // 7721\n     [ method ]                                                                                                        // 7722\n     **                                                                                                                // 7723\n     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id) // 7724\n     - f (function) handler for event, first argument would be the element you are dragging over                       // 7725\n    \\*/                                                                                                                // 7726\n    // elproto.onDragOver = function (f) {                                                                             // 7727\n    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);                       // 7728\n    // };                                                                                                              // 7729\n    /*\\\n     * Element.undrag                                                                                                  // 7731\n     [ method ]                                                                                                        // 7732\n     **                                                                                                                // 7733\n     * Removes all drag event handlers from the given element                                                          // 7734\n    \\*/                                                                                                                // 7735\n    elproto.undrag = function () {                                                                                     // 7736\n        var i = draggable.length;                                                                                      // 7737\n        while (i--) if (draggable[i].el == this) {                                                                     // 7738\n            this.unmousedown(draggable[i].init);                                                                       // 7739\n            draggable.splice(i, 1);                                                                                    // 7740\n            eve.unbind(\"snap.drag.*.\" + this.id);                                                                      // 7741\n            eve.unbind(\"snap.draginit.\" + this.id);                                                                    // 7742\n        }                                                                                                              // 7743\n        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);                                             // 7744\n        return this;                                                                                                   // 7745\n    };                                                                                                                 // 7746\n});                                                                                                                    // 7747\n                                                                                                                       // 7748\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.                                                 // 7749\n//                                                                                                                     // 7750\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 7751\n// you may not use this file except in compliance with the License.                                                    // 7752\n// You may obtain a copy of the License at                                                                             // 7753\n//                                                                                                                     // 7754\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 7755\n//                                                                                                                     // 7756\n// Unless required by applicable law or agreed to in writing, software                                                 // 7757\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 7758\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 7759\n// See the License for the specific language governing permissions and                                                 // 7760\n// limitations under the License.                                                                                      // 7761\nSnap.plugin(function (Snap, Element, Paper, glob) {                                                                    // 7762\n    var elproto = Element.prototype,                                                                                   // 7763\n        pproto = Paper.prototype,                                                                                      // 7764\n        rgurl = /^\\s*url\\((.+)\\)/,                                                                                     // 7765\n        Str = String,                                                                                                  // 7766\n        $ = Snap._.$;                                                                                                  // 7767\n    Snap.filter = {};                                                                                                  // 7768\n    /*\\\n     * Paper.filter                                                                                                    // 7770\n     [ method ]                                                                                                        // 7771\n     **                                                                                                                // 7772\n     * Creates a `<filter>` element                                                                                    // 7773\n     **                                                                                                                // 7774\n     - filstr (string) SVG fragment of filter provided as a string                                                     // 7775\n     = (object) @Element                                                                                               // 7776\n     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.                      // 7777\n     > Usage                                                                                                           // 7778\n     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),                                                     // 7779\n     |     c = paper.circle(10, 10, 10).attr({                                                                         // 7780\n     |         filter: f                                                                                               // 7781\n     |     });                                                                                                         // 7782\n    \\*/                                                                                                                // 7783\n    pproto.filter = function (filstr) {                                                                                // 7784\n        var paper = this;                                                                                              // 7785\n        if (paper.type != \"svg\") {                                                                                     // 7786\n            paper = paper.paper;                                                                                       // 7787\n        }                                                                                                              // 7788\n        var f = Snap.parse(Str(filstr)),                                                                               // 7789\n            id = Snap._.id(),                                                                                          // 7790\n            width = paper.node.offsetWidth,                                                                            // 7791\n            height = paper.node.offsetHeight,                                                                          // 7792\n            filter = $(\"filter\");                                                                                      // 7793\n        $(filter, {                                                                                                    // 7794\n            id: id,                                                                                                    // 7795\n            filterUnits: \"userSpaceOnUse\"                                                                              // 7796\n        });                                                                                                            // 7797\n        filter.appendChild(f.node);                                                                                    // 7798\n        paper.defs.appendChild(filter);                                                                                // 7799\n        return new Element(filter);                                                                                    // 7800\n    };                                                                                                                 // 7801\n                                                                                                                       // 7802\n    eve.on(\"snap.util.getattr.filter\", function () {                                                                   // 7803\n        eve.stop();                                                                                                    // 7804\n        var p = $(this.node, \"filter\");                                                                                // 7805\n        if (p) {                                                                                                       // 7806\n            var match = Str(p).match(rgurl);                                                                           // 7807\n            return match && Snap.select(match[1]);                                                                     // 7808\n        }                                                                                                              // 7809\n    });                                                                                                                // 7810\n    eve.on(\"snap.util.attr.filter\", function (value) {                                                                 // 7811\n        if (value instanceof Element && value.type == \"filter\") {                                                      // 7812\n            eve.stop();                                                                                                // 7813\n            var id = value.node.id;                                                                                    // 7814\n            if (!id) {                                                                                                 // 7815\n                $(value.node, {id: value.id});                                                                         // 7816\n                id = value.id;                                                                                         // 7817\n            }                                                                                                          // 7818\n            $(this.node, {                                                                                             // 7819\n                filter: Snap.url(id)                                                                                   // 7820\n            });                                                                                                        // 7821\n        }                                                                                                              // 7822\n        if (!value || value == \"none\") {                                                                               // 7823\n            eve.stop();                                                                                                // 7824\n            this.node.removeAttribute(\"filter\");                                                                       // 7825\n        }                                                                                                              // 7826\n    });                                                                                                                // 7827\n    /*\\\n     * Snap.filter.blur                                                                                                // 7829\n     [ method ]                                                                                                        // 7830\n     **                                                                                                                // 7831\n     * Returns an SVG markup string for the blur filter                                                                // 7832\n     **                                                                                                                // 7833\n     - x (number) amount of horizontal blur, in pixels                                                                 // 7834\n     - y (number) #optional amount of vertical blur, in pixels                                                         // 7835\n     = (string) filter representation                                                                                  // 7836\n     > Usage                                                                                                           // 7837\n     | var f = paper.filter(Snap.filter.blur(5, 10)),                                                                  // 7838\n     |     c = paper.circle(10, 10, 10).attr({                                                                         // 7839\n     |         filter: f                                                                                               // 7840\n     |     });                                                                                                         // 7841\n    \\*/                                                                                                                // 7842\n    Snap.filter.blur = function (x, y) {                                                                               // 7843\n        if (x == null) {                                                                                               // 7844\n            x = 2;                                                                                                     // 7845\n        }                                                                                                              // 7846\n        var def = y == null ? x : [x, y];                                                                              // 7847\n        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {                                                // 7848\n            def: def                                                                                                   // 7849\n        });                                                                                                            // 7850\n    };                                                                                                                 // 7851\n    Snap.filter.blur.toString = function () {                                                                          // 7852\n        return this();                                                                                                 // 7853\n    };                                                                                                                 // 7854\n    /*\\\n     * Snap.filter.shadow                                                                                              // 7856\n     [ method ]                                                                                                        // 7857\n     **                                                                                                                // 7858\n     * Returns an SVG markup string for the shadow filter                                                              // 7859\n     **                                                                                                                // 7860\n     - dx (number) #optional horizontal shift of the shadow, in pixels                                                 // 7861\n     - dy (number) #optional vertical shift of the shadow, in pixels                                                   // 7862\n     - blur (number) #optional amount of blur                                                                          // 7863\n     - color (string) #optional color of the shadow                                                                    // 7864\n     - opacity (number) #optional `0..1` opacity of the shadow                                                         // 7865\n     * or                                                                                                              // 7866\n     - dx (number) #optional horizontal shift of the shadow, in pixels                                                 // 7867\n     - dy (number) #optional vertical shift of the shadow, in pixels                                                   // 7868\n     - color (string) #optional color of the shadow                                                                    // 7869\n     - opacity (number) #optional `0..1` opacity of the shadow                                                         // 7870\n     * which makes blur default to `4`. Or                                                                             // 7871\n     - dx (number) #optional horizontal shift of the shadow, in pixels                                                 // 7872\n     - dy (number) #optional vertical shift of the shadow, in pixels                                                   // 7873\n     - opacity (number) #optional `0..1` opacity of the shadow                                                         // 7874\n     = (string) filter representation                                                                                  // 7875\n     > Usage                                                                                                           // 7876\n     | var f = paper.filter(Snap.filter.shadow(0, 2, 3)),                                                              // 7877\n     |     c = paper.circle(10, 10, 10).attr({                                                                         // 7878\n     |         filter: f                                                                                               // 7879\n     |     });                                                                                                         // 7880\n    \\*/                                                                                                                // 7881\n    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {                                                     // 7882\n        if (typeof blur == \"string\") {                                                                                 // 7883\n            color = blur;                                                                                              // 7884\n            opacity = color;                                                                                           // 7885\n            blur = 4;                                                                                                  // 7886\n        }                                                                                                              // 7887\n        if (typeof color != \"string\") {                                                                                // 7888\n            opacity = color;                                                                                           // 7889\n            color = \"#000\";                                                                                            // 7890\n        }                                                                                                              // 7891\n        color = color || \"#000\";                                                                                       // 7892\n        if (blur == null) {                                                                                            // 7893\n            blur = 4;                                                                                                  // 7894\n        }                                                                                                              // 7895\n        if (opacity == null) {                                                                                         // 7896\n            opacity = 1;                                                                                               // 7897\n        }                                                                                                              // 7898\n        if (dx == null) {                                                                                              // 7899\n            dx = 0;                                                                                                    // 7900\n            dy = 2;                                                                                                    // 7901\n        }                                                                                                              // 7902\n        if (dy == null) {                                                                                              // 7903\n            dy = dx;                                                                                                   // 7904\n        }                                                                                                              // 7905\n        color = Snap.color(color);                                                                                     // 7906\n        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n            color: color,                                                                                              // 7908\n            dx: dx,                                                                                                    // 7909\n            dy: dy,                                                                                                    // 7910\n            blur: blur,                                                                                                // 7911\n            opacity: opacity                                                                                           // 7912\n        });                                                                                                            // 7913\n    };                                                                                                                 // 7914\n    Snap.filter.shadow.toString = function () {                                                                        // 7915\n        return this();                                                                                                 // 7916\n    };                                                                                                                 // 7917\n    /*\\\n     * Snap.filter.grayscale                                                                                           // 7919\n     [ method ]                                                                                                        // 7920\n     **                                                                                                                // 7921\n     * Returns an SVG markup string for the grayscale filter                                                           // 7922\n     **                                                                                                                // 7923\n     - amount (number) amount of filter (`0..1`)                                                                       // 7924\n     = (string) filter representation                                                                                  // 7925\n    \\*/                                                                                                                // 7926\n    Snap.filter.grayscale = function (amount) {                                                                        // 7927\n        if (amount == null) {                                                                                          // 7928\n            amount = 1;                                                                                                // 7929\n        }                                                                                                              // 7930\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n            a: 0.2126 + 0.7874 * (1 - amount),                                                                         // 7932\n            b: 0.7152 - 0.7152 * (1 - amount),                                                                         // 7933\n            c: 0.0722 - 0.0722 * (1 - amount),                                                                         // 7934\n            d: 0.2126 - 0.2126 * (1 - amount),                                                                         // 7935\n            e: 0.7152 + 0.2848 * (1 - amount),                                                                         // 7936\n            f: 0.0722 - 0.0722 * (1 - amount),                                                                         // 7937\n            g: 0.2126 - 0.2126 * (1 - amount),                                                                         // 7938\n            h: 0.0722 + 0.9278 * (1 - amount)                                                                          // 7939\n        });                                                                                                            // 7940\n    };                                                                                                                 // 7941\n    Snap.filter.grayscale.toString = function () {                                                                     // 7942\n        return this();                                                                                                 // 7943\n    };                                                                                                                 // 7944\n    /*\\\n     * Snap.filter.sepia                                                                                               // 7946\n     [ method ]                                                                                                        // 7947\n     **                                                                                                                // 7948\n     * Returns an SVG markup string for the sepia filter                                                               // 7949\n     **                                                                                                                // 7950\n     - amount (number) amount of filter (`0..1`)                                                                       // 7951\n     = (string) filter representation                                                                                  // 7952\n    \\*/                                                                                                                // 7953\n    Snap.filter.sepia = function (amount) {                                                                            // 7954\n        if (amount == null) {                                                                                          // 7955\n            amount = 1;                                                                                                // 7956\n        }                                                                                                              // 7957\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n            a: 0.393 + 0.607 * (1 - amount),                                                                           // 7959\n            b: 0.769 - 0.769 * (1 - amount),                                                                           // 7960\n            c: 0.189 - 0.189 * (1 - amount),                                                                           // 7961\n            d: 0.349 - 0.349 * (1 - amount),                                                                           // 7962\n            e: 0.686 + 0.314 * (1 - amount),                                                                           // 7963\n            f: 0.168 - 0.168 * (1 - amount),                                                                           // 7964\n            g: 0.272 - 0.272 * (1 - amount),                                                                           // 7965\n            h: 0.534 - 0.534 * (1 - amount),                                                                           // 7966\n            i: 0.131 + 0.869 * (1 - amount)                                                                            // 7967\n        });                                                                                                            // 7968\n    };                                                                                                                 // 7969\n    Snap.filter.sepia.toString = function () {                                                                         // 7970\n        return this();                                                                                                 // 7971\n    };                                                                                                                 // 7972\n    /*\\\n     * Snap.filter.saturate                                                                                            // 7974\n     [ method ]                                                                                                        // 7975\n     **                                                                                                                // 7976\n     * Returns an SVG markup string for the saturate filter                                                            // 7977\n     **                                                                                                                // 7978\n     - amount (number) amount of filter (`0..1`)                                                                       // 7979\n     = (string) filter representation                                                                                  // 7980\n    \\*/                                                                                                                // 7981\n    Snap.filter.saturate = function (amount) {                                                                         // 7982\n        if (amount == null) {                                                                                          // 7983\n            amount = 1;                                                                                                // 7984\n        }                                                                                                              // 7985\n        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {                                     // 7986\n            amount: 1 - amount                                                                                         // 7987\n        });                                                                                                            // 7988\n    };                                                                                                                 // 7989\n    Snap.filter.saturate.toString = function () {                                                                      // 7990\n        return this();                                                                                                 // 7991\n    };                                                                                                                 // 7992\n    /*\\\n     * Snap.filter.hueRotate                                                                                           // 7994\n     [ method ]                                                                                                        // 7995\n     **                                                                                                                // 7996\n     * Returns an SVG markup string for the hue-rotate filter                                                          // 7997\n     **                                                                                                                // 7998\n     - angle (number) angle of rotation                                                                                // 7999\n     = (string) filter representation                                                                                  // 8000\n    \\*/                                                                                                                // 8001\n    Snap.filter.hueRotate = function (angle) {                                                                         // 8002\n        angle = angle || 0;                                                                                            // 8003\n        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {                                     // 8004\n            angle: angle                                                                                               // 8005\n        });                                                                                                            // 8006\n    };                                                                                                                 // 8007\n    Snap.filter.hueRotate.toString = function () {                                                                     // 8008\n        return this();                                                                                                 // 8009\n    };                                                                                                                 // 8010\n    /*\\\n     * Snap.filter.invert                                                                                              // 8012\n     [ method ]                                                                                                        // 8013\n     **                                                                                                                // 8014\n     * Returns an SVG markup string for the invert filter                                                              // 8015\n     **                                                                                                                // 8016\n     - amount (number) amount of filter (`0..1`)                                                                       // 8017\n     = (string) filter representation                                                                                  // 8018\n    \\*/                                                                                                                // 8019\n    Snap.filter.invert = function (amount) {                                                                           // 8020\n        if (amount == null) {                                                                                          // 8021\n            amount = 1;                                                                                                // 8022\n        }                                                                                                              // 8023\n//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n            amount: amount,                                                                                            // 8026\n            amount2: 1 - amount                                                                                        // 8027\n        });                                                                                                            // 8028\n    };                                                                                                                 // 8029\n    Snap.filter.invert.toString = function () {                                                                        // 8030\n        return this();                                                                                                 // 8031\n    };                                                                                                                 // 8032\n    /*\\\n     * Snap.filter.brightness                                                                                          // 8034\n     [ method ]                                                                                                        // 8035\n     **                                                                                                                // 8036\n     * Returns an SVG markup string for the brightness filter                                                          // 8037\n     **                                                                                                                // 8038\n     - amount (number) amount of filter (`0..1`)                                                                       // 8039\n     = (string) filter representation                                                                                  // 8040\n    \\*/                                                                                                                // 8041\n    Snap.filter.brightness = function (amount) {                                                                       // 8042\n        if (amount == null) {                                                                                          // 8043\n            amount = 1;                                                                                                // 8044\n        }                                                                                                              // 8045\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n            amount: amount                                                                                             // 8047\n        });                                                                                                            // 8048\n    };                                                                                                                 // 8049\n    Snap.filter.brightness.toString = function () {                                                                    // 8050\n        return this();                                                                                                 // 8051\n    };                                                                                                                 // 8052\n    /*\\\n     * Snap.filter.contrast                                                                                            // 8054\n     [ method ]                                                                                                        // 8055\n     **                                                                                                                // 8056\n     * Returns an SVG markup string for the contrast filter                                                            // 8057\n     **                                                                                                                // 8058\n     - amount (number) amount of filter (`0..1`)                                                                       // 8059\n     = (string) filter representation                                                                                  // 8060\n    \\*/                                                                                                                // 8061\n    Snap.filter.contrast = function (amount) {                                                                         // 8062\n        if (amount == null) {                                                                                          // 8063\n            amount = 1;                                                                                                // 8064\n        }                                                                                                              // 8065\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n            amount: amount,                                                                                            // 8067\n            amount2: .5 - amount / 2                                                                                   // 8068\n        });                                                                                                            // 8069\n    };                                                                                                                 // 8070\n    Snap.filter.contrast.toString = function () {                                                                      // 8071\n        return this();                                                                                                 // 8072\n    };                                                                                                                 // 8073\n});                                                                                                                    // 8074\n                                                                                                                       // 8075\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.                                                 // 8076\n//                                                                                                                     // 8077\n// Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 8078\n// you may not use this file except in compliance with the License.                                                    // 8079\n// You may obtain a copy of the License at                                                                             // 8080\n//                                                                                                                     // 8081\n// http://www.apache.org/licenses/LICENSE-2.0                                                                          // 8082\n//                                                                                                                     // 8083\n// Unless required by applicable law or agreed to in writing, software                                                 // 8084\n// distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 8085\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 8086\n// See the License for the specific language governing permissions and                                                 // 8087\n// limitations under the License.                                                                                      // 8088\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {                                                          // 8089\n    var box = Snap._.box,                                                                                              // 8090\n        is = Snap.is,                                                                                                  // 8091\n        firstLetter = /^[^a-z]*([tbmlrc])/i,                                                                           // 8092\n        toString = function () {                                                                                       // 8093\n            return \"T\" + this.dx + \",\" + this.dy;                                                                      // 8094\n        };                                                                                                             // 8095\n    /*\\\n     * Element.getAlign                                                                                                // 8097\n     [ method ]                                                                                                        // 8098\n     **                                                                                                                // 8099\n     * Returns shift needed to align the element relatively to given element.                                          // 8100\n     * If no elements specified, parent `<svg>` container will be used.                                                // 8101\n     - el (object) @optional alignment element                                                                         // 8102\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`                // 8103\n     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string     // 8104\n     > Usage                                                                                                           // 8105\n     | el.transform(el.getAlign(el2, \"top\"));                                                                          // 8106\n     * or                                                                                                              // 8107\n     | var dy = el.getAlign(el2, \"top\").dy;                                                                            // 8108\n    \\*/                                                                                                                // 8109\n    Element.prototype.getAlign = function (el, way) {                                                                  // 8110\n        if (way == null && is(el, \"string\")) {                                                                         // 8111\n            way = el;                                                                                                  // 8112\n            el = null;                                                                                                 // 8113\n        }                                                                                                              // 8114\n        el = el || this.paper;                                                                                         // 8115\n        var bx = el.getBBox ? el.getBBox() : box(el),                                                                  // 8116\n            bb = this.getBBox(),                                                                                       // 8117\n            out = {};                                                                                                  // 8118\n        way = way && way.match(firstLetter);                                                                           // 8119\n        way = way ? way[1].toLowerCase() : \"c\";                                                                        // 8120\n        switch (way) {                                                                                                 // 8121\n            case \"t\":                                                                                                  // 8122\n                out.dx = 0;                                                                                            // 8123\n                out.dy = bx.y - bb.y;                                                                                  // 8124\n            break;                                                                                                     // 8125\n            case \"b\":                                                                                                  // 8126\n                out.dx = 0;                                                                                            // 8127\n                out.dy = bx.y2 - bb.y2;                                                                                // 8128\n            break;                                                                                                     // 8129\n            case \"m\":                                                                                                  // 8130\n                out.dx = 0;                                                                                            // 8131\n                out.dy = bx.cy - bb.cy;                                                                                // 8132\n            break;                                                                                                     // 8133\n            case \"l\":                                                                                                  // 8134\n                out.dx = bx.x - bb.x;                                                                                  // 8135\n                out.dy = 0;                                                                                            // 8136\n            break;                                                                                                     // 8137\n            case \"r\":                                                                                                  // 8138\n                out.dx = bx.x2 - bb.x2;                                                                                // 8139\n                out.dy = 0;                                                                                            // 8140\n            break;                                                                                                     // 8141\n            default:                                                                                                   // 8142\n                out.dx = bx.cx - bb.cx;                                                                                // 8143\n                out.dy = 0;                                                                                            // 8144\n            break;                                                                                                     // 8145\n        }                                                                                                              // 8146\n        out.toString = toString;                                                                                       // 8147\n        return out;                                                                                                    // 8148\n    };                                                                                                                 // 8149\n    /*\\\n     * Element.align                                                                                                   // 8151\n     [ method ]                                                                                                        // 8152\n     **                                                                                                                // 8153\n     * Aligns the element relatively to given one via transformation.                                                  // 8154\n     * If no elements specified, parent `<svg>` container will be used.                                                // 8155\n     - el (object) @optional alignment element                                                                         // 8156\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`                // 8157\n     = (object) this element                                                                                           // 8158\n     > Usage                                                                                                           // 8159\n     | el.align(el2, \"top\");                                                                                           // 8160\n     * or                                                                                                              // 8161\n     | el.align(\"middle\");                                                                                             // 8162\n    \\*/                                                                                                                // 8163\n    Element.prototype.align = function (el, way) {                                                                     // 8164\n        return this.transform(\"...\" + this.getAlign(el, way));                                                         // 8165\n    };                                                                                                                 // 8166\n});                                                                                                                    // 8167\n                                                                                                                       // 8168\nreturn Snap;                                                                                                           // 8169\n}));                                                                                                                   // 8170\n                                                                                                                       // 8171\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['jeremy:snapsvg'] = {};\n\n})();\n","servePath":"/packages/jeremy_snapsvg.js"}]